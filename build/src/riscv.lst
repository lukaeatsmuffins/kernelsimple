GAS LISTING /tmp/ccN0JXiZ.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB33:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie()
  10:src/riscv.cpp **** {
  15              		.loc 1 10 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  11:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  23              		.loc 1 11 5
  24              		.loc 1 11 38 is_stmt 0
  25              	 #APP
  26              	# 11 "src/riscv.cpp" 1
  12              	    __asm__ volatile("sret");
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 12 5 is_stmt 1
  30              		.loc 1 12 29 is_stmt 0
  31              	# 12 "src/riscv.cpp" 1
  13              	}
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 13 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
  43              	.LFE33:
  45              		.align	2
  46              		.globl	_ZN5Riscv20handleSupervisorTrapEv
GAS LISTING /tmp/ccN0JXiZ.s 			page 2


  48              	_ZN5Riscv20handleSupervisorTrapEv:
  49              	.LFB34:
  14:src/riscv.cpp **** 
  15:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  16:src/riscv.cpp **** {
  50              		.loc 1 16 1 is_stmt 1
  51              		.cfi_startproc
  52 0020 130101FA 		addi	sp,sp,-96
  53              		.cfi_def_cfa_offset 96
  54 0024 233C1104 		sd	ra,88(sp)
  55 0028 23388104 		sd	s0,80(sp)
  56              		.cfi_offset 1, -8
  57              		.cfi_offset 8, -16
  58 002c 13040106 		addi	s0,sp,96
  59              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp ****     uint64 scause = r_scause();
  60              		.loc 1 17 5
  61              	.LBB30:
  62              	.LBB31:
  63              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccN0JXiZ.s 			page 3


  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
  64              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  65              		.loc 2 92 5
GAS LISTING /tmp/ccN0JXiZ.s 			page 4


  66              		.loc 2 92 72 is_stmt 0
  67              	 #APP
  68              	# 92 "src/../h/riscv.hpp" 1
  93              	    return scause;
  69              		csrr a5, scause
  70              	# 0 "" 2
  71              	 #NO_APP
  72 0034 2334F4FC 		sd	a5,-56(s0)
  73              		.loc 2 93 5 is_stmt 1
  74              		.loc 2 93 12 is_stmt 0
  75 0038 033784FC 		ld	a4,-56(s0)
  76              	.LVL0:
  77              	.LBE31:
  78              	.LBE30:
  18:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  79              		.loc 1 18 5 is_stmt 1
  80              	.LBB32:
  81              		.loc 1 18 40 is_stmt 0
  82 003c 930687FF 		addi	a3,a4,-8
  83              		.loc 1 18 5
  84 0040 93071000 		li	a5,1
  85 0044 63FAD702 		bleu	a3,a5,.L8
  86              	.LBE32:
  19:src/riscv.cpp ****     {
  20:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  23:src/riscv.cpp ****         TCB::timeSliceCounter = 0;
  24:src/riscv.cpp ****         TCB::dispatch();
  25:src/riscv.cpp ****         w_sstatus(sstatus);
  26:src/riscv.cpp ****         w_sepc(sepc);
  27:src/riscv.cpp ****     }
  28:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  87              		.loc 1 28 10 is_stmt 1
  88              	.LBB59:
  89              	.LBB33:
  90 0048 9307F0FF 		li	a5,-1
  91 004c 9397F703 		slli	a5,a5,63
  92 0050 93871700 		addi	a5,a5,1
  93 0054 6306F706 		beq	a4,a5,.L9
  29:src/riscv.cpp ****     {
  30:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  31:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  32:src/riscv.cpp ****         TCB::timeSliceCounter++;
  33:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  34:src/riscv.cpp ****         {
  35:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
  36:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  37:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  38:src/riscv.cpp ****             TCB::dispatch();
  39:src/riscv.cpp ****             w_sstatus(sstatus);
  40:src/riscv.cpp ****             w_sepc(sepc);
  41:src/riscv.cpp ****         }
  42:src/riscv.cpp ****     }
  43:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  94              		.loc 1 43 10
  95 0058 9307F0FF 		li	a5,-1
GAS LISTING /tmp/ccN0JXiZ.s 			page 5


  96 005c 9397F703 		slli	a5,a5,63
  97 0060 93879700 		addi	a5,a5,9
  98 0064 6308F70C 		beq	a4,a5,.L10
  99              	.LVL1:
 100              	.L3:
 101              	.LBE33:
 102              	.LBE59:
  44:src/riscv.cpp ****     {
  45:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  46:src/riscv.cpp ****         console_handler();
  47:src/riscv.cpp ****     }
  48:src/riscv.cpp ****     else
  49:src/riscv.cpp ****     {
  50:src/riscv.cpp ****         // unexpected trap cause
  51:src/riscv.cpp ****     }
  52:src/riscv.cpp **** }...
 103              		.loc 1 52 1 is_stmt 0
 104 0068 83308105 		ld	ra,88(sp)
 105              		.cfi_remember_state
 106              		.cfi_restore 1
 107 006c 03340105 		ld	s0,80(sp)
 108              		.cfi_restore 8
 109              		.cfi_def_cfa 2, 96
 110 0070 13010106 		addi	sp,sp,96
 111              		.cfi_def_cfa_offset 0
 112 0074 67800000 		jr	ra
 113              	.LVL2:
 114              	.L8:
 115              		.cfi_restore_state
 116              	.LBB60:
 117              	.LBB49:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 118              		.loc 1 21 9 is_stmt 1
 119              	.LBB50:
 120              	.LBB51:
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 121              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 122              		.loc 2 104 5
 123              		.loc 2 104 64 is_stmt 0
 124              	 #APP
 125              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
 126              		csrr a5, sepc
 127              	# 0 "" 2
 128              	 #NO_APP
 129 007c 233CF4FC 		sd	a5,-40(s0)
 130              		.loc 2 105 5 is_stmt 1
GAS LISTING /tmp/ccN0JXiZ.s 			page 6


 131              		.loc 2 105 12 is_stmt 0
 132 0080 833784FD 		ld	a5,-40(s0)
 133              	.LBE51:
 134              	.LBE50:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 135              		.loc 1 21 41
 136 0084 93874700 		addi	a5,a5,4
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 137              		.loc 1 21 43
 138 0088 2334F4FA 		sd	a5,-88(s0)
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 139              		.loc 1 22 9 is_stmt 1
 140              	.LBB52:
 141              	.LBB53:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccN0JXiZ.s 			page 7


 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 142              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 143              		.loc 2 172 5
 144              		.loc 2 172 76 is_stmt 0
 145              	 #APP
 146              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 147              		csrr a5, sstatus
 148              	# 0 "" 2
 149              	 #NO_APP
 150 0090 2338F4FC 		sd	a5,-48(s0)
 151              		.loc 2 173 5 is_stmt 1
 152              		.loc 2 173 12 is_stmt 0
 153 0094 833704FD 		ld	a5,-48(s0)
 154              	.LBE53:
 155              	.LBE52:
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 156              		.loc 1 22 45
 157 0098 2338F4FA 		sd	a5,-80(s0)
  23:src/riscv.cpp ****         TCB::timeSliceCounter = 0;
 158              		.loc 1 23 9 is_stmt 1
  23:src/riscv.cpp ****         TCB::timeSliceCounter = 0;
 159              		.loc 1 23 31 is_stmt 0
 160 009c 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 160      23B00700 
  24:src/riscv.cpp ****         TCB::dispatch();
 161              		.loc 1 24 9 is_stmt 1
  24:src/riscv.cpp ****         TCB::dispatch();
 162              		.loc 1 24 22 is_stmt 0
 163 00a4 97000000 		call	_ZN3TCB8dispatchEv
 163      E7800000 
 164              	.LVL3:
  25:src/riscv.cpp ****         w_sstatus(sstatus);
 165              		.loc 1 25 9 is_stmt 1
GAS LISTING /tmp/ccN0JXiZ.s 			page 8


  25:src/riscv.cpp ****         w_sstatus(sstatus);
 166              		.loc 1 25 18 is_stmt 0
 167 00ac 833704FB 		ld	a5,-80(s0)
 168              	.LVL4:
 169              	.LBB54:
 170              	.LBB55:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 171              		.loc 2 178 5 is_stmt 1
 172              		.loc 2 178 77 is_stmt 0
 173              	 #APP
 174              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 175              		csrw sstatus, a5
 176              	# 0 "" 2
 177              	.LVL5:
 178              	 #NO_APP
 179              	.LBE55:
 180              	.LBE54:
  26:src/riscv.cpp ****         w_sepc(sepc);
 181              		.loc 1 26 9 is_stmt 1
  26:src/riscv.cpp ****         w_sepc(sepc);
 182              		.loc 1 26 15 is_stmt 0
 183 00b4 833784FA 		ld	a5,-88(s0)
 184              	.LVL6:
 185              	.LBB56:
 186              	.LBB57:
 110:src/../h/riscv.hpp **** }
 187              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 188              		.loc 2 110 65 is_stmt 0
 189              	 #APP
 190              	# 110 "src/../h/riscv.hpp" 1
 191              		csrw sepc, a5
 192              	# 0 "" 2
 193              	 #NO_APP
 194 00bc 6FF0DFFA 		j	.L3
 195              	.LVL7:
 196              	.L9:
 197              	.LBE57:
 198              	.LBE56:
 199              	.LBE49:
 200              	.LBB58:
 201              	.LBB34:
  31:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 202              		.loc 1 31 9 is_stmt 1
 203              	.LBB35:
 204              	.LBB36:
 144:src/../h/riscv.hpp **** }
 205              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 206              		.loc 2 144 64 is_stmt 0
 207 00c0 93072000 		li	a5,2
 208              	 #APP
GAS LISTING /tmp/ccN0JXiZ.s 			page 9


 209              	# 144 "src/../h/riscv.hpp" 1
 210              		csrc sip, a5
 211              	# 0 "" 2
 212              	.LVL8:
 213              	 #NO_APP
 214              	.LBE36:
 215              	.LBE35:
  32:src/riscv.cpp ****         TCB::timeSliceCounter++;
 216              		.loc 1 32 9 is_stmt 1
  32:src/riscv.cpp ****         TCB::timeSliceCounter++;
 217              		.loc 1 32 30 is_stmt 0
 218 00c8 17070000 		lla	a4,_ZN3TCB16timeSliceCounterE
 218      13070700 
 219              	.LVL9:
 220 00d0 83370700 		ld	a5,0(a4)
 221 00d4 93871700 		addi	a5,a5,1
 222 00d8 2330F700 		sd	a5,0(a4)
  33:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 223              		.loc 1 33 9 is_stmt 1
 224              	.LBB37:
  33:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 225              		.loc 1 33 64 is_stmt 0
 226 00dc 17070000 		lla	a4,_ZN3TCB7runningE
 226      13070700 
 227 00e4 03370700 		ld	a4,0(a4)
 228              	.LVL10:
 229              	.LBB38:
 230              	.LBB39:
 231              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 232              		.loc 3 21 35 is_stmt 1
 233              		.loc 3 21 42 is_stmt 0
 234 00e8 03370702 		ld	a4,32(a4)
 235              	.LVL11:
 236              	.LBE39:
 237              	.LBE38:
  33:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
GAS LISTING /tmp/ccN0JXiZ.s 			page 10


 238              		.loc 1 33 9
 239 00ec E3EEE7F6 		bltu	a5,a4,.L3
 240              	.LBB40:
  35:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 241              		.loc 1 35 13 is_stmt 1
 242              	.LBB41:
 243              	.LBB42:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 244              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 245              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 246              		.loc 2 104 64 is_stmt 0
 247              	 #APP
 248              	# 104 "src/../h/riscv.hpp" 1
 249              		csrr a5, sepc
 250              	# 0 "" 2
 251              	 #NO_APP
 252 00f4 2334F4FE 		sd	a5,-24(s0)
 105:src/../h/riscv.hpp **** }
 253              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 254              		.loc 2 105 12 is_stmt 0
 255 00f8 833784FE 		ld	a5,-24(s0)
 256              	.LBE42:
 257              	.LBE41:
  35:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 258              		.loc 1 35 43
 259 00fc 233CF4FA 		sd	a5,-72(s0)
  36:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 260              		.loc 1 36 13 is_stmt 1
 261              	.LBB43:
 262              	.LBB44:
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 263              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 264              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 265              		.loc 2 172 76 is_stmt 0
 266              	 #APP
 267              	# 172 "src/../h/riscv.hpp" 1
 268              		csrr a5, sstatus
 269              	# 0 "" 2
 270              	 #NO_APP
 271 0104 2330F4FE 		sd	a5,-32(s0)
 173:src/../h/riscv.hpp **** }
 272              		.loc 2 173 5 is_stmt 1
 173:src/../h/riscv.hpp **** }
 273              		.loc 2 173 12 is_stmt 0
 274 0108 833704FE 		ld	a5,-32(s0)
 275              	.LBE44:
 276              	.LBE43:
  36:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 277              		.loc 1 36 49
 278 010c 2330F4FC 		sd	a5,-64(s0)
  37:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 279              		.loc 1 37 13 is_stmt 1
GAS LISTING /tmp/ccN0JXiZ.s 			page 11


  37:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 280              		.loc 1 37 35 is_stmt 0
 281 0110 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 281      23B00700 
  38:src/riscv.cpp ****             TCB::dispatch();
 282              		.loc 1 38 13 is_stmt 1
  38:src/riscv.cpp ****             TCB::dispatch();
 283              		.loc 1 38 26 is_stmt 0
 284 0118 97000000 		call	_ZN3TCB8dispatchEv
 284      E7800000 
 285              	.LVL12:
  39:src/riscv.cpp ****             w_sstatus(sstatus);
 286              		.loc 1 39 13 is_stmt 1
  39:src/riscv.cpp ****             w_sstatus(sstatus);
 287              		.loc 1 39 22 is_stmt 0
 288 0120 833704FC 		ld	a5,-64(s0)
 289              	.LVL13:
 290              	.LBB45:
 291              	.LBB46:
 178:src/../h/riscv.hpp **** }
 292              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 293              		.loc 2 178 77 is_stmt 0
 294              	 #APP
 295              	# 178 "src/../h/riscv.hpp" 1
 296              		csrw sstatus, a5
 297              	# 0 "" 2
 298              	.LVL14:
 299              	 #NO_APP
 300              	.LBE46:
 301              	.LBE45:
  40:src/riscv.cpp ****             w_sepc(sepc);
 302              		.loc 1 40 13 is_stmt 1
  40:src/riscv.cpp ****             w_sepc(sepc);
 303              		.loc 1 40 19 is_stmt 0
 304 0128 833784FB 		ld	a5,-72(s0)
 305              	.LVL15:
 306              	.LBB47:
 307              	.LBB48:
 110:src/../h/riscv.hpp **** }
 308              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 309              		.loc 2 110 65 is_stmt 0
 310              	 #APP
 311              	# 110 "src/../h/riscv.hpp" 1
 312              		csrw sepc, a5
 313              	# 0 "" 2
 314              	 #NO_APP
 315 0130 6FF09FF3 		j	.L3
 316              	.LVL16:
 317              	.L10:
 318              	.LBE48:
 319              	.LBE47:
 320              	.LBE40:
 321              	.LBE37:
 322              	.LBE34:
  46:src/riscv.cpp ****         console_handler();
GAS LISTING /tmp/ccN0JXiZ.s 			page 12


 323              		.loc 1 46 9 is_stmt 1
  46:src/riscv.cpp ****         console_handler();
 324              		.loc 1 46 24 is_stmt 0
 325 0134 97000000 		call	console_handler
 325      E7800000 
 326              	.LVL17:
 327              	.LBE58:
 328              	.LBE60:
 329              		.loc 1 52 1
 330 013c 6FF0DFF2 		j	.L3
 331              		.cfi_endproc
 332              	.LFE34:
 334              	.Letext0:
 335              		.file 4 "src/../h/../lib/hw.h"
 336              		.file 5 "src/../lib/console.h"
GAS LISTING /tmp/ccN0JXiZ.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccN0JXiZ.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccN0JXiZ.s:16     .text:0000000000000000 .L0 
     /tmp/ccN0JXiZ.s:17     .text:0000000000000000 .L0 
     /tmp/ccN0JXiZ.s:18     .text:0000000000000004 .L0 
     /tmp/ccN0JXiZ.s:20     .text:0000000000000008 .L0 
     /tmp/ccN0JXiZ.s:22     .text:000000000000000c .L0 
     /tmp/ccN0JXiZ.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:11     .text:000000000000000c .L0 
     /tmp/ccN0JXiZ.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:12     .text:0000000000000010 .L0 
     /tmp/ccN0JXiZ.s:36     .text:0000000000000014 .L0 
     /tmp/ccN0JXiZ.s:37     .text:0000000000000018 .L0 
     /tmp/ccN0JXiZ.s:38     .text:0000000000000018 .L0 
     /tmp/ccN0JXiZ.s:40     .text:000000000000001c .L0 
     /tmp/ccN0JXiZ.s:42     .text:0000000000000020 .L0 
     /tmp/ccN0JXiZ.s:48     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccN0JXiZ.s:51     .text:0000000000000020 .L0 
     /tmp/ccN0JXiZ.s:52     .text:0000000000000020 .L0 
     /tmp/ccN0JXiZ.s:53     .text:0000000000000024 .L0 
     /tmp/ccN0JXiZ.s:56     .text:000000000000002c .L0 
     /tmp/ccN0JXiZ.s:57     .text:000000000000002c .L0 
     /tmp/ccN0JXiZ.s:59     .text:0000000000000030 .L0 
     /tmp/ccN0JXiZ.s:64     .text:0000000000000030 .L0 
     /tmp/ccN0JXiZ.s:65     .text:0000000000000030 .L0 
     /tmp/ccN0JXiZ.s:66     .text:0000000000000030 .L0 
  src/../h/riscv.hpp:92     .text:0000000000000030 .L0 
     /tmp/ccN0JXiZ.s:74     .text:0000000000000038 .L0 
     /tmp/ccN0JXiZ.s:75     .text:0000000000000038 .L0 
     /tmp/ccN0JXiZ.s:81     .text:000000000000003c .L0 
     /tmp/ccN0JXiZ.s:82     .text:000000000000003c .L0 
     /tmp/ccN0JXiZ.s:84     .text:0000000000000040 .L0 
     /tmp/ccN0JXiZ.s:90     .text:0000000000000048 .L0 
     /tmp/ccN0JXiZ.s:95     .text:0000000000000058 .L0 
     /tmp/ccN0JXiZ.s:104    .text:0000000000000068 .L0 
     /tmp/ccN0JXiZ.s:105    .text:000000000000006c .L0 
     /tmp/ccN0JXiZ.s:106    .text:000000000000006c .L0 
     /tmp/ccN0JXiZ.s:108    .text:0000000000000070 .L0 
     /tmp/ccN0JXiZ.s:109    .text:0000000000000070 .L0 
     /tmp/ccN0JXiZ.s:111    .text:0000000000000074 .L0 
     /tmp/ccN0JXiZ.s:115    .text:0000000000000078 .L0 
     /tmp/ccN0JXiZ.s:121    .text:0000000000000078 .L0 
     /tmp/ccN0JXiZ.s:122    .text:0000000000000078 .L0 
     /tmp/ccN0JXiZ.s:123    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000078 .L0 
     /tmp/ccN0JXiZ.s:131    .text:0000000000000080 .L0 
     /tmp/ccN0JXiZ.s:132    .text:0000000000000080 .L0 
     /tmp/ccN0JXiZ.s:136    .text:0000000000000084 .L0 
     /tmp/ccN0JXiZ.s:138    .text:0000000000000088 .L0 
     /tmp/ccN0JXiZ.s:142    .text:000000000000008c .L0 
     /tmp/ccN0JXiZ.s:143    .text:000000000000008c .L0 
     /tmp/ccN0JXiZ.s:144    .text:000000000000008c .L0 
  src/../h/riscv.hpp:172    .text:000000000000008c .L0 
     /tmp/ccN0JXiZ.s:152    .text:0000000000000094 .L0 
     /tmp/ccN0JXiZ.s:153    .text:0000000000000094 .L0 
     /tmp/ccN0JXiZ.s:157    .text:0000000000000098 .L0 
GAS LISTING /tmp/ccN0JXiZ.s 			page 14


     /tmp/ccN0JXiZ.s:159    .text:000000000000009c .L0 
     /tmp/ccN0JXiZ.s:160    .text:000000000000009c .L0 
     /tmp/ccN0JXiZ.s:162    .text:00000000000000a4 .L0 
     /tmp/ccN0JXiZ.s:163    .text:00000000000000a4 .L0 
     /tmp/ccN0JXiZ.s:166    .text:00000000000000ac .L0 
     /tmp/ccN0JXiZ.s:167    .text:00000000000000ac .L0 
     /tmp/ccN0JXiZ.s:172    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:178    .text:00000000000000b0 .L0 
     /tmp/ccN0JXiZ.s:182    .text:00000000000000b4 .L0 
     /tmp/ccN0JXiZ.s:183    .text:00000000000000b4 .L0 
     /tmp/ccN0JXiZ.s:188    .text:00000000000000b8 .L0 
  src/../h/riscv.hpp:110    .text:00000000000000b8 .L0 
     /tmp/ccN0JXiZ.s:205    .text:00000000000000c0 .L0 
     /tmp/ccN0JXiZ.s:206    .text:00000000000000c0 .L0 
     /tmp/ccN0JXiZ.s:207    .text:00000000000000c0 .L0 
     /tmp/ccN0JXiZ.s:217    .text:00000000000000c8 .L0 
     /tmp/ccN0JXiZ.s:218    .text:00000000000000c8 .L0 
     /tmp/ccN0JXiZ.s:225    .text:00000000000000dc .L0 
     /tmp/ccN0JXiZ.s:226    .text:00000000000000dc .L0 
     /tmp/ccN0JXiZ.s:233    .text:00000000000000e8 .L0 
     /tmp/ccN0JXiZ.s:234    .text:00000000000000e8 .L0 
     /tmp/ccN0JXiZ.s:239    .text:00000000000000ec .L0 
     /tmp/ccN0JXiZ.s:244    .text:00000000000000f0 .L0 
     /tmp/ccN0JXiZ.s:245    .text:00000000000000f0 .L0 
     /tmp/ccN0JXiZ.s:246    .text:00000000000000f0 .L0 
  src/../h/riscv.hpp:104    .text:00000000000000f0 .L0 
     /tmp/ccN0JXiZ.s:254    .text:00000000000000f8 .L0 
     /tmp/ccN0JXiZ.s:255    .text:00000000000000f8 .L0 
     /tmp/ccN0JXiZ.s:259    .text:00000000000000fc .L0 
     /tmp/ccN0JXiZ.s:263    .text:0000000000000100 .L0 
     /tmp/ccN0JXiZ.s:264    .text:0000000000000100 .L0 
     /tmp/ccN0JXiZ.s:265    .text:0000000000000100 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000100 .L0 
     /tmp/ccN0JXiZ.s:273    .text:0000000000000108 .L0 
     /tmp/ccN0JXiZ.s:274    .text:0000000000000108 .L0 
     /tmp/ccN0JXiZ.s:278    .text:000000000000010c .L0 
     /tmp/ccN0JXiZ.s:280    .text:0000000000000110 .L0 
     /tmp/ccN0JXiZ.s:281    .text:0000000000000110 .L0 
     /tmp/ccN0JXiZ.s:283    .text:0000000000000118 .L0 
     /tmp/ccN0JXiZ.s:284    .text:0000000000000118 .L0 
     /tmp/ccN0JXiZ.s:287    .text:0000000000000120 .L0 
     /tmp/ccN0JXiZ.s:288    .text:0000000000000120 .L0 
     /tmp/ccN0JXiZ.s:293    .text:0000000000000124 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000124 .L0 
     /tmp/ccN0JXiZ.s:303    .text:0000000000000128 .L0 
     /tmp/ccN0JXiZ.s:304    .text:0000000000000128 .L0 
     /tmp/ccN0JXiZ.s:309    .text:000000000000012c .L0 
  src/../h/riscv.hpp:110    .text:000000000000012c .L0 
     /tmp/ccN0JXiZ.s:324    .text:0000000000000134 .L0 
     /tmp/ccN0JXiZ.s:325    .text:0000000000000134 .L0 
     /tmp/ccN0JXiZ.s:330    .text:000000000000013c .L0 
     /tmp/ccN0JXiZ.s:331    .text:0000000000000140 .L0 
     /tmp/ccN0JXiZ.s:337    .text:0000000000000140 .L0 
     /tmp/ccN0JXiZ.s:160    .text:000000000000009c .L0 
     /tmp/ccN0JXiZ.s:218    .text:00000000000000c8 .L0 
     /tmp/ccN0JXiZ.s:226    .text:00000000000000dc .L0 
     /tmp/ccN0JXiZ.s:281    .text:0000000000000110 .L0 
GAS LISTING /tmp/ccN0JXiZ.s 			page 15


     /tmp/ccN0JXiZ.s:114    .text:0000000000000078 .L8
     /tmp/ccN0JXiZ.s:196    .text:00000000000000c0 .L9
     /tmp/ccN0JXiZ.s:317    .text:0000000000000134 .L10
     /tmp/ccN0JXiZ.s:100    .text:0000000000000068 .L3
     /tmp/ccN0JXiZ.s:1245   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccN0JXiZ.s:2258   .debug_str:00000000000002dd .LASF87
     /tmp/ccN0JXiZ.s:2286   .debug_str:000000000000042f .LASF88
     /tmp/ccN0JXiZ.s:2260   .debug_str:00000000000003a1 .LASF89
     /tmp/ccN0JXiZ.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccN0JXiZ.s:334    .text:0000000000000140 .Letext0
     /tmp/ccN0JXiZ.s:2156   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccN0JXiZ.s:2264   .debug_str:00000000000003bd .LASF0
     /tmp/ccN0JXiZ.s:2282   .debug_str:0000000000000409 .LASF1
     /tmp/ccN0JXiZ.s:2252   .debug_str:00000000000002b9 .LASF2
     /tmp/ccN0JXiZ.s:2230   .debug_str:0000000000000224 .LASF4
     /tmp/ccN0JXiZ.s:2308   .debug_str:00000000000004c2 .LASF3
     /tmp/ccN0JXiZ.s:2174   .debug_str:0000000000000056 .LASF5
     /tmp/ccN0JXiZ.s:2284   .debug_str:000000000000041c .LASF6
     /tmp/ccN0JXiZ.s:2262   .debug_str:00000000000003aa .LASF7
     /tmp/ccN0JXiZ.s:2332   .debug_str:0000000000000570 .LASF8
     /tmp/ccN0JXiZ.s:2218   .debug_str:00000000000001a9 .LASF9
     /tmp/ccN0JXiZ.s:2290   .debug_str:0000000000000448 .LASF10
     /tmp/ccN0JXiZ.s:2330   .debug_str:0000000000000561 .LASF11
     /tmp/ccN0JXiZ.s:2176   .debug_str:000000000000005d .LASF12
     /tmp/ccN0JXiZ.s:2160   .debug_str:0000000000000008 .LASF13
     /tmp/ccN0JXiZ.s:2184   .debug_str:00000000000000a7 .LASF14
     /tmp/ccN0JXiZ.s:2302   .debug_str:000000000000048e .LASF15
     /tmp/ccN0JXiZ.s:2188   .debug_str:00000000000000c0 .LASF16
     /tmp/ccN0JXiZ.s:2278   .debug_str:00000000000003f8 .LASF56
     /tmp/ccN0JXiZ.s:2242   .debug_str:000000000000026c .LASF90
     /tmp/ccN0JXiZ.s:2318   .debug_str:000000000000050c .LASF17
     /tmp/ccN0JXiZ.s:2276   .debug_str:00000000000003ef .LASF18
     /tmp/ccN0JXiZ.s:2236   .debug_str:0000000000000239 .LASF19
     /tmp/ccN0JXiZ.s:2300   .debug_str:0000000000000483 .LASF52
     /tmp/ccN0JXiZ.s:2346   .debug_str:00000000000005df .LASF54
     /tmp/ccN0JXiZ.s:2162   .debug_str:0000000000000018 .LASF20
     /tmp/ccN0JXiZ.s:2202   .debug_str:0000000000000130 .LASF22
     /tmp/ccN0JXiZ.s:2198   .debug_str:000000000000011f .LASF24
     /tmp/ccN0JXiZ.s:2196   .debug_str:000000000000010a .LASF26
     /tmp/ccN0JXiZ.s:2312   .debug_str:00000000000004e5 .LASF21
     /tmp/ccN0JXiZ.s:2292   .debug_str:0000000000000457 .LASF23
     /tmp/ccN0JXiZ.s:2326   .debug_str:0000000000000552 .LASF25
     /tmp/ccN0JXiZ.s:2322   .debug_str:000000000000052d .LASF27
     /tmp/ccN0JXiZ.s:2212   .debug_str:0000000000000184 .LASF28
     /tmp/ccN0JXiZ.s:2190   .debug_str:00000000000000d6 .LASF29
     /tmp/ccN0JXiZ.s:2158   .debug_str:0000000000000000 .LASF30
     /tmp/ccN0JXiZ.s:2222   .debug_str:00000000000001cd .LASF31
     /tmp/ccN0JXiZ.s:2328   .debug_str:0000000000000559 .LASF32
     /tmp/ccN0JXiZ.s:2178   .debug_str:000000000000006d .LASF33
     /tmp/ccN0JXiZ.s:2350   .debug_str:0000000000000602 .LASF34
     /tmp/ccN0JXiZ.s:2204   .debug_str:0000000000000145 .LASF35
     /tmp/ccN0JXiZ.s:2266   .debug_str:00000000000003ca .LASF36
     /tmp/ccN0JXiZ.s:2342   .debug_str:00000000000005c7 .LASF37
     /tmp/ccN0JXiZ.s:2170   .debug_str:0000000000000036 .LASF38
     /tmp/ccN0JXiZ.s:2210   .debug_str:0000000000000171 .LASF39
     /tmp/ccN0JXiZ.s:2214   .debug_str:000000000000018c .LASF40
     /tmp/ccN0JXiZ.s:2324   .debug_str:0000000000000540 .LASF41
GAS LISTING /tmp/ccN0JXiZ.s 			page 16


     /tmp/ccN0JXiZ.s:2168   .debug_str:0000000000000030 .LASF42
     /tmp/ccN0JXiZ.s:2356   .debug_str:0000000000000626 .LASF43
     /tmp/ccN0JXiZ.s:2348   .debug_str:00000000000005f7 .LASF44
     /tmp/ccN0JXiZ.s:2306   .debug_str:00000000000004aa .LASF45
     /tmp/ccN0JXiZ.s:2280   .debug_str:00000000000003fe .LASF46
     /tmp/ccN0JXiZ.s:2320   .debug_str:0000000000000515 .LASF47
     /tmp/ccN0JXiZ.s:2182   .debug_str:000000000000009d .LASF48
     /tmp/ccN0JXiZ.s:2226   .debug_str:00000000000001e6 .LASF49
     /tmp/ccN0JXiZ.s:2256   .debug_str:00000000000002d3 .LASF50
     /tmp/ccN0JXiZ.s:2220   .debug_str:00000000000001b7 .LASF51
     /tmp/ccN0JXiZ.s:2314   .debug_str:00000000000004ec .LASF53
     /tmp/ccN0JXiZ.s:2180   .debug_str:0000000000000081 .LASF55
     /tmp/ccN0JXiZ.s:2334   .debug_str:0000000000000580 .LASF74
     /tmp/ccN0JXiZ.s:2240   .debug_str:000000000000024a .LASF76
     /tmp/ccN0JXiZ.s:2166   .debug_str:0000000000000028 .LASF91
     /tmp/ccN0JXiZ.s:2224   .debug_str:00000000000001e1 .LASF57
     /tmp/ccN0JXiZ.s:2294   .debug_str:000000000000046a .LASF59
     /tmp/ccN0JXiZ.s:2288   .debug_str:000000000000043d .LASF61
     /tmp/ccN0JXiZ.s:2216   .debug_str:0000000000000192 .LASF63
     /tmp/ccN0JXiZ.s:2254   .debug_str:00000000000002c7 .LASF58
     /tmp/ccN0JXiZ.s:2352   .debug_str:000000000000060a .LASF60
     /tmp/ccN0JXiZ.s:2248   .debug_str:000000000000029e .LASF62
     /tmp/ccN0JXiZ.s:2172   .debug_str:000000000000003d .LASF64
     /tmp/ccN0JXiZ.s:2186   .debug_str:00000000000000b3 .LASF65
     /tmp/ccN0JXiZ.s:2246   .debug_str:0000000000000282 .LASF66
     /tmp/ccN0JXiZ.s:2298   .debug_str:000000000000047e .LASF92
     /tmp/ccN0JXiZ.s:2304   .debug_str:00000000000004a4 .LASF67
     /tmp/ccN0JXiZ.s:2192   .debug_str:00000000000000ea .LASF68
     /tmp/ccN0JXiZ.s:2200   .debug_str:0000000000000128 .LASF93
     /tmp/ccN0JXiZ.s:2316   .debug_str:00000000000004fb .LASF94
     /tmp/ccN0JXiZ.s:2234   .debug_str:0000000000000234 .LASF69
     /tmp/ccN0JXiZ.s:2270   .debug_str:00000000000003da .LASF70
     /tmp/ccN0JXiZ.s:2238   .debug_str:0000000000000242 .LASF71
     /tmp/ccN0JXiZ.s:2274   .debug_str:00000000000003e5 .LASF72
     /tmp/ccN0JXiZ.s:2232   .debug_str:000000000000022b .LASF73
     /tmp/ccN0JXiZ.s:2250   .debug_str:00000000000002ab .LASF75
     /tmp/ccN0JXiZ.s:2338   .debug_str:00000000000005a3 .LASF77
     /tmp/ccN0JXiZ.s:2336   .debug_str:0000000000000595 .LASF95
     /tmp/ccN0JXiZ.s:2228   .debug_str:00000000000001fc .LASF96
     /tmp/ccN0JXiZ.s:2268   .debug_str:00000000000003d1 .LASF78
     /tmp/ccN0JXiZ.s:2206   .debug_str:0000000000000159 .LASF79
     /tmp/ccN0JXiZ.s:2310   .debug_str:00000000000004d4 .LASF97
     /tmp/ccN0JXiZ.s:2244   .debug_str:0000000000000277 .LASF80
     /tmp/ccN0JXiZ.s:2340   .debug_str:00000000000005bc .LASF81
     /tmp/ccN0JXiZ.s:2208   .debug_str:000000000000016c .LASF82
     /tmp/ccN0JXiZ.s:49     .text:0000000000000020 .LFB34
     /tmp/ccN0JXiZ.s:332    .text:0000000000000140 .LFE34
     /tmp/ccN0JXiZ.s:2164   .debug_str:0000000000000021 .LASF83
     /tmp/ccN0JXiZ.s:2075   .debug_loc:0000000000000000 .LLST0
     /tmp/ccN0JXiZ.s:117    .text:0000000000000078 .LBB49
     /tmp/ccN0JXiZ.s:199    .text:00000000000000c0 .LBE49
     /tmp/ccN0JXiZ.s:2272   .debug_str:00000000000003e0 .LASF84
     /tmp/ccN0JXiZ.s:2296   .debug_str:0000000000000476 .LASF85
     /tmp/ccN0JXiZ.s:119    .text:0000000000000078 .LBB50
     /tmp/ccN0JXiZ.s:134    .text:0000000000000084 .LBE50
     /tmp/ccN0JXiZ.s:120    .text:0000000000000078 .LBB51
     /tmp/ccN0JXiZ.s:133    .text:0000000000000084 .LBE51
GAS LISTING /tmp/ccN0JXiZ.s 			page 17


     /tmp/ccN0JXiZ.s:140    .text:000000000000008c .LBB52
     /tmp/ccN0JXiZ.s:155    .text:0000000000000098 .LBE52
     /tmp/ccN0JXiZ.s:141    .text:000000000000008c .LBB53
     /tmp/ccN0JXiZ.s:154    .text:0000000000000098 .LBE53
     /tmp/ccN0JXiZ.s:169    .text:00000000000000b0 .LBB54
     /tmp/ccN0JXiZ.s:180    .text:00000000000000b4 .LBE54
     /tmp/ccN0JXiZ.s:2100   .debug_loc:0000000000000071 .LLST5
     /tmp/ccN0JXiZ.s:185    .text:00000000000000b8 .LBB56
     /tmp/ccN0JXiZ.s:198    .text:00000000000000c0 .LBE56
     /tmp/ccN0JXiZ.s:2107   .debug_loc:0000000000000094 .LLST6
     /tmp/ccN0JXiZ.s:164    .text:00000000000000ac .LVL3
     /tmp/ccN0JXiZ.s:240    .text:00000000000000f0 .LBB40
     /tmp/ccN0JXiZ.s:320    .text:0000000000000134 .LBE40
     /tmp/ccN0JXiZ.s:242    .text:00000000000000f0 .LBB41
     /tmp/ccN0JXiZ.s:257    .text:00000000000000fc .LBE41
     /tmp/ccN0JXiZ.s:243    .text:00000000000000f0 .LBB42
     /tmp/ccN0JXiZ.s:256    .text:00000000000000fc .LBE42
     /tmp/ccN0JXiZ.s:261    .text:0000000000000100 .LBB43
     /tmp/ccN0JXiZ.s:276    .text:000000000000010c .LBE43
     /tmp/ccN0JXiZ.s:262    .text:0000000000000100 .LBB44
     /tmp/ccN0JXiZ.s:275    .text:000000000000010c .LBE44
     /tmp/ccN0JXiZ.s:290    .text:0000000000000124 .LBB45
     /tmp/ccN0JXiZ.s:301    .text:0000000000000128 .LBE45
     /tmp/ccN0JXiZ.s:2114   .debug_loc:00000000000000b7 .LLST3
     /tmp/ccN0JXiZ.s:306    .text:000000000000012c .LBB47
     /tmp/ccN0JXiZ.s:319    .text:0000000000000134 .LBE47
     /tmp/ccN0JXiZ.s:2121   .debug_loc:00000000000000da .LLST4
     /tmp/ccN0JXiZ.s:285    .text:0000000000000120 .LVL12
     /tmp/ccN0JXiZ.s:61     .text:0000000000000030 .LBB30
     /tmp/ccN0JXiZ.s:78     .text:000000000000003c .LBE30
     /tmp/ccN0JXiZ.s:62     .text:0000000000000030 .LBB31
     /tmp/ccN0JXiZ.s:77     .text:000000000000003c .LBE31
     /tmp/ccN0JXiZ.s:203    .text:00000000000000c0 .LBB35
     /tmp/ccN0JXiZ.s:215    .text:00000000000000c8 .LBE35
     /tmp/ccN0JXiZ.s:2128   .debug_loc:00000000000000fd .LLST1
     /tmp/ccN0JXiZ.s:229    .text:00000000000000e8 .LBB38
     /tmp/ccN0JXiZ.s:237    .text:00000000000000ec .LBE38
     /tmp/ccN0JXiZ.s:2136   .debug_loc:0000000000000121 .LLST2
     /tmp/ccN0JXiZ.s:326    .text:000000000000013c .LVL17
     /tmp/ccN0JXiZ.s:13     .text:0000000000000000 .LFB33
     /tmp/ccN0JXiZ.s:43     .text:0000000000000020 .LFE33
     /tmp/ccN0JXiZ.s:2344   .debug_str:00000000000005da .LASF98
     /tmp/ccN0JXiZ.s:2354   .debug_str:0000000000000621 .LASF86
     /tmp/ccN0JXiZ.s:2194   .debug_str:00000000000000fa .LASF99
     /tmp/ccN0JXiZ.s:76     .text:000000000000003c .LVL0
     /tmp/ccN0JXiZ.s:99     .text:0000000000000068 .LVL1
     /tmp/ccN0JXiZ.s:113    .text:0000000000000078 .LVL2
     /tmp/ccN0JXiZ.s:195    .text:00000000000000c0 .LVL7
     /tmp/ccN0JXiZ.s:219    .text:00000000000000d0 .LVL9
     /tmp/ccN0JXiZ.s:316    .text:0000000000000134 .LVL16
     /tmp/ccN0JXiZ.s:168    .text:00000000000000b0 .LVL4
     /tmp/ccN0JXiZ.s:177    .text:00000000000000b4 .LVL5
     /tmp/ccN0JXiZ.s:184    .text:00000000000000b8 .LVL6
     /tmp/ccN0JXiZ.s:289    .text:0000000000000124 .LVL13
     /tmp/ccN0JXiZ.s:298    .text:0000000000000128 .LVL14
     /tmp/ccN0JXiZ.s:305    .text:000000000000012c .LVL15
     /tmp/ccN0JXiZ.s:212    .text:00000000000000c8 .LVL8
GAS LISTING /tmp/ccN0JXiZ.s 			page 18


     /tmp/ccN0JXiZ.s:228    .text:00000000000000e8 .LVL10
     /tmp/ccN0JXiZ.s:235    .text:00000000000000ec .LVL11
     /tmp/ccN0JXiZ.s:338    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB7runningE
console_handler
