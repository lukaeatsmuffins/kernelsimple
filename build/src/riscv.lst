GAS LISTING /tmp/ccxX3eEc.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB36:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   9:src/riscv.cpp **** #include "../h/mem.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  15              		.loc 1 12 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  23              		.loc 1 13 5
  24              		.loc 1 13 38 is_stmt 0
  25              	 #APP
  26              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 14 5 is_stmt 1
  30              		.loc 1 14 29 is_stmt 0
  31              	# 14 "src/riscv.cpp" 1
  15              	}
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 15 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
  43              	.LFE36:
GAS LISTING /tmp/ccxX3eEc.s 			page 2


  45              		.align	2
  46              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  48              	_ZN5Riscv20handleSupervisorTrapEv:
  49              	.LFB37:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  18:src/riscv.cpp **** {
  50              		.loc 1 18 1 is_stmt 1
  51              		.cfi_startproc
  52 0020 130101F9 		addi	sp,sp,-112
  53              		.cfi_def_cfa_offset 112
  54 0024 23341106 		sd	ra,104(sp)
  55 0028 23308106 		sd	s0,96(sp)
  56 002c 233C9104 		sd	s1,88(sp)
  57              		.cfi_offset 1, -8
  58              		.cfi_offset 8, -16
  59              		.cfi_offset 9, -24
  60 0030 13040107 		addi	s0,sp,112
  61              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp **** 
  20:src/riscv.cpp ****     uint64 scause = r_scause();
  62              		.loc 1 20 5
  63              	.LBB33:
  64              	.LBB34:
  65              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** extern const size_t DEFAULT_STACK_SIZE;
  11:src/../h/riscv.hpp **** extern const time_t DEFAULT_TIME_SLICE;
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register scause
  21:src/../h/riscv.hpp ****     static uint64 r_scause();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register scause
  24:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register sepc
  27:src/../h/riscv.hpp ****     static uint64 r_sepc();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register sepc
  30:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stvec
GAS LISTING /tmp/ccxX3eEc.s 			page 3


  33:src/../h/riscv.hpp ****     static uint64 r_stvec();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stvec
  36:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // read register stval
  39:src/../h/riscv.hpp ****     static uint64 r_stval();
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // write register stval
  42:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     enum BitMaskSip
  45:src/../h/riscv.hpp ****     {
  46:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  47:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  48:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  49:src/../h/riscv.hpp ****     };
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask set register sip
  52:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // mask clear register sip
  55:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // read register sip
  58:src/../h/riscv.hpp ****     static uint64 r_sip();
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // write register sip
  61:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     enum BitMaskSstatus
  64:src/../h/riscv.hpp ****     {
  65:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  66:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  67:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  68:src/../h/riscv.hpp ****     };
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask set register sstatus
  71:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // mask clear register sstatus
  74:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // read register sstatus
  77:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // write register sstatus
  80:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // supervisor trap
  83:src/../h/riscv.hpp ****     static void supervisorTrap();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** private:
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     // supervisor trap handler
  88:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  89:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccxX3eEc.s 			page 4


  90:src/../h/riscv.hpp **** };
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/riscv.hpp **** {
  94:src/../h/riscv.hpp ****     uint64 volatile scause;
  66              		.loc 2 94 5
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  67              		.loc 2 95 5
  68              		.loc 2 95 72 is_stmt 0
  69              	 #APP
  70              	# 95 "src/../h/riscv.hpp" 1
  96              	    return scause;
  71              		csrr a5, scause
  72              	# 0 "" 2
  73              	 #NO_APP
  74 0038 233CF4FA 		sd	a5,-72(s0)
  75              		.loc 2 96 5 is_stmt 1
  76              		.loc 2 96 12 is_stmt 0
  77 003c 033784FB 		ld	a4,-72(s0)
  78              	.LVL0:
  79              	.LBE34:
  80              	.LBE33:
  21:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  81              		.loc 1 21 5 is_stmt 1
  82              	.LBB35:
  83              		.loc 1 21 40 is_stmt 0
  84 0040 930687FF 		addi	a3,a4,-8
  85              		.loc 1 21 5
  86 0044 93071000 		li	a5,1
  87 0048 63F8D702 		bleu	a3,a5,.L19
  88              	.LBE35:
  22:src/riscv.cpp ****     {
  23:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  24:src/riscv.cpp ****         // Should be triggered on syscall.
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****         uint64 a0, a1, a2, a3, a4, a5, a6, a7;
  29:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r"(a0));
  30:src/riscv.cpp ****         __asm__ volatile ("mv %0, a1" : "=r"(a1));
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a2" : "=r"(a2));
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a3" : "=r"(a3));
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a4" : "=r"(a4));
  34:src/riscv.cpp ****         __asm__ volatile ("mv %0, a5" : "=r"(a5));
  35:src/riscv.cpp ****         __asm__ volatile ("mv %0, a6" : "=r"(a6));
  36:src/riscv.cpp ****         __asm__ volatile ("mv %0, a7" : "=r"(a7));
  37:src/riscv.cpp **** 
  38:src/riscv.cpp ****         uint64 res = 0;
  39:src/riscv.cpp ****         switch (a0) {
  40:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
  42:src/riscv.cpp ****                 break;
  43:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
  45:src/riscv.cpp ****                 break;
  46:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
GAS LISTING /tmp/ccxX3eEc.s 			page 5


  48:src/riscv.cpp ****                 break;
  49:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
  51:src/riscv.cpp ****                 break;
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
  53:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
  55:src/riscv.cpp ****                 if (!(*handle))
  56:src/riscv.cpp ****                     res = -1;
  57:src/riscv.cpp ****             }
  58:src/riscv.cpp ****             break;
  59:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT:
  60:src/riscv.cpp ****                 TCB::exit();
  61:src/riscv.cpp ****                 break;
  62:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
  63:src/riscv.cpp ****                 TCB::dispatch();
  64:src/riscv.cpp ****                 break;
  65:src/riscv.cpp ****         }
  66:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
  67:src/riscv.cpp **** 
  68:src/riscv.cpp ****         // Overwrite a0 with the result from the syscall.
  69:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****         w_sstatus(sstatus);
  72:src/riscv.cpp ****         w_sepc(sepc);
  73:src/riscv.cpp ****     }
  74:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  89              		.loc 1 74 10 is_stmt 1
  90              	.LBB81:
  91              	.LBB36:
  92 004c 9307F0FF 		li	a5,-1
  93 0050 9397F703 		slli	a5,a5,63
  94 0054 93871700 		addi	a5,a5,1
  95 0058 630EF714 		beq	a4,a5,.L20
  75:src/riscv.cpp ****     {
  76:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  77:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  78:src/riscv.cpp ****         TCB::timeSliceCounter++;
  79:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  80:src/riscv.cpp ****         {
  81:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
  82:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  83:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  84:src/riscv.cpp ****             TCB::dispatch();
  85:src/riscv.cpp ****             w_sstatus(sstatus);
  86:src/riscv.cpp ****             w_sepc(sepc);
  87:src/riscv.cpp ****         }
  88:src/riscv.cpp ****     }
  89:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  96              		.loc 1 89 10
  97 005c 9307F0FF 		li	a5,-1
  98 0060 9397F703 		slli	a5,a5,63
  99 0064 93879700 		addi	a5,a5,9
 100 0068 6312F70A 		bne	a4,a5,.L3
  90:src/riscv.cpp ****     {
  91:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  92:src/riscv.cpp ****         console_handler();
GAS LISTING /tmp/ccxX3eEc.s 			page 6


 101              		.loc 1 92 9
 102              		.loc 1 92 24 is_stmt 0
 103 006c 97000000 		call	console_handler
 103      E7800000 
 104              	.LVL1:
 105              	.LBE36:
 106              	.LBE81:
  93:src/riscv.cpp ****     }
  94:src/riscv.cpp ****     else
  95:src/riscv.cpp ****     {
  96:src/riscv.cpp ****         // unexpected trap cause
  97:src/riscv.cpp ****     }
  98:src/riscv.cpp **** }...
 107              		.loc 1 98 1
 108 0074 6F008009 		j	.L3
 109              	.LVL2:
 110              	.L19:
 111              	.LBB82:
 112              	.LBB52:
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 113              		.loc 1 25 9 is_stmt 1
 114              	.LBB53:
 115              	.LBB54:
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile sepc;
 116              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 117              		.loc 2 107 5
 118              		.loc 2 107 64 is_stmt 0
 119              	 #APP
 120              	# 107 "src/../h/riscv.hpp" 1
 108              	    return sepc;
 121              		csrr a5, sepc
 122              	# 0 "" 2
 123              	 #NO_APP
 124 007c 2334F4FC 		sd	a5,-56(s0)
 125              		.loc 2 108 5 is_stmt 1
 126              		.loc 2 108 12 is_stmt 0
 127 0080 833784FC 		ld	a5,-56(s0)
 128              	.LBE54:
 129              	.LBE53:
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 130              		.loc 1 25 41
 131 0084 93874700 		addi	a5,a5,4
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 132              		.loc 1 25 43
 133 0088 233CF4F8 		sd	a5,-104(s0)
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 134              		.loc 1 26 9 is_stmt 1
GAS LISTING /tmp/ccxX3eEc.s 			page 7


 135              	.LBB55:
 136              	.LBB56:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/riscv.hpp ****     return stvec;
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stval;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/riscv.hpp ****     return stval;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/riscv.hpp **** }
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     uint64 volatile sip;
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/riscv.hpp ****     return sip;
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 163:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccxX3eEc.s 			page 8


 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 137              		.loc 2 174 5
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 138              		.loc 2 175 5
 139              		.loc 2 175 76 is_stmt 0
 140              	 #APP
 141              	# 175 "src/../h/riscv.hpp" 1
 176              	    return sstatus;
 142              		csrr a5, sstatus
 143              	# 0 "" 2
 144              	 #NO_APP
 145 0090 2330F4FC 		sd	a5,-64(s0)
 146              		.loc 2 176 5 is_stmt 1
 147              		.loc 2 176 12 is_stmt 0
 148 0094 833704FC 		ld	a5,-64(s0)
 149              	.LBE56:
 150              	.LBE55:
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 151              		.loc 1 26 45
 152 0098 2330F4FA 		sd	a5,-96(s0)
  28:src/riscv.cpp ****         uint64 a0, a1, a2, a3, a4, a5, a6, a7;
 153              		.loc 1 28 9 is_stmt 1
  29:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r"(a0));
 154              		.loc 1 29 9
  29:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r"(a0));
 155              		.loc 1 29 50 is_stmt 0
 156              	 #APP
 157              	# 29 "src/riscv.cpp" 1
 158              		mv a5, a0
 159              	# 0 "" 2
 160              	.LVL3:
  30:src/riscv.cpp ****         __asm__ volatile ("mv %0, a1" : "=r"(a1));
 161              		.loc 1 30 9 is_stmt 1
  30:src/riscv.cpp ****         __asm__ volatile ("mv %0, a1" : "=r"(a1));
 162              		.loc 1 30 50 is_stmt 0
 163              	# 30 "src/riscv.cpp" 1
 164              		mv s1, a1
 165              	# 0 "" 2
 166              	.LVL4:
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a2" : "=r"(a2));
 167              		.loc 1 31 9 is_stmt 1
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a2" : "=r"(a2));
 168              		.loc 1 31 50 is_stmt 0
 169              	# 31 "src/riscv.cpp" 1
 170              		mv a1, a2
 171              	# 0 "" 2
 172              	.LVL5:
GAS LISTING /tmp/ccxX3eEc.s 			page 9


  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a3" : "=r"(a3));
 173              		.loc 1 32 9 is_stmt 1
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a3" : "=r"(a3));
 174              		.loc 1 32 50 is_stmt 0
 175              	# 32 "src/riscv.cpp" 1
 176              		mv a4, a3
 177              	# 0 "" 2
 178              	.LVL6:
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a4" : "=r"(a4));
 179              		.loc 1 33 9 is_stmt 1
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a4" : "=r"(a4));
 180              		.loc 1 33 50 is_stmt 0
 181              	# 33 "src/riscv.cpp" 1
 182              		mv a4, a4
 183              	# 0 "" 2
 184              	.LVL7:
  34:src/riscv.cpp ****         __asm__ volatile ("mv %0, a5" : "=r"(a5));
 185              		.loc 1 34 9 is_stmt 1
  34:src/riscv.cpp ****         __asm__ volatile ("mv %0, a5" : "=r"(a5));
 186              		.loc 1 34 50 is_stmt 0
 187              	# 34 "src/riscv.cpp" 1
 188              		mv a4, a5
 189              	# 0 "" 2
 190              	.LVL8:
  35:src/riscv.cpp ****         __asm__ volatile ("mv %0, a6" : "=r"(a6));
 191              		.loc 1 35 9 is_stmt 1
  35:src/riscv.cpp ****         __asm__ volatile ("mv %0, a6" : "=r"(a6));
 192              		.loc 1 35 50 is_stmt 0
 193              	# 35 "src/riscv.cpp" 1
 194              		mv a4, a6
 195              	# 0 "" 2
 196              	.LVL9:
  36:src/riscv.cpp ****         __asm__ volatile ("mv %0, a7" : "=r"(a7));
 197              		.loc 1 36 9 is_stmt 1
  36:src/riscv.cpp ****         __asm__ volatile ("mv %0, a7" : "=r"(a7));
 198              		.loc 1 36 50 is_stmt 0
 199              	# 36 "src/riscv.cpp" 1
 200              		mv a4, a7
 201              	# 0 "" 2
 202              	.LVL10:
  38:src/riscv.cpp ****         uint64 res = 0;
 203              		.loc 1 38 9 is_stmt 1
  39:src/riscv.cpp ****         switch (a0) {
 204              		.loc 1 39 9
 205              	 #NO_APP
 206              	.LBB57:
 207 00bc 13073001 		li	a4,19
 208 00c0 6362F70E 		bgtu	a5,a4,.L16
 209 00c4 93972700 		slli	a5,a5,2
 210              	.LVL11:
 211 00c8 17070000 		lla	a4,.L7
 211      13070700 
 212 00d0 B387E700 		add	a5,a5,a4
 213 00d4 83A70700 		lw	a5,0(a5)
 214 00d8 B387E700 		add	a5,a5,a4
 215 00dc 67800700 		jr	a5
 216              		.section	.rodata
GAS LISTING /tmp/ccxX3eEc.s 			page 10


 217              		.align	2
 218              		.align	2
 219              	.L7:
 220 0000 00000000 		.word	.L16-.L7
 221 0004 00000000 		.word	.L13-.L7
 222 0008 00000000 		.word	.L12-.L7
 223 000c 00000000 		.word	.L11-.L7
 224 0010 00000000 		.word	.L10-.L7
 225 0014 00000000 		.word	.L16-.L7
 226 0018 00000000 		.word	.L16-.L7
 227 001c 00000000 		.word	.L16-.L7
 228 0020 00000000 		.word	.L16-.L7
 229 0024 00000000 		.word	.L16-.L7
 230 0028 00000000 		.word	.L16-.L7
 231 002c 00000000 		.word	.L16-.L7
 232 0030 00000000 		.word	.L16-.L7
 233 0034 00000000 		.word	.L16-.L7
 234 0038 00000000 		.word	.L16-.L7
 235 003c 00000000 		.word	.L16-.L7
 236 0040 00000000 		.word	.L16-.L7
 237 0044 00000000 		.word	.L9-.L7
 238 0048 00000000 		.word	.L8-.L7
 239 004c 00000000 		.word	.L6-.L7
 240              		.text
 241              	.L13:
 242              	.LBB58:
  40:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
 243              		.loc 1 40 13
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 244              		.loc 1 41 17
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 245              		.loc 1 41 72 is_stmt 0
 246 00e0 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 246      E7800000 
 247              	.LVL12:
 248 00e8 93850400 		mv	a1,s1
 249 00ec 97000000 		call	_ZN15MemoryAllocator9mem_allocEm
 249      E7800000 
 250              	.LVL13:
  42:src/riscv.cpp ****                 break;
 251              		.loc 1 42 17 is_stmt 1
 252              	.L5:
 253              	.LBE58:
 254              	.LBE57:
  66:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 255              		.loc 1 66 9
  66:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 256              		.loc 1 66 52 is_stmt 0
 257              	 #APP
 258              	# 66 "src/riscv.cpp" 1
  69:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 259              		mv a0, a0
 260              	# 0 "" 2
 261              		.loc 1 69 9 is_stmt 1
  69:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 262              		.loc 1 69 58 is_stmt 0
 263              	# 69 "src/riscv.cpp" 1
GAS LISTING /tmp/ccxX3eEc.s 			page 11


  71:src/riscv.cpp ****         w_sstatus(sstatus);
 264              		sd a0, 10*8(x8)
 265              	# 0 "" 2
 266              		.loc 1 71 9 is_stmt 1
  71:src/riscv.cpp ****         w_sstatus(sstatus);
 267              		.loc 1 71 18 is_stmt 0
 268              	 #NO_APP
 269 00fc 833704FA 		ld	a5,-96(s0)
 270              	.LVL14:
 271              	.LBB68:
 272              	.LBB69:
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 273              		.loc 2 181 5 is_stmt 1
 274              		.loc 2 181 77 is_stmt 0
 275              	 #APP
 276              	# 181 "src/../h/riscv.hpp" 1
 182              	}
 277              		csrw sstatus, a5
 278              	# 0 "" 2
 279              	.LVL15:
 280              	 #NO_APP
 281              	.LBE69:
 282              	.LBE68:
  72:src/riscv.cpp ****         w_sepc(sepc);
 283              		.loc 1 72 9 is_stmt 1
  72:src/riscv.cpp ****         w_sepc(sepc);
 284              		.loc 1 72 15 is_stmt 0
 285 0104 833784F9 		ld	a5,-104(s0)
 286              	.LVL16:
 287              	.LBB70:
 288              	.LBB71:
 113:src/../h/riscv.hpp **** }
 289              		.loc 2 113 5 is_stmt 1
 113:src/../h/riscv.hpp **** }
 290              		.loc 2 113 65 is_stmt 0
 291              	 #APP
 292              	# 113 "src/../h/riscv.hpp" 1
 293              		csrw sepc, a5
 294              	# 0 "" 2
 295              	.LVL17:
 296              	 #NO_APP
 297              	.L3:
 298              	.LBE71:
 299              	.LBE70:
 300              	.LBE52:
 301              	.LBE82:
 302              		.loc 1 98 1
 303 010c 83308106 		ld	ra,104(sp)
 304              		.cfi_remember_state
 305              		.cfi_restore 1
 306 0110 03340106 		ld	s0,96(sp)
 307              		.cfi_restore 8
 308              		.cfi_def_cfa 2, 112
GAS LISTING /tmp/ccxX3eEc.s 			page 12


 309 0114 83348105 		ld	s1,88(sp)
 310              		.cfi_restore 9
 311 0118 13010107 		addi	sp,sp,112
 312              		.cfi_def_cfa_offset 0
 313 011c 67800000 		jr	ra
 314              	.LVL18:
 315              	.L12:
 316              		.cfi_restore_state
 317              	.LBB83:
 318              	.LBB79:
 319              	.LBB72:
 320              	.LBB61:
  43:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
 321              		.loc 1 43 13 is_stmt 1
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 322              		.loc 1 44 17
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 323              		.loc 1 44 63 is_stmt 0
 324 0120 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 324      E7800000 
 325              	.LVL19:
 326 0128 93850400 		mv	a1,s1
 327 012c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv
 327      E7800000 
 328              	.LVL20:
  45:src/riscv.cpp ****                 break;
 329              		.loc 1 45 17 is_stmt 1
 330 0134 6FF01FFC 		j	.L5
 331              	.LVL21:
 332              	.L11:
  46:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
 333              		.loc 1 46 13
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 334              		.loc 1 47 17
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 335              		.loc 1 47 67 is_stmt 0
 336 0138 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 336      E7800000 
 337              	.LVL22:
 338 0140 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv
 338      E7800000 
 339              	.LVL23:
  48:src/riscv.cpp ****                 break;
 340              		.loc 1 48 17 is_stmt 1
 341              	.LBE61:
 342              	.LBE72:
  38:src/riscv.cpp ****         uint64 res = 0;
 343              		.loc 1 38 16 is_stmt 0
 344 0148 13050000 		li	a0,0
 345              	.LBB73:
 346              	.LBB62:
  48:src/riscv.cpp ****                 break;
 347              		.loc 1 48 17
 348 014c 6FF09FFA 		j	.L5
 349              	.LVL24:
 350              	.L10:
  49:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
GAS LISTING /tmp/ccxX3eEc.s 			page 13


 351              		.loc 1 49 13 is_stmt 1
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 352              		.loc 1 50 17
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 353              		.loc 1 50 75 is_stmt 0
 354 0150 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 354      E7800000 
 355              	.LVL25:
 356 0158 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv
 356      E7800000 
 357              	.LVL26:
  51:src/riscv.cpp ****                 break;
 358              		.loc 1 51 17 is_stmt 1
 359              	.LBE62:
 360              	.LBE73:
  38:src/riscv.cpp ****         uint64 res = 0;
 361              		.loc 1 38 16 is_stmt 0
 362 0160 13050000 		li	a0,0
 363              	.LBB74:
 364              	.LBB63:
  51:src/riscv.cpp ****                 break;
 365              		.loc 1 51 17
 366 0164 6FF01FF9 		j	.L5
 367              	.LVL27:
 368              	.L9:
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 369              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 370              		.loc 1 52 46
 371              	.LBB59:
  53:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 372              		.loc 1 53 17
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
 373              		.loc 1 54 17
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
 374              		.loc 1 54 54 is_stmt 0
 375 0168 13850400 		mv	a0,s1
 376 016c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_
 376      E7800000 
 377              	.LVL28:
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
 378              		.loc 1 54 25
 379 0174 23B0A400 		sd	a0,0(s1)
  55:src/riscv.cpp ****                 if (!(*handle))
 380              		.loc 1 55 17 is_stmt 1
 381 0178 630A0502 		beq	a0,zero,.L17
 382              	.LBE59:
 383              	.LBE63:
 384              	.LBE74:
  38:src/riscv.cpp ****         uint64 res = 0;
 385              		.loc 1 38 16 is_stmt 0
 386 017c 13050000 		li	a0,0
 387 0180 6FF05FF7 		j	.L5
 388              	.LVL29:
 389              	.L8:
 390              	.LBB75:
 391              	.LBB64:
GAS LISTING /tmp/ccxX3eEc.s 			page 14


  59:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT:
 392              		.loc 1 59 13 is_stmt 1
  60:src/riscv.cpp ****                 TCB::exit();
 393              		.loc 1 60 17
  60:src/riscv.cpp ****                 TCB::exit();
 394              		.loc 1 60 26 is_stmt 0
 395 0184 97000000 		call	_ZN3TCB4exitEv
 395      E7800000 
 396              	.LVL30:
  61:src/riscv.cpp ****                 break;
 397              		.loc 1 61 17 is_stmt 1
 398              	.LBE64:
 399              	.LBE75:
  38:src/riscv.cpp ****         uint64 res = 0;
 400              		.loc 1 38 16 is_stmt 0
 401 018c 13050000 		li	a0,0
 402              	.LBB76:
 403              	.LBB65:
  61:src/riscv.cpp ****                 break;
 404              		.loc 1 61 17
 405 0190 6FF05FF6 		j	.L5
 406              	.LVL31:
 407              	.L6:
  62:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
 408              		.loc 1 62 13 is_stmt 1
  63:src/riscv.cpp ****                 TCB::dispatch();
 409              		.loc 1 63 17
  63:src/riscv.cpp ****                 TCB::dispatch();
 410              		.loc 1 63 30 is_stmt 0
 411 0194 97000000 		call	_ZN3TCB8dispatchEv
 411      E7800000 
 412              	.LVL32:
  64:src/riscv.cpp ****                 break;
 413              		.loc 1 64 17 is_stmt 1
 414              	.LBE65:
 415              	.LBE76:
  38:src/riscv.cpp ****         uint64 res = 0;
 416              		.loc 1 38 16 is_stmt 0
 417 019c 13050000 		li	a0,0
 418              	.LBB77:
 419              	.LBB66:
  64:src/riscv.cpp ****                 break;
 420              		.loc 1 64 17
 421 01a0 6FF05FF5 		j	.L5
 422              	.LVL33:
 423              	.L16:
 424              	.LBE66:
 425              	.LBE77:
  38:src/riscv.cpp ****         uint64 res = 0;
 426              		.loc 1 38 16
 427 01a4 13050000 		li	a0,0
 428 01a8 6FF0DFF4 		j	.L5
 429              	.LVL34:
 430              	.L17:
 431              	.LBB78:
 432              	.LBB67:
 433              	.LBB60:
GAS LISTING /tmp/ccxX3eEc.s 			page 15


  56:src/riscv.cpp ****                     res = -1;
 434              		.loc 1 56 25
 435 01ac 1305F0FF 		li	a0,-1
 436 01b0 6FF05FF4 		j	.L5
 437              	.LVL35:
 438              	.L20:
 439              	.LBE60:
 440              	.LBE67:
 441              	.LBE78:
 442              	.LBE79:
 443              	.LBB80:
 444              	.LBB37:
  77:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 445              		.loc 1 77 9 is_stmt 1
 446              	.LBB38:
 447              	.LBB39:
 147:src/../h/riscv.hpp **** }
 448              		.loc 2 147 5
 147:src/../h/riscv.hpp **** }
 449              		.loc 2 147 64 is_stmt 0
 450 01b4 93072000 		li	a5,2
 451              	 #APP
 452              	# 147 "src/../h/riscv.hpp" 1
 453              		csrc sip, a5
 454              	# 0 "" 2
 455              	.LVL36:
 456              	 #NO_APP
 457              	.LBE39:
 458              	.LBE38:
  78:src/riscv.cpp ****         TCB::timeSliceCounter++;
 459              		.loc 1 78 9 is_stmt 1
  78:src/riscv.cpp ****         TCB::timeSliceCounter++;
 460              		.loc 1 78 30 is_stmt 0
 461 01bc 17070000 		lla	a4,_ZN3TCB16timeSliceCounterE
 461      13070700 
 462              	.LVL37:
 463 01c4 83370700 		ld	a5,0(a4)
 464 01c8 93871700 		addi	a5,a5,1
 465 01cc 2330F700 		sd	a5,0(a4)
  79:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 466              		.loc 1 79 9 is_stmt 1
 467              	.LBB40:
  79:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 468              		.loc 1 79 64 is_stmt 0
 469 01d0 17070000 		lla	a4,_ZN3TCB7runningE
 469      13070700 
 470 01d8 03370700 		ld	a4,0(a4)
 471              	.LVL38:
 472              	.LBB41:
 473              	.LBB42:
 474              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
GAS LISTING /tmp/ccxX3eEc.s 			page 16


   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished_; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished_ = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void block() { blocked_ = true; }
  22:src/../h/tcb.hpp **** 
  23:src/../h/tcb.hpp ****     void unblock() { blocked_ = false; }
  24:src/../h/tcb.hpp **** 
  25:src/../h/tcb.hpp ****     bool isBlocked() { return blocked_; }
  26:src/../h/tcb.hpp **** 
  27:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 475              		.loc 3 27 35 is_stmt 1
 476              		.loc 3 27 42 is_stmt 0
 477 01dc 03378702 		ld	a4,40(a4)
 478              	.LVL39:
 479              	.LBE42:
 480              	.LBE41:
  79:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 481              		.loc 1 79 9
 482 01e0 E3E6E7F2 		bltu	a5,a4,.L3
 483              	.LBB43:
  81:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 484              		.loc 1 81 13 is_stmt 1
 485              	.LBB44:
 486              	.LBB45:
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 487              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     return sepc;
 488              		.loc 2 107 5
 107:src/../h/riscv.hpp ****     return sepc;
 489              		.loc 2 107 64 is_stmt 0
 490              	 #APP
 491              	# 107 "src/../h/riscv.hpp" 1
 492              		csrr a5, sepc
 493              	# 0 "" 2
 494              	 #NO_APP
 495 01e8 233CF4FC 		sd	a5,-40(s0)
 108:src/../h/riscv.hpp **** }
 496              		.loc 2 108 5 is_stmt 1
 108:src/../h/riscv.hpp **** }
 497              		.loc 2 108 12 is_stmt 0
 498 01ec 833784FD 		ld	a5,-40(s0)
 499              	.LBE45:
 500              	.LBE44:
  81:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 501              		.loc 1 81 43
 502 01f0 2334F4FA 		sd	a5,-88(s0)
GAS LISTING /tmp/ccxX3eEc.s 			page 17


  82:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 503              		.loc 1 82 13 is_stmt 1
 504              	.LBB46:
 505              	.LBB47:
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 506              		.loc 2 174 5
 175:src/../h/riscv.hpp ****     return sstatus;
 507              		.loc 2 175 5
 175:src/../h/riscv.hpp ****     return sstatus;
 508              		.loc 2 175 76 is_stmt 0
 509              	 #APP
 510              	# 175 "src/../h/riscv.hpp" 1
 511              		csrr a5, sstatus
 512              	# 0 "" 2
 513              	 #NO_APP
 514 01f8 2338F4FC 		sd	a5,-48(s0)
 176:src/../h/riscv.hpp **** }
 515              		.loc 2 176 5 is_stmt 1
 176:src/../h/riscv.hpp **** }
 516              		.loc 2 176 12 is_stmt 0
 517 01fc 833704FD 		ld	a5,-48(s0)
 518              	.LBE47:
 519              	.LBE46:
  82:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 520              		.loc 1 82 49
 521 0200 2338F4FA 		sd	a5,-80(s0)
  83:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 522              		.loc 1 83 13 is_stmt 1
  83:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 523              		.loc 1 83 35 is_stmt 0
 524 0204 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 524      23B00700 
  84:src/riscv.cpp ****             TCB::dispatch();
 525              		.loc 1 84 13 is_stmt 1
  84:src/riscv.cpp ****             TCB::dispatch();
 526              		.loc 1 84 26 is_stmt 0
 527 020c 97000000 		call	_ZN3TCB8dispatchEv
 527      E7800000 
 528              	.LVL40:
  85:src/riscv.cpp ****             w_sstatus(sstatus);
 529              		.loc 1 85 13 is_stmt 1
  85:src/riscv.cpp ****             w_sstatus(sstatus);
 530              		.loc 1 85 22 is_stmt 0
 531 0214 833704FB 		ld	a5,-80(s0)
 532              	.LVL41:
 533              	.LBB48:
 534              	.LBB49:
 181:src/../h/riscv.hpp **** }
 535              		.loc 2 181 5 is_stmt 1
 181:src/../h/riscv.hpp **** }
 536              		.loc 2 181 77 is_stmt 0
 537              	 #APP
 538              	# 181 "src/../h/riscv.hpp" 1
 539              		csrw sstatus, a5
 540              	# 0 "" 2
 541              	.LVL42:
 542              	 #NO_APP
GAS LISTING /tmp/ccxX3eEc.s 			page 18


 543              	.LBE49:
 544              	.LBE48:
  86:src/riscv.cpp ****             w_sepc(sepc);
 545              		.loc 1 86 13 is_stmt 1
  86:src/riscv.cpp ****             w_sepc(sepc);
 546              		.loc 1 86 19 is_stmt 0
 547 021c 833784FA 		ld	a5,-88(s0)
 548              	.LVL43:
 549              	.LBB50:
 550              	.LBB51:
 113:src/../h/riscv.hpp **** }
 551              		.loc 2 113 5 is_stmt 1
 113:src/../h/riscv.hpp **** }
 552              		.loc 2 113 65 is_stmt 0
 553              	 #APP
 554              	# 113 "src/../h/riscv.hpp" 1
 555              		csrw sepc, a5
 556              	# 0 "" 2
 557              	 #NO_APP
 558 0224 6FF09FEE 		j	.L3
 559              	.LBE51:
 560              	.LBE50:
 561              	.LBE43:
 562              	.LBE40:
 563              	.LBE37:
 564              	.LBE80:
 565              	.LBE83:
 566              		.cfi_endproc
 567              	.LFE37:
 569              	.Letext0:
 570              		.file 4 "src/../h/../lib/hw.h"
 571              		.file 5 "src/../h/syscall_c.hpp"
 572              		.file 6 "src/../h/mem.hpp"
 573              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/ccxX3eEc.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccxX3eEc.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccxX3eEc.s:16     .text:0000000000000000 .L0 
     /tmp/ccxX3eEc.s:17     .text:0000000000000000 .L0 
     /tmp/ccxX3eEc.s:18     .text:0000000000000004 .L0 
     /tmp/ccxX3eEc.s:20     .text:0000000000000008 .L0 
     /tmp/ccxX3eEc.s:22     .text:000000000000000c .L0 
     /tmp/ccxX3eEc.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccxX3eEc.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccxX3eEc.s:36     .text:0000000000000014 .L0 
     /tmp/ccxX3eEc.s:37     .text:0000000000000018 .L0 
     /tmp/ccxX3eEc.s:38     .text:0000000000000018 .L0 
     /tmp/ccxX3eEc.s:40     .text:000000000000001c .L0 
     /tmp/ccxX3eEc.s:42     .text:0000000000000020 .L0 
     /tmp/ccxX3eEc.s:48     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccxX3eEc.s:51     .text:0000000000000020 .L0 
     /tmp/ccxX3eEc.s:52     .text:0000000000000020 .L0 
     /tmp/ccxX3eEc.s:53     .text:0000000000000024 .L0 
     /tmp/ccxX3eEc.s:57     .text:0000000000000030 .L0 
     /tmp/ccxX3eEc.s:58     .text:0000000000000030 .L0 
     /tmp/ccxX3eEc.s:59     .text:0000000000000030 .L0 
     /tmp/ccxX3eEc.s:61     .text:0000000000000034 .L0 
     /tmp/ccxX3eEc.s:66     .text:0000000000000034 .L0 
     /tmp/ccxX3eEc.s:67     .text:0000000000000034 .L0 
     /tmp/ccxX3eEc.s:68     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:95     .text:0000000000000034 .L0 
     /tmp/ccxX3eEc.s:76     .text:000000000000003c .L0 
     /tmp/ccxX3eEc.s:77     .text:000000000000003c .L0 
     /tmp/ccxX3eEc.s:83     .text:0000000000000040 .L0 
     /tmp/ccxX3eEc.s:84     .text:0000000000000040 .L0 
     /tmp/ccxX3eEc.s:86     .text:0000000000000044 .L0 
     /tmp/ccxX3eEc.s:92     .text:000000000000004c .L0 
     /tmp/ccxX3eEc.s:97     .text:000000000000005c .L0 
     /tmp/ccxX3eEc.s:102    .text:000000000000006c .L0 
     /tmp/ccxX3eEc.s:103    .text:000000000000006c .L0 
     /tmp/ccxX3eEc.s:108    .text:0000000000000074 .L0 
     /tmp/ccxX3eEc.s:116    .text:0000000000000078 .L0 
     /tmp/ccxX3eEc.s:117    .text:0000000000000078 .L0 
     /tmp/ccxX3eEc.s:118    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000078 .L0 
     /tmp/ccxX3eEc.s:126    .text:0000000000000080 .L0 
     /tmp/ccxX3eEc.s:127    .text:0000000000000080 .L0 
     /tmp/ccxX3eEc.s:131    .text:0000000000000084 .L0 
     /tmp/ccxX3eEc.s:133    .text:0000000000000088 .L0 
     /tmp/ccxX3eEc.s:137    .text:000000000000008c .L0 
     /tmp/ccxX3eEc.s:138    .text:000000000000008c .L0 
     /tmp/ccxX3eEc.s:139    .text:000000000000008c .L0 
  src/../h/riscv.hpp:175    .text:000000000000008c .L0 
     /tmp/ccxX3eEc.s:147    .text:0000000000000094 .L0 
     /tmp/ccxX3eEc.s:148    .text:0000000000000094 .L0 
     /tmp/ccxX3eEc.s:152    .text:0000000000000098 .L0 
     /tmp/ccxX3eEc.s:154    .text:000000000000009c .L0 
     /tmp/ccxX3eEc.s:155    .text:000000000000009c .L0 
       src/riscv.cpp:29     .text:000000000000009c .L0 
GAS LISTING /tmp/ccxX3eEc.s 			page 20


     /tmp/ccxX3eEc.s:162    .text:00000000000000a0 .L0 
       src/riscv.cpp:30     .text:00000000000000a0 .L0 
     /tmp/ccxX3eEc.s:168    .text:00000000000000a4 .L0 
       src/riscv.cpp:31     .text:00000000000000a4 .L0 
     /tmp/ccxX3eEc.s:174    .text:00000000000000a8 .L0 
       src/riscv.cpp:32     .text:00000000000000a8 .L0 
     /tmp/ccxX3eEc.s:180    .text:00000000000000ac .L0 
       src/riscv.cpp:33     .text:00000000000000ac .L0 
     /tmp/ccxX3eEc.s:186    .text:00000000000000b0 .L0 
       src/riscv.cpp:34     .text:00000000000000b0 .L0 
     /tmp/ccxX3eEc.s:192    .text:00000000000000b4 .L0 
       src/riscv.cpp:35     .text:00000000000000b4 .L0 
     /tmp/ccxX3eEc.s:198    .text:00000000000000b8 .L0 
       src/riscv.cpp:36     .text:00000000000000b8 .L0 
     /tmp/ccxX3eEc.s:204    .text:00000000000000bc .L0 
     /tmp/ccxX3eEc.s:207    .text:00000000000000bc .L0 
     /tmp/ccxX3eEc.s:244    .text:00000000000000e0 .L0 
     /tmp/ccxX3eEc.s:245    .text:00000000000000e0 .L0 
     /tmp/ccxX3eEc.s:246    .text:00000000000000e0 .L0 
     /tmp/ccxX3eEc.s:255    .text:00000000000000f4 .L0 
     /tmp/ccxX3eEc.s:256    .text:00000000000000f4 .L0 
       src/riscv.cpp:66     .text:00000000000000f4 .L0 
     /tmp/ccxX3eEc.s:262    .text:00000000000000f8 .L0 
       src/riscv.cpp:69     .text:00000000000000f8 .L0 
     /tmp/ccxX3eEc.s:267    .text:00000000000000fc .L0 
     /tmp/ccxX3eEc.s:269    .text:00000000000000fc .L0 
     /tmp/ccxX3eEc.s:274    .text:0000000000000100 .L0 
  src/../h/riscv.hpp:181    .text:0000000000000100 .L0 
     /tmp/ccxX3eEc.s:284    .text:0000000000000104 .L0 
     /tmp/ccxX3eEc.s:285    .text:0000000000000104 .L0 
     /tmp/ccxX3eEc.s:290    .text:0000000000000108 .L0 
  src/../h/riscv.hpp:113    .text:0000000000000108 .L0 
     /tmp/ccxX3eEc.s:303    .text:000000000000010c .L0 
     /tmp/ccxX3eEc.s:304    .text:0000000000000110 .L0 
     /tmp/ccxX3eEc.s:305    .text:0000000000000110 .L0 
     /tmp/ccxX3eEc.s:307    .text:0000000000000114 .L0 
     /tmp/ccxX3eEc.s:308    .text:0000000000000114 .L0 
     /tmp/ccxX3eEc.s:310    .text:0000000000000118 .L0 
     /tmp/ccxX3eEc.s:312    .text:000000000000011c .L0 
     /tmp/ccxX3eEc.s:316    .text:0000000000000120 .L0 
     /tmp/ccxX3eEc.s:322    .text:0000000000000120 .L0 
     /tmp/ccxX3eEc.s:323    .text:0000000000000120 .L0 
     /tmp/ccxX3eEc.s:324    .text:0000000000000120 .L0 
     /tmp/ccxX3eEc.s:330    .text:0000000000000134 .L0 
     /tmp/ccxX3eEc.s:334    .text:0000000000000138 .L0 
     /tmp/ccxX3eEc.s:335    .text:0000000000000138 .L0 
     /tmp/ccxX3eEc.s:336    .text:0000000000000138 .L0 
     /tmp/ccxX3eEc.s:343    .text:0000000000000148 .L0 
     /tmp/ccxX3eEc.s:344    .text:0000000000000148 .L0 
     /tmp/ccxX3eEc.s:348    .text:000000000000014c .L0 
     /tmp/ccxX3eEc.s:352    .text:0000000000000150 .L0 
     /tmp/ccxX3eEc.s:353    .text:0000000000000150 .L0 
     /tmp/ccxX3eEc.s:354    .text:0000000000000150 .L0 
     /tmp/ccxX3eEc.s:361    .text:0000000000000160 .L0 
     /tmp/ccxX3eEc.s:362    .text:0000000000000160 .L0 
     /tmp/ccxX3eEc.s:366    .text:0000000000000164 .L0 
     /tmp/ccxX3eEc.s:370    .text:0000000000000168 .L0 
GAS LISTING /tmp/ccxX3eEc.s 			page 21


     /tmp/ccxX3eEc.s:372    .text:0000000000000168 .L0 
     /tmp/ccxX3eEc.s:373    .text:0000000000000168 .L0 
     /tmp/ccxX3eEc.s:374    .text:0000000000000168 .L0 
     /tmp/ccxX3eEc.s:375    .text:0000000000000168 .L0 
     /tmp/ccxX3eEc.s:379    .text:0000000000000174 .L0 
     /tmp/ccxX3eEc.s:381    .text:0000000000000178 .L0 
     /tmp/ccxX3eEc.s:386    .text:000000000000017c .L0 
     /tmp/ccxX3eEc.s:393    .text:0000000000000184 .L0 
     /tmp/ccxX3eEc.s:394    .text:0000000000000184 .L0 
     /tmp/ccxX3eEc.s:395    .text:0000000000000184 .L0 
     /tmp/ccxX3eEc.s:400    .text:000000000000018c .L0 
     /tmp/ccxX3eEc.s:401    .text:000000000000018c .L0 
     /tmp/ccxX3eEc.s:405    .text:0000000000000190 .L0 
     /tmp/ccxX3eEc.s:409    .text:0000000000000194 .L0 
     /tmp/ccxX3eEc.s:410    .text:0000000000000194 .L0 
     /tmp/ccxX3eEc.s:411    .text:0000000000000194 .L0 
     /tmp/ccxX3eEc.s:416    .text:000000000000019c .L0 
     /tmp/ccxX3eEc.s:417    .text:000000000000019c .L0 
     /tmp/ccxX3eEc.s:421    .text:00000000000001a0 .L0 
     /tmp/ccxX3eEc.s:427    .text:00000000000001a4 .L0 
     /tmp/ccxX3eEc.s:435    .text:00000000000001ac .L0 
     /tmp/ccxX3eEc.s:448    .text:00000000000001b4 .L0 
     /tmp/ccxX3eEc.s:449    .text:00000000000001b4 .L0 
     /tmp/ccxX3eEc.s:450    .text:00000000000001b4 .L0 
     /tmp/ccxX3eEc.s:460    .text:00000000000001bc .L0 
     /tmp/ccxX3eEc.s:461    .text:00000000000001bc .L0 
     /tmp/ccxX3eEc.s:468    .text:00000000000001d0 .L0 
     /tmp/ccxX3eEc.s:469    .text:00000000000001d0 .L0 
     /tmp/ccxX3eEc.s:476    .text:00000000000001dc .L0 
     /tmp/ccxX3eEc.s:477    .text:00000000000001dc .L0 
     /tmp/ccxX3eEc.s:482    .text:00000000000001e0 .L0 
     /tmp/ccxX3eEc.s:487    .text:00000000000001e4 .L0 
     /tmp/ccxX3eEc.s:488    .text:00000000000001e4 .L0 
     /tmp/ccxX3eEc.s:489    .text:00000000000001e4 .L0 
  src/../h/riscv.hpp:107    .text:00000000000001e4 .L0 
     /tmp/ccxX3eEc.s:497    .text:00000000000001ec .L0 
     /tmp/ccxX3eEc.s:498    .text:00000000000001ec .L0 
     /tmp/ccxX3eEc.s:502    .text:00000000000001f0 .L0 
     /tmp/ccxX3eEc.s:506    .text:00000000000001f4 .L0 
     /tmp/ccxX3eEc.s:507    .text:00000000000001f4 .L0 
     /tmp/ccxX3eEc.s:508    .text:00000000000001f4 .L0 
  src/../h/riscv.hpp:175    .text:00000000000001f4 .L0 
     /tmp/ccxX3eEc.s:516    .text:00000000000001fc .L0 
     /tmp/ccxX3eEc.s:517    .text:00000000000001fc .L0 
     /tmp/ccxX3eEc.s:521    .text:0000000000000200 .L0 
     /tmp/ccxX3eEc.s:523    .text:0000000000000204 .L0 
     /tmp/ccxX3eEc.s:524    .text:0000000000000204 .L0 
     /tmp/ccxX3eEc.s:526    .text:000000000000020c .L0 
     /tmp/ccxX3eEc.s:527    .text:000000000000020c .L0 
     /tmp/ccxX3eEc.s:530    .text:0000000000000214 .L0 
     /tmp/ccxX3eEc.s:531    .text:0000000000000214 .L0 
     /tmp/ccxX3eEc.s:536    .text:0000000000000218 .L0 
  src/../h/riscv.hpp:181    .text:0000000000000218 .L0 
     /tmp/ccxX3eEc.s:546    .text:000000000000021c .L0 
     /tmp/ccxX3eEc.s:547    .text:000000000000021c .L0 
     /tmp/ccxX3eEc.s:552    .text:0000000000000220 .L0 
  src/../h/riscv.hpp:113    .text:0000000000000220 .L0 
GAS LISTING /tmp/ccxX3eEc.s 			page 22


     /tmp/ccxX3eEc.s:566    .text:0000000000000228 .L0 
     /tmp/ccxX3eEc.s:574    .text:0000000000000228 .L0 
     /tmp/ccxX3eEc.s:219    .rodata:0000000000000000 .L7
     /tmp/ccxX3eEc.s:211    .text:00000000000000c8 .L0 
     /tmp/ccxX3eEc.s:461    .text:00000000000001bc .L0 
     /tmp/ccxX3eEc.s:469    .text:00000000000001d0 .L0 
     /tmp/ccxX3eEc.s:524    .text:0000000000000204 .L0 
     /tmp/ccxX3eEc.s:110    .text:0000000000000078 .L19
     /tmp/ccxX3eEc.s:438    .text:00000000000001b4 .L20
     /tmp/ccxX3eEc.s:297    .text:000000000000010c .L3
     /tmp/ccxX3eEc.s:423    .text:00000000000001a4 .L16
     /tmp/ccxX3eEc.s:252    .text:00000000000000f4 .L5
     /tmp/ccxX3eEc.s:430    .text:00000000000001ac .L17
     /tmp/ccxX3eEc.s:241    .text:00000000000000e0 .L13
     /tmp/ccxX3eEc.s:315    .text:0000000000000120 .L12
     /tmp/ccxX3eEc.s:332    .text:0000000000000138 .L11
     /tmp/ccxX3eEc.s:350    .text:0000000000000150 .L10
     /tmp/ccxX3eEc.s:368    .text:0000000000000168 .L9
     /tmp/ccxX3eEc.s:389    .text:0000000000000184 .L8
     /tmp/ccxX3eEc.s:407    .text:0000000000000194 .L6
     /tmp/ccxX3eEc.s:1923   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccxX3eEc.s:3400   .debug_str:000000000000048e .LASF139
     /tmp/ccxX3eEc.s:3436   .debug_str:000000000000061e .LASF140
     /tmp/ccxX3eEc.s:3384   .debug_str:000000000000041f .LASF141
     /tmp/ccxX3eEc.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccxX3eEc.s:569    .text:0000000000000228 .Letext0
     /tmp/ccxX3eEc.s:3248   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccxX3eEc.s:3412   .debug_str:000000000000059f .LASF0
     /tmp/ccxX3eEc.s:3432   .debug_str:00000000000005f8 .LASF1
     /tmp/ccxX3eEc.s:3392   .debug_str:0000000000000460 .LASF2
     /tmp/ccxX3eEc.s:3366   .debug_str:000000000000039d .LASF4
     /tmp/ccxX3eEc.s:3478   .debug_str:000000000000073a .LASF3
     /tmp/ccxX3eEc.s:3278   .debug_str:00000000000000ab .LASF5
     /tmp/ccxX3eEc.s:3434   .debug_str:000000000000060b .LASF6
     /tmp/ccxX3eEc.s:3410   .debug_str:000000000000058c .LASF7
     /tmp/ccxX3eEc.s:3514   .debug_str:0000000000000834 .LASF8
     /tmp/ccxX3eEc.s:3352   .debug_str:0000000000000310 .LASF9
     /tmp/ccxX3eEc.s:3450   .debug_str:0000000000000698 .LASF10
     /tmp/ccxX3eEc.s:3508   .debug_str:0000000000000800 .LASF11
     /tmp/ccxX3eEc.s:3282   .debug_str:00000000000000ba .LASF12
     /tmp/ccxX3eEc.s:3258   .debug_str:000000000000002a .LASF13
     /tmp/ccxX3eEc.s:3298   .debug_str:000000000000013a .LASF14
     /tmp/ccxX3eEc.s:3468   .debug_str:00000000000006f5 .LASF15
     /tmp/ccxX3eEc.s:3310   .debug_str:00000000000001ad .LASF16
     /tmp/ccxX3eEc.s:3428   .debug_str:00000000000005e7 .LASF56
     /tmp/ccxX3eEc.s:3378   .debug_str:00000000000003fb .LASF142
     /tmp/ccxX3eEc.s:3490   .debug_str:0000000000000786 .LASF17
     /tmp/ccxX3eEc.s:3426   .debug_str:00000000000005de .LASF18
     /tmp/ccxX3eEc.s:3372   .debug_str:00000000000003ca .LASF19
     /tmp/ccxX3eEc.s:3466   .debug_str:00000000000006ea .LASF52
     /tmp/ccxX3eEc.s:3536   .debug_str:00000000000008f8 .LASF54
     /tmp/ccxX3eEc.s:3260   .debug_str:000000000000003a .LASF20
     /tmp/ccxX3eEc.s:3330   .debug_str:000000000000024b .LASF22
     /tmp/ccxX3eEc.s:3322   .debug_str:0000000000000225 .LASF24
     /tmp/ccxX3eEc.s:3320   .debug_str:0000000000000210 .LASF26
     /tmp/ccxX3eEc.s:3482   .debug_str:000000000000075d .LASF21
     /tmp/ccxX3eEc.s:3456   .debug_str:00000000000006b5 .LASF23
GAS LISTING /tmp/ccxX3eEc.s 			page 23


     /tmp/ccxX3eEc.s:3502   .debug_str:00000000000007e5 .LASF25
     /tmp/ccxX3eEc.s:3496   .debug_str:00000000000007ae .LASF27
     /tmp/ccxX3eEc.s:3344   .debug_str:00000000000002e5 .LASF28
     /tmp/ccxX3eEc.s:3312   .debug_str:00000000000001c3 .LASF29
     /tmp/ccxX3eEc.s:3252   .debug_str:0000000000000009 .LASF30
     /tmp/ccxX3eEc.s:3358   .debug_str:0000000000000346 .LASF31
     /tmp/ccxX3eEc.s:3504   .debug_str:00000000000007ec .LASF32
     /tmp/ccxX3eEc.s:3288   .debug_str:00000000000000da .LASF33
     /tmp/ccxX3eEc.s:3542   .debug_str:000000000000092a .LASF34
     /tmp/ccxX3eEc.s:3332   .debug_str:0000000000000260 .LASF35
     /tmp/ccxX3eEc.s:3414   .debug_str:00000000000005ac .LASF36
     /tmp/ccxX3eEc.s:3532   .debug_str:00000000000008e0 .LASF37
     /tmp/ccxX3eEc.s:3270   .debug_str:0000000000000062 .LASF38
     /tmp/ccxX3eEc.s:3342   .debug_str:00000000000002d2 .LASF39
     /tmp/ccxX3eEc.s:3348   .debug_str:00000000000002f3 .LASF40
     /tmp/ccxX3eEc.s:3500   .debug_str:00000000000007d3 .LASF41
     /tmp/ccxX3eEc.s:3268   .debug_str:000000000000005c .LASF42
     /tmp/ccxX3eEc.s:3548   .debug_str:000000000000097c .LASF43
     /tmp/ccxX3eEc.s:3540   .debug_str:000000000000091f .LASF44
     /tmp/ccxX3eEc.s:3474   .debug_str:000000000000071d .LASF45
     /tmp/ccxX3eEc.s:3430   .debug_str:00000000000005ed .LASF46
     /tmp/ccxX3eEc.s:3492   .debug_str:000000000000078f .LASF47
     /tmp/ccxX3eEc.s:3296   .debug_str:0000000000000130 .LASF48
     /tmp/ccxX3eEc.s:3362   .debug_str:000000000000035f .LASF49
     /tmp/ccxX3eEc.s:3398   .debug_str:0000000000000484 .LASF50
     /tmp/ccxX3eEc.s:3356   .debug_str:0000000000000330 .LASF51
     /tmp/ccxX3eEc.s:3484   .debug_str:0000000000000764 .LASF53
     /tmp/ccxX3eEc.s:3290   .debug_str:00000000000000ee .LASF55
     /tmp/ccxX3eEc.s:3518   .debug_str:000000000000084e .LASF82
     /tmp/ccxX3eEc.s:3376   .debug_str:00000000000003d9 .LASF84
     /tmp/ccxX3eEc.s:3266   .debug_str:0000000000000054 .LASF143
     /tmp/ccxX3eEc.s:3360   .debug_str:000000000000035a .LASF57
     /tmp/ccxX3eEc.s:3458   .debug_str:00000000000006c8 .LASF59
     /tmp/ccxX3eEc.s:3438   .debug_str:000000000000062c .LASF65
     /tmp/ccxX3eEc.s:3350   .debug_str:00000000000002f9 .LASF67
     /tmp/ccxX3eEc.s:3394   .debug_str:000000000000046e .LASF58
     /tmp/ccxX3eEc.s:3544   .debug_str:0000000000000932 .LASF60
     /tmp/ccxX3eEc.s:3374   .debug_str:00000000000003d3 .LASF61
     /tmp/ccxX3eEc.s:3326   .debug_str:0000000000000233 .LASF62
     /tmp/ccxX3eEc.s:3280   .debug_str:00000000000000b2 .LASF63
     /tmp/ccxX3eEc.s:3354   .debug_str:000000000000031e .LASF64
     /tmp/ccxX3eEc.s:3264   .debug_str:000000000000004a .LASF66
     /tmp/ccxX3eEc.s:3444   .debug_str:0000000000000658 .LASF68
     /tmp/ccxX3eEc.s:3388   .debug_str:0000000000000445 .LASF69
     /tmp/ccxX3eEc.s:3274   .debug_str:000000000000006e .LASF70
     /tmp/ccxX3eEc.s:3308   .debug_str:00000000000001a0 .LASF71
     /tmp/ccxX3eEc.s:3446   .debug_str:000000000000066c .LASF72
     /tmp/ccxX3eEc.s:3462   .debug_str:00000000000006dc .LASF144
     /tmp/ccxX3eEc.s:3470   .debug_str:000000000000070b .LASF73
     /tmp/ccxX3eEc.s:3314   .debug_str:00000000000001d7 .LASF74
     /tmp/ccxX3eEc.s:3328   .debug_str:0000000000000243 .LASF124
     /tmp/ccxX3eEc.s:3408   .debug_str:0000000000000577 .LASF145
     /tmp/ccxX3eEc.s:3370   .debug_str:00000000000003c5 .LASF75
     /tmp/ccxX3eEc.s:3324   .debug_str:000000000000022e .LASF76
     /tmp/ccxX3eEc.s:3418   .debug_str:00000000000005bc .LASF77
     /tmp/ccxX3eEc.s:3420   .debug_str:00000000000005c2 .LASF78
     /tmp/ccxX3eEc.s:3424   .debug_str:00000000000005d4 .LASF79
GAS LISTING /tmp/ccxX3eEc.s 			page 24


     /tmp/ccxX3eEc.s:3396   .debug_str:000000000000047a .LASF80
     /tmp/ccxX3eEc.s:3256   .debug_str:0000000000000021 .LASF81
     /tmp/ccxX3eEc.s:3390   .debug_str:0000000000000452 .LASF83
     /tmp/ccxX3eEc.s:3524   .debug_str:0000000000000892 .LASF85
     /tmp/ccxX3eEc.s:3522   .debug_str:0000000000000884 .LASF130
     /tmp/ccxX3eEc.s:3364   .debug_str:0000000000000375 .LASF132
     /tmp/ccxX3eEc.s:3416   .debug_str:00000000000005b3 .LASF86
     /tmp/ccxX3eEc.s:3334   .debug_str:0000000000000274 .LASF87
     /tmp/ccxX3eEc.s:3476   .debug_str:0000000000000735 .LASF88
     /tmp/ccxX3eEc.s:3538   .debug_str:0000000000000910 .LASF89
     /tmp/ccxX3eEc.s:3480   .debug_str:000000000000074c .LASF121
     /tmp/ccxX3eEc.s:3382   .debug_str:0000000000000414 .LASF90
     /tmp/ccxX3eEc.s:3526   .debug_str:00000000000008ab .LASF91
     /tmp/ccxX3eEc.s:3336   .debug_str:0000000000000287 .LASF92
     /tmp/ccxX3eEc.s:3250   .debug_str:0000000000000000 .LASF93
     /tmp/ccxX3eEc.s:3448   .debug_str:000000000000068c .LASF146
     /tmp/ccxX3eEc.s:3486   .debug_str:0000000000000773 .LASF94
     /tmp/ccxX3eEc.s:3464   .debug_str:00000000000006e1 .LASF95
     /tmp/ccxX3eEc.s:3386   .debug_str:0000000000000432 .LASF96
     /tmp/ccxX3eEc.s:3340   .debug_str:00000000000002b7 .LASF97
     /tmp/ccxX3eEc.s:3380   .debug_str:0000000000000406 .LASF98
     /tmp/ccxX3eEc.s:3472   .debug_str:0000000000000711 .LASF99
     /tmp/ccxX3eEc.s:3302   .debug_str:000000000000014b .LASF100
     /tmp/ccxX3eEc.s:3512   .debug_str:000000000000082b .LASF101
     /tmp/ccxX3eEc.s:3422   .debug_str:00000000000005ca .LASF102
     /tmp/ccxX3eEc.s:3488   .debug_str:000000000000077d .LASF103
     /tmp/ccxX3eEc.s:3284   .debug_str:00000000000000ca .LASF104
     /tmp/ccxX3eEc.s:3404   .debug_str:000000000000055c .LASF105
     /tmp/ccxX3eEc.s:3272   .debug_str:0000000000000069 .LASF106
     /tmp/ccxX3eEc.s:3452   .debug_str:00000000000006a7 .LASF107
     /tmp/ccxX3eEc.s:3406   .debug_str:0000000000000567 .LASF108
     /tmp/ccxX3eEc.s:3292   .debug_str:000000000000010a .LASF147
     /tmp/ccxX3eEc.s:3440   .debug_str:0000000000000637 .LASF109
     /tmp/ccxX3eEc.s:3346   .debug_str:00000000000002ed .LASF110
     /tmp/ccxX3eEc.s:3506   .debug_str:00000000000007f4 .LASF111
     /tmp/ccxX3eEc.s:3276   .debug_str:0000000000000087 .LASF112
     /tmp/ccxX3eEc.s:3516   .debug_str:0000000000000844 .LASF113
     /tmp/ccxX3eEc.s:3520   .debug_str:0000000000000863 .LASF114
     /tmp/ccxX3eEc.s:3454   .debug_str:00000000000006ac .LASF115
     /tmp/ccxX3eEc.s:3368   .debug_str:00000000000003a4 .LASF116
     /tmp/ccxX3eEc.s:3528   .debug_str:00000000000008b6 .LASF117
     /tmp/ccxX3eEc.s:3338   .debug_str:000000000000028c .LASF118
     /tmp/ccxX3eEc.s:3442   .debug_str:000000000000063d .LASF119
     /tmp/ccxX3eEc.s:3546   .debug_str:0000000000000949 .LASF120
     /tmp/ccxX3eEc.s:3306   .debug_str:0000000000000196 .LASF122
     /tmp/ccxX3eEc.s:3254   .debug_str:0000000000000011 .LASF123
     /tmp/ccxX3eEc.s:3530   .debug_str:00000000000008c9 .LASF125
     /tmp/ccxX3eEc.s:3318   .debug_str:00000000000001f7 .LASF126
     /tmp/ccxX3eEc.s:3510   .debug_str:000000000000080f .LASF127
     /tmp/ccxX3eEc.s:3402   .debug_str:0000000000000552 .LASF128
     /tmp/ccxX3eEc.s:3294   .debug_str:0000000000000114 .LASF129
     /tmp/ccxX3eEc.s:3498   .debug_str:00000000000007c1 .LASF131
     /tmp/ccxX3eEc.s:3304   .debug_str:000000000000015b .LASF133
     /tmp/ccxX3eEc.s:49     .text:0000000000000020 .LFB37
     /tmp/ccxX3eEc.s:567    .text:0000000000000228 .LFE37
     /tmp/ccxX3eEc.s:3262   .debug_str:0000000000000043 .LASF134
     /tmp/ccxX3eEc.s:3026   .debug_loc:0000000000000000 .LLST0
GAS LISTING /tmp/ccxX3eEc.s 			page 25


     /tmp/ccxX3eEc.s:3234   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccxX3eEc.s:3286   .debug_str:00000000000000d5 .LASF135
     /tmp/ccxX3eEc.s:3460   .debug_str:00000000000006d4 .LASF136
     /tmp/ccxX3eEc.s:3095   .debug_loc:0000000000000106 .LLST4
     /tmp/ccxX3eEc.s:3102   .debug_loc:0000000000000129 .LLST5
     /tmp/ccxX3eEc.s:3113   .debug_loc:000000000000015f .LLST6
     /tmp/ccxX3eEc.s:3148   .debug_loc:0000000000000207 .LLST7
     /tmp/ccxX3eEc.s:3494   .debug_str:00000000000007a7 .LASF137
     /tmp/ccxX3eEc.s:3174   .debug_loc:0000000000000279 .LLST8
     /tmp/ccxX3eEc.s:377    .text:0000000000000174 .LVL28
     /tmp/ccxX3eEc.s:114    .text:0000000000000078 .LBB53
     /tmp/ccxX3eEc.s:129    .text:0000000000000084 .LBE53
     /tmp/ccxX3eEc.s:115    .text:0000000000000078 .LBB54
     /tmp/ccxX3eEc.s:128    .text:0000000000000084 .LBE54
     /tmp/ccxX3eEc.s:135    .text:000000000000008c .LBB55
     /tmp/ccxX3eEc.s:150    .text:0000000000000098 .LBE55
     /tmp/ccxX3eEc.s:136    .text:000000000000008c .LBB56
     /tmp/ccxX3eEc.s:149    .text:0000000000000098 .LBE56
     /tmp/ccxX3eEc.s:271    .text:0000000000000100 .LBB68
     /tmp/ccxX3eEc.s:282    .text:0000000000000104 .LBE68
     /tmp/ccxX3eEc.s:3185   .debug_loc:00000000000002af .LLST9
     /tmp/ccxX3eEc.s:287    .text:0000000000000108 .LBB70
     /tmp/ccxX3eEc.s:299    .text:000000000000010c .LBE70
     /tmp/ccxX3eEc.s:3192   .debug_loc:00000000000002d2 .LLST10
     /tmp/ccxX3eEc.s:247    .text:00000000000000e8 .LVL12
     /tmp/ccxX3eEc.s:250    .text:00000000000000f4 .LVL13
     /tmp/ccxX3eEc.s:325    .text:0000000000000128 .LVL19
     /tmp/ccxX3eEc.s:328    .text:0000000000000134 .LVL20
     /tmp/ccxX3eEc.s:337    .text:0000000000000140 .LVL22
     /tmp/ccxX3eEc.s:339    .text:0000000000000148 .LVL23
     /tmp/ccxX3eEc.s:355    .text:0000000000000158 .LVL25
     /tmp/ccxX3eEc.s:357    .text:0000000000000160 .LVL26
     /tmp/ccxX3eEc.s:396    .text:000000000000018c .LVL30
     /tmp/ccxX3eEc.s:412    .text:000000000000019c .LVL32
     /tmp/ccxX3eEc.s:483    .text:00000000000001e4 .LBB43
     /tmp/ccxX3eEc.s:561    .text:0000000000000228 .LBE43
     /tmp/ccxX3eEc.s:485    .text:00000000000001e4 .LBB44
     /tmp/ccxX3eEc.s:500    .text:00000000000001f0 .LBE44
     /tmp/ccxX3eEc.s:486    .text:00000000000001e4 .LBB45
     /tmp/ccxX3eEc.s:499    .text:00000000000001f0 .LBE45
     /tmp/ccxX3eEc.s:504    .text:00000000000001f4 .LBB46
     /tmp/ccxX3eEc.s:519    .text:0000000000000200 .LBE46
     /tmp/ccxX3eEc.s:505    .text:00000000000001f4 .LBB47
     /tmp/ccxX3eEc.s:518    .text:0000000000000200 .LBE47
     /tmp/ccxX3eEc.s:533    .text:0000000000000218 .LBB48
     /tmp/ccxX3eEc.s:544    .text:000000000000021c .LBE48
     /tmp/ccxX3eEc.s:3199   .debug_loc:00000000000002f5 .LLST3
     /tmp/ccxX3eEc.s:549    .text:0000000000000220 .LBB50
     /tmp/ccxX3eEc.s:560    .text:0000000000000228 .LBE50
     /tmp/ccxX3eEc.s:528    .text:0000000000000214 .LVL40
     /tmp/ccxX3eEc.s:63     .text:0000000000000034 .LBB33
     /tmp/ccxX3eEc.s:80     .text:0000000000000040 .LBE33
     /tmp/ccxX3eEc.s:64     .text:0000000000000034 .LBB34
     /tmp/ccxX3eEc.s:79     .text:0000000000000040 .LBE34
     /tmp/ccxX3eEc.s:446    .text:00000000000001b4 .LBB38
     /tmp/ccxX3eEc.s:458    .text:00000000000001bc .LBE38
     /tmp/ccxX3eEc.s:3206   .debug_loc:0000000000000318 .LLST1
GAS LISTING /tmp/ccxX3eEc.s 			page 26


     /tmp/ccxX3eEc.s:472    .text:00000000000001dc .LBB41
     /tmp/ccxX3eEc.s:480    .text:00000000000001e0 .LBE41
     /tmp/ccxX3eEc.s:3214   .debug_loc:000000000000033c .LLST2
     /tmp/ccxX3eEc.s:104    .text:0000000000000074 .LVL1
     /tmp/ccxX3eEc.s:13     .text:0000000000000000 .LFB36
     /tmp/ccxX3eEc.s:43     .text:0000000000000020 .LFE36
     /tmp/ccxX3eEc.s:3534   .debug_str:00000000000008f3 .LASF148
     /tmp/ccxX3eEc.s:3300   .debug_str:0000000000000146 .LASF138
     /tmp/ccxX3eEc.s:3316   .debug_str:00000000000001e7 .LASF149
     /tmp/ccxX3eEc.s:78     .text:0000000000000040 .LVL0
     /tmp/ccxX3eEc.s:109    .text:0000000000000078 .LVL2
     /tmp/ccxX3eEc.s:178    .text:00000000000000ac .LVL6
     /tmp/ccxX3eEc.s:314    .text:0000000000000120 .LVL18
     /tmp/ccxX3eEc.s:331    .text:0000000000000138 .LVL21
     /tmp/ccxX3eEc.s:349    .text:0000000000000150 .LVL24
     /tmp/ccxX3eEc.s:367    .text:0000000000000168 .LVL27
     /tmp/ccxX3eEc.s:388    .text:0000000000000184 .LVL29
     /tmp/ccxX3eEc.s:406    .text:0000000000000194 .LVL31
     /tmp/ccxX3eEc.s:422    .text:00000000000001a4 .LVL33
     /tmp/ccxX3eEc.s:429    .text:00000000000001ac .LVL34
     /tmp/ccxX3eEc.s:437    .text:00000000000001b4 .LVL35
     /tmp/ccxX3eEc.s:462    .text:00000000000001c4 .LVL37
     /tmp/ccxX3eEc.s:160    .text:00000000000000a0 .LVL3
     /tmp/ccxX3eEc.s:210    .text:00000000000000c8 .LVL11
     /tmp/ccxX3eEc.s:166    .text:00000000000000a4 .LVL4
     /tmp/ccxX3eEc.s:295    .text:000000000000010c .LVL17
     /tmp/ccxX3eEc.s:172    .text:00000000000000a8 .LVL5
     /tmp/ccxX3eEc.s:202    .text:00000000000000bc .LVL10
     /tmp/ccxX3eEc.s:270    .text:0000000000000100 .LVL14
     /tmp/ccxX3eEc.s:279    .text:0000000000000104 .LVL15
     /tmp/ccxX3eEc.s:286    .text:0000000000000108 .LVL16
     /tmp/ccxX3eEc.s:532    .text:0000000000000218 .LVL41
     /tmp/ccxX3eEc.s:541    .text:000000000000021c .LVL42
     /tmp/ccxX3eEc.s:455    .text:00000000000001bc .LVL36
     /tmp/ccxX3eEc.s:471    .text:00000000000001dc .LVL38
     /tmp/ccxX3eEc.s:478    .text:00000000000001e0 .LVL39
     /tmp/ccxX3eEc.s:575    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccxX3eEc.s:112    .text:0000000000000078 .LBB52
     /tmp/ccxX3eEc.s:300    .text:000000000000010c .LBE52
     /tmp/ccxX3eEc.s:318    .text:0000000000000120 .LBB79
     /tmp/ccxX3eEc.s:442    .text:00000000000001b4 .LBE79
     /tmp/ccxX3eEc.s:371    .text:0000000000000168 .LBB59
     /tmp/ccxX3eEc.s:382    .text:000000000000017c .LBE59
     /tmp/ccxX3eEc.s:433    .text:00000000000001ac .LBB60
     /tmp/ccxX3eEc.s:439    .text:00000000000001b4 .LBE60

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator11getInstanceEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB4exitEv
_ZN3TCB8dispatchEv
_ZN3TCB16timeSliceCounterE
GAS LISTING /tmp/ccxX3eEc.s 			page 27


_ZN3TCB7runningE
