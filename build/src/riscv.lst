GAS LISTING /tmp/ccmYpx3W.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB34:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   9:src/riscv.cpp **** #include "../h/mem.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  15              		.loc 1 12 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  23              		.loc 1 13 5
  24              		.loc 1 13 38 is_stmt 0
  25              	 #APP
  26              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 14 5 is_stmt 1
  30              		.loc 1 14 29 is_stmt 0
  31              	# 14 "src/riscv.cpp" 1
  15              	}
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 15 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
  43              	.LFE34:
GAS LISTING /tmp/ccmYpx3W.s 			page 2


  45              		.align	2
  46              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  48              	_ZN5Riscv20handleSupervisorTrapEv:
  49              	.LFB35:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  18:src/riscv.cpp **** {
  50              		.loc 1 18 1 is_stmt 1
  51              		.cfi_startproc
  52 0020 130101F9 		addi	sp,sp,-112
  53              		.cfi_def_cfa_offset 112
  54 0024 23341106 		sd	ra,104(sp)
  55 0028 23308106 		sd	s0,96(sp)
  56 002c 233C9104 		sd	s1,88(sp)
  57              		.cfi_offset 1, -8
  58              		.cfi_offset 8, -16
  59              		.cfi_offset 9, -24
  60 0030 13040107 		addi	s0,sp,112
  61              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp **** 
  20:src/riscv.cpp ****     uint64 scause = r_scause();
  62              		.loc 1 20 5
  63              	.LBB41:
  64              	.LBB42:
  65              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** extern const size_t DEFAULT_STACK_SIZE;
  11:src/../h/riscv.hpp **** extern const time_t DEFAULT_TIME_SLICE;
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register scause
  21:src/../h/riscv.hpp ****     static uint64 r_scause();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register scause
  24:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register sepc
  27:src/../h/riscv.hpp ****     static uint64 r_sepc();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register sepc
  30:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stvec
GAS LISTING /tmp/ccmYpx3W.s 			page 3


  33:src/../h/riscv.hpp ****     static uint64 r_stvec();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stvec
  36:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // read register stval
  39:src/../h/riscv.hpp ****     static uint64 r_stval();
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // write register stval
  42:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     enum BitMaskSip
  45:src/../h/riscv.hpp ****     {
  46:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  47:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  48:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  49:src/../h/riscv.hpp ****     };
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask set register sip
  52:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // mask clear register sip
  55:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // read register sip
  58:src/../h/riscv.hpp ****     static uint64 r_sip();
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // write register sip
  61:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     enum BitMaskSstatus
  64:src/../h/riscv.hpp ****     {
  65:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  66:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  67:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  68:src/../h/riscv.hpp ****     };
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask set register sstatus
  71:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // mask clear register sstatus
  74:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // read register sstatus
  77:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // write register sstatus
  80:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // supervisor trap
  83:src/../h/riscv.hpp ****     static void supervisorTrap();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** private:
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     // supervisor trap handler
  88:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  89:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccmYpx3W.s 			page 4


  90:src/../h/riscv.hpp **** };
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/riscv.hpp **** {
  94:src/../h/riscv.hpp ****     uint64 volatile scause;
  66              		.loc 2 94 5
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  67              		.loc 2 95 5
  68              		.loc 2 95 72 is_stmt 0
  69              	 #APP
  70              	# 95 "src/../h/riscv.hpp" 1
  96              	    return scause;
  71              		csrr a5, scause
  72              	# 0 "" 2
  73              	 #NO_APP
  74 0038 233CF4FA 		sd	a5,-72(s0)
  75              		.loc 2 96 5 is_stmt 1
  76              		.loc 2 96 12 is_stmt 0
  77 003c 033784FB 		ld	a4,-72(s0)
  78              	.LVL0:
  79              	.LBE42:
  80              	.LBE41:
  21:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  81              		.loc 1 21 5 is_stmt 1
  82              	.LBB43:
  83              		.loc 1 21 40 is_stmt 0
  84 0040 930687FF 		addi	a3,a4,-8
  85              		.loc 1 21 5
  86 0044 93071000 		li	a5,1
  87 0048 63F8D702 		bleu	a3,a5,.L26
  88              	.LBE43:
  22:src/riscv.cpp ****     {
  23:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  24:src/riscv.cpp ****         // Should be triggered on syscall.
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****         uint64 a0, a1, a2, a3, a4, a5, a6, a7;
  29:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r"(a0));
  30:src/riscv.cpp ****         __asm__ volatile ("mv %0, a1" : "=r"(a1));
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a2" : "=r"(a2));
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a3" : "=r"(a3));
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a4" : "=r"(a4));
  34:src/riscv.cpp ****         __asm__ volatile ("mv %0, a5" : "=r"(a5));
  35:src/riscv.cpp ****         __asm__ volatile ("mv %0, a6" : "=r"(a6));
  36:src/riscv.cpp ****         __asm__ volatile ("mv %0, a7" : "=r"(a7));
  37:src/riscv.cpp **** 
  38:src/riscv.cpp ****         uint64 res = 0;
  39:src/riscv.cpp ****         switch (a0) {
  40:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
  42:src/riscv.cpp ****                 break;
  43:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
  45:src/riscv.cpp ****                 break;
  46:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
GAS LISTING /tmp/ccmYpx3W.s 			page 5


  48:src/riscv.cpp ****                 break;
  49:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
  51:src/riscv.cpp ****                 break;
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
  53:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
  55:src/riscv.cpp ****                 if (!(*handle))
  56:src/riscv.cpp ****                     res = -1;
  57:src/riscv.cpp ****                 }
  58:src/riscv.cpp ****                 break;
  59:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
  60:src/riscv.cpp ****                 TCB::exit();
  61:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
  62:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
  63:src/riscv.cpp ****                 delete *handle;
  64:src/riscv.cpp ****                 }
  65:src/riscv.cpp ****                 break;
  66:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
  67:src/riscv.cpp ****                 TCB::dispatch();
  68:src/riscv.cpp ****                 break;
  69:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
  70:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
  71:src/riscv.cpp ****                 *handle = (sem_t)Semaphore::open(a2);
  72:src/riscv.cpp ****                 if (!(*handle))
  73:src/riscv.cpp ****                     res = -1;
  74:src/riscv.cpp ****                 }
  75:src/riscv.cpp ****                 break;
  76:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
  77:src/riscv.cpp ****                 // TODO: Double check.
  78:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
  79:src/riscv.cpp ****                 (*handle)->close();
  80:src/riscv.cpp ****                 delete *handle;
  81:src/riscv.cpp ****                 }
  82:src/riscv.cpp ****                 break;
  83:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
  84:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
  85:src/riscv.cpp ****                 res = (*handle)->wait();
  86:src/riscv.cpp ****             }
  87:src/riscv.cpp ****                 break;
  88:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
  89:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
  90:src/riscv.cpp ****                 (*handle)->signal();
  91:src/riscv.cpp ****             }
  92:src/riscv.cpp ****                 break;
  93:src/riscv.cpp ****         }
  94:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
  95:src/riscv.cpp **** 
  96:src/riscv.cpp ****         // Overwrite a0 with the result from the syscall.
  97:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
  98:src/riscv.cpp **** 
  99:src/riscv.cpp ****         w_sstatus(sstatus);
 100:src/riscv.cpp ****         w_sepc(sepc);
 101:src/riscv.cpp ****     }
 102:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  89              		.loc 1 102 10 is_stmt 1
  90              	.LBB106:
GAS LISTING /tmp/ccmYpx3W.s 			page 6


  91              	.LBB44:
  92 004c 9307F0FF 		li	a5,-1
  93 0050 9397F703 		slli	a5,a5,63
  94 0054 93871700 		addi	a5,a5,1
  95 0058 630CF720 		beq	a4,a5,.L27
 103:src/riscv.cpp ****     {
 104:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 105:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 106:src/riscv.cpp ****         TCB::timeSliceCounter++;
 107:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 108:src/riscv.cpp ****         {
 109:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 110:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 111:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 112:src/riscv.cpp ****             TCB::dispatch();
 113:src/riscv.cpp ****             w_sstatus(sstatus);
 114:src/riscv.cpp ****             w_sepc(sepc);
 115:src/riscv.cpp ****         }
 116:src/riscv.cpp ****     }
 117:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  96              		.loc 1 117 10
  97 005c 9307F0FF 		li	a5,-1
  98 0060 9397F703 		slli	a5,a5,63
  99 0064 93879700 		addi	a5,a5,9
 100 0068 6312F70A 		bne	a4,a5,.L3
 118:src/riscv.cpp ****     {
 119:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 120:src/riscv.cpp ****         console_handler();
 101              		.loc 1 120 9
 102              		.loc 1 120 24 is_stmt 0
 103 006c 97000000 		call	console_handler
 103      E7800000 
 104              	.LVL1:
 105              	.LBE44:
 106              	.LBE106:
 121:src/riscv.cpp ****     }
 122:src/riscv.cpp ****     else
 123:src/riscv.cpp ****     {
 124:src/riscv.cpp ****         // unexpected trap cause
 125:src/riscv.cpp ****     }
 126:src/riscv.cpp **** }...
 107              		.loc 1 126 1
 108 0074 6F008009 		j	.L3
 109              	.LVL2:
 110              	.L26:
 111              	.LBB107:
 112              	.LBB60:
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 113              		.loc 1 25 9 is_stmt 1
 114              	.LBB61:
 115              	.LBB62:
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccmYpx3W.s 			page 7


 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile sepc;
 116              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 117              		.loc 2 107 5
 118              		.loc 2 107 64 is_stmt 0
 119              	 #APP
 120              	# 107 "src/../h/riscv.hpp" 1
 108              	    return sepc;
 121              		csrr a5, sepc
 122              	# 0 "" 2
 123              	 #NO_APP
 124 007c 2334F4FC 		sd	a5,-56(s0)
 125              		.loc 2 108 5 is_stmt 1
 126              		.loc 2 108 12 is_stmt 0
 127 0080 833784FC 		ld	a5,-56(s0)
 128              	.LBE62:
 129              	.LBE61:
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 130              		.loc 1 25 41
 131 0084 93874700 		addi	a5,a5,4
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 132              		.loc 1 25 43
 133 0088 233CF4F8 		sd	a5,-104(s0)
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 134              		.loc 1 26 9 is_stmt 1
 135              	.LBB63:
 136              	.LBB64:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/riscv.hpp ****     return stvec;
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stval;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/riscv.hpp ****     return stval;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
GAS LISTING /tmp/ccmYpx3W.s 			page 8


 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/riscv.hpp **** }
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     uint64 volatile sip;
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/riscv.hpp ****     return sip;
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 137              		.loc 2 174 5
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 138              		.loc 2 175 5
 139              		.loc 2 175 76 is_stmt 0
 140              	 #APP
 141              	# 175 "src/../h/riscv.hpp" 1
 176              	    return sstatus;
 142              		csrr a5, sstatus
 143              	# 0 "" 2
 144              	 #NO_APP
 145 0090 2330F4FC 		sd	a5,-64(s0)
 146              		.loc 2 176 5 is_stmt 1
 147              		.loc 2 176 12 is_stmt 0
 148 0094 833704FC 		ld	a5,-64(s0)
 149              	.LBE64:
 150              	.LBE63:
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 151              		.loc 1 26 45
GAS LISTING /tmp/ccmYpx3W.s 			page 9


 152 0098 2330F4FA 		sd	a5,-96(s0)
  28:src/riscv.cpp ****         uint64 a0, a1, a2, a3, a4, a5, a6, a7;
 153              		.loc 1 28 9 is_stmt 1
  29:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r"(a0));
 154              		.loc 1 29 9
  29:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r"(a0));
 155              		.loc 1 29 50 is_stmt 0
 156              	 #APP
 157              	# 29 "src/riscv.cpp" 1
 158              		mv a5, a0
 159              	# 0 "" 2
 160              	.LVL3:
  30:src/riscv.cpp ****         __asm__ volatile ("mv %0, a1" : "=r"(a1));
 161              		.loc 1 30 9 is_stmt 1
  30:src/riscv.cpp ****         __asm__ volatile ("mv %0, a1" : "=r"(a1));
 162              		.loc 1 30 50 is_stmt 0
 163              	# 30 "src/riscv.cpp" 1
 164              		mv s1, a1
 165              	# 0 "" 2
 166              	.LVL4:
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a2" : "=r"(a2));
 167              		.loc 1 31 9 is_stmt 1
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a2" : "=r"(a2));
 168              		.loc 1 31 50 is_stmt 0
 169              	# 31 "src/riscv.cpp" 1
 170              		mv a1, a2
 171              	# 0 "" 2
 172              	.LVL5:
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a3" : "=r"(a3));
 173              		.loc 1 32 9 is_stmt 1
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a3" : "=r"(a3));
 174              		.loc 1 32 50 is_stmt 0
 175              	# 32 "src/riscv.cpp" 1
 176              		mv a4, a3
 177              	# 0 "" 2
 178              	.LVL6:
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a4" : "=r"(a4));
 179              		.loc 1 33 9 is_stmt 1
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a4" : "=r"(a4));
 180              		.loc 1 33 50 is_stmt 0
 181              	# 33 "src/riscv.cpp" 1
 182              		mv a4, a4
 183              	# 0 "" 2
 184              	.LVL7:
  34:src/riscv.cpp ****         __asm__ volatile ("mv %0, a5" : "=r"(a5));
 185              		.loc 1 34 9 is_stmt 1
  34:src/riscv.cpp ****         __asm__ volatile ("mv %0, a5" : "=r"(a5));
 186              		.loc 1 34 50 is_stmt 0
 187              	# 34 "src/riscv.cpp" 1
 188              		mv a4, a5
 189              	# 0 "" 2
 190              	.LVL8:
  35:src/riscv.cpp ****         __asm__ volatile ("mv %0, a6" : "=r"(a6));
 191              		.loc 1 35 9 is_stmt 1
  35:src/riscv.cpp ****         __asm__ volatile ("mv %0, a6" : "=r"(a6));
 192              		.loc 1 35 50 is_stmt 0
 193              	# 35 "src/riscv.cpp" 1
GAS LISTING /tmp/ccmYpx3W.s 			page 10


 194              		mv a4, a6
 195              	# 0 "" 2
 196              	.LVL9:
  36:src/riscv.cpp ****         __asm__ volatile ("mv %0, a7" : "=r"(a7));
 197              		.loc 1 36 9 is_stmt 1
  36:src/riscv.cpp ****         __asm__ volatile ("mv %0, a7" : "=r"(a7));
 198              		.loc 1 36 50 is_stmt 0
 199              	# 36 "src/riscv.cpp" 1
 200              		mv a4, a7
 201              	# 0 "" 2
 202              	.LVL10:
  38:src/riscv.cpp ****         uint64 res = 0;
 203              		.loc 1 38 9 is_stmt 1
  39:src/riscv.cpp ****         switch (a0) {
 204              		.loc 1 39 9
 205              	 #NO_APP
 206              	.LBB65:
 207 00bc 13074002 		li	a4,36
 208 00c0 6368F718 		bgtu	a5,a4,.L21
 209 00c4 93972700 		slli	a5,a5,2
 210              	.LVL11:
 211 00c8 17070000 		lla	a4,.L7
 211      13070700 
 212 00d0 B387E700 		add	a5,a5,a4
 213 00d4 83A70700 		lw	a5,0(a5)
 214 00d8 B387E700 		add	a5,a5,a4
 215 00dc 67800700 		jr	a5
 216              		.section	.rodata
 217              		.align	2
 218              		.align	2
 219              	.L7:
 220 0000 00000000 		.word	.L21-.L7
 221 0004 00000000 		.word	.L17-.L7
 222 0008 00000000 		.word	.L16-.L7
 223 000c 00000000 		.word	.L15-.L7
 224 0010 00000000 		.word	.L14-.L7
 225 0014 00000000 		.word	.L21-.L7
 226 0018 00000000 		.word	.L21-.L7
 227 001c 00000000 		.word	.L21-.L7
 228 0020 00000000 		.word	.L21-.L7
 229 0024 00000000 		.word	.L21-.L7
 230 0028 00000000 		.word	.L21-.L7
 231 002c 00000000 		.word	.L21-.L7
 232 0030 00000000 		.word	.L21-.L7
 233 0034 00000000 		.word	.L21-.L7
 234 0038 00000000 		.word	.L21-.L7
 235 003c 00000000 		.word	.L21-.L7
 236 0040 00000000 		.word	.L21-.L7
 237 0044 00000000 		.word	.L13-.L7
 238 0048 00000000 		.word	.L12-.L7
 239 004c 00000000 		.word	.L11-.L7
 240 0050 00000000 		.word	.L21-.L7
 241 0054 00000000 		.word	.L21-.L7
 242 0058 00000000 		.word	.L21-.L7
 243 005c 00000000 		.word	.L21-.L7
 244 0060 00000000 		.word	.L21-.L7
 245 0064 00000000 		.word	.L21-.L7
GAS LISTING /tmp/ccmYpx3W.s 			page 11


 246 0068 00000000 		.word	.L21-.L7
 247 006c 00000000 		.word	.L21-.L7
 248 0070 00000000 		.word	.L21-.L7
 249 0074 00000000 		.word	.L21-.L7
 250 0078 00000000 		.word	.L21-.L7
 251 007c 00000000 		.word	.L21-.L7
 252 0080 00000000 		.word	.L21-.L7
 253 0084 00000000 		.word	.L10-.L7
 254 0088 00000000 		.word	.L9-.L7
 255 008c 00000000 		.word	.L8-.L7
 256 0090 00000000 		.word	.L6-.L7
 257              		.text
 258              	.L17:
 259              	.LBB66:
  40:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
 260              		.loc 1 40 13
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 261              		.loc 1 41 17
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 262              		.loc 1 41 72 is_stmt 0
 263 00e0 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 263      E7800000 
 264              	.LVL12:
 265 00e8 93850400 		mv	a1,s1
 266 00ec 97000000 		call	_ZN15MemoryAllocator9mem_allocEm
 266      E7800000 
 267              	.LVL13:
  42:src/riscv.cpp ****                 break;
 268              		.loc 1 42 17 is_stmt 1
 269              	.L5:
 270              	.LBE66:
 271              	.LBE65:
  94:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 272              		.loc 1 94 9
  94:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 273              		.loc 1 94 52 is_stmt 0
 274              	 #APP
 275              	# 94 "src/riscv.cpp" 1
  97:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 276              		mv a0, a0
 277              	# 0 "" 2
 278              		.loc 1 97 9 is_stmt 1
  97:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 279              		.loc 1 97 58 is_stmt 0
 280              	# 97 "src/riscv.cpp" 1
  99:src/riscv.cpp ****         w_sstatus(sstatus);
 281              		sd a0, 10*8(x8)
 282              	# 0 "" 2
 283              		.loc 1 99 9 is_stmt 1
  99:src/riscv.cpp ****         w_sstatus(sstatus);
 284              		.loc 1 99 18 is_stmt 0
 285              	 #NO_APP
 286 00fc 833704FA 		ld	a5,-96(s0)
 287              	.LVL14:
 288              	.LBB89:
 289              	.LBB90:
 177:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccmYpx3W.s 			page 12


 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 290              		.loc 2 181 5 is_stmt 1
 291              		.loc 2 181 77 is_stmt 0
 292              	 #APP
 293              	# 181 "src/../h/riscv.hpp" 1
 182              	}
 294              		csrw sstatus, a5
 295              	# 0 "" 2
 296              	.LVL15:
 297              	 #NO_APP
 298              	.LBE90:
 299              	.LBE89:
 100:src/riscv.cpp ****         w_sepc(sepc);
 300              		.loc 1 100 9 is_stmt 1
 100:src/riscv.cpp ****         w_sepc(sepc);
 301              		.loc 1 100 15 is_stmt 0
 302 0104 833784F9 		ld	a5,-104(s0)
 303              	.LVL16:
 304              	.LBB91:
 305              	.LBB92:
 113:src/../h/riscv.hpp **** }
 306              		.loc 2 113 5 is_stmt 1
 113:src/../h/riscv.hpp **** }
 307              		.loc 2 113 65 is_stmt 0
 308              	 #APP
 309              	# 113 "src/../h/riscv.hpp" 1
 310              		csrw sepc, a5
 311              	# 0 "" 2
 312              	.LVL17:
 313              	 #NO_APP
 314              	.L3:
 315              	.LBE92:
 316              	.LBE91:
 317              	.LBE60:
 318              	.LBE107:
 319              		.loc 1 126 1
 320 010c 83308106 		ld	ra,104(sp)
 321              		.cfi_remember_state
 322              		.cfi_restore 1
 323 0110 03340106 		ld	s0,96(sp)
 324              		.cfi_restore 8
 325              		.cfi_def_cfa 2, 112
 326 0114 83348105 		ld	s1,88(sp)
 327              		.cfi_restore 9
 328 0118 13010107 		addi	sp,sp,112
 329              		.cfi_def_cfa_offset 0
 330 011c 67800000 		jr	ra
 331              	.LVL18:
 332              	.L16:
 333              		.cfi_restore_state
 334              	.LBB108:
 335              	.LBB104:
 336              	.LBB93:
 337              	.LBB78:
GAS LISTING /tmp/ccmYpx3W.s 			page 13


  43:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
 338              		.loc 1 43 13 is_stmt 1
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 339              		.loc 1 44 17
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 340              		.loc 1 44 63 is_stmt 0
 341 0120 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 341      E7800000 
 342              	.LVL19:
 343 0128 93850400 		mv	a1,s1
 344 012c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv
 344      E7800000 
 345              	.LVL20:
  45:src/riscv.cpp ****                 break;
 346              		.loc 1 45 17 is_stmt 1
 347 0134 6FF01FFC 		j	.L5
 348              	.LVL21:
 349              	.L15:
  46:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
 350              		.loc 1 46 13
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 351              		.loc 1 47 17
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 352              		.loc 1 47 67 is_stmt 0
 353 0138 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 353      E7800000 
 354              	.LVL22:
 355 0140 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv
 355      E7800000 
 356              	.LVL23:
  48:src/riscv.cpp ****                 break;
 357              		.loc 1 48 17 is_stmt 1
 358              	.LBE78:
 359              	.LBE93:
  38:src/riscv.cpp ****         uint64 res = 0;
 360              		.loc 1 38 16 is_stmt 0
 361 0148 13050000 		li	a0,0
 362              	.LBB94:
 363              	.LBB79:
  48:src/riscv.cpp ****                 break;
 364              		.loc 1 48 17
 365 014c 6FF09FFA 		j	.L5
 366              	.LVL24:
 367              	.L14:
  49:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
 368              		.loc 1 49 13 is_stmt 1
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 369              		.loc 1 50 17
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 370              		.loc 1 50 75 is_stmt 0
 371 0150 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 371      E7800000 
 372              	.LVL25:
 373 0158 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv
 373      E7800000 
 374              	.LVL26:
  51:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccmYpx3W.s 			page 14


 375              		.loc 1 51 17 is_stmt 1
 376              	.LBE79:
 377              	.LBE94:
  38:src/riscv.cpp ****         uint64 res = 0;
 378              		.loc 1 38 16 is_stmt 0
 379 0160 13050000 		li	a0,0
 380              	.LBB95:
 381              	.LBB80:
  51:src/riscv.cpp ****                 break;
 382              		.loc 1 51 17
 383 0164 6FF01FF9 		j	.L5
 384              	.LVL27:
 385              	.L13:
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 386              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 387              		.loc 1 52 46
 388              	.LBB67:
  53:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 389              		.loc 1 53 17
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
 390              		.loc 1 54 17
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
 391              		.loc 1 54 54 is_stmt 0
 392 0168 13850400 		mv	a0,s1
 393 016c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_
 393      E7800000 
 394              	.LVL28:
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a1, (void*)a2);
 395              		.loc 1 54 25
 396 0174 23B0A400 		sd	a0,0(s1)
  55:src/riscv.cpp ****                 if (!(*handle))
 397              		.loc 1 55 17 is_stmt 1
 398 0178 6300050E 		beq	a0,zero,.L22
 399              	.LBE67:
 400              	.LBE80:
 401              	.LBE95:
  38:src/riscv.cpp ****         uint64 res = 0;
 402              		.loc 1 38 16 is_stmt 0
 403 017c 13050000 		li	a0,0
 404 0180 6FF05FF7 		j	.L5
 405              	.LVL29:
 406              	.L12:
 407              	.LBB96:
 408              	.LBB81:
  59:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
 409              		.loc 1 59 13 is_stmt 1
  59:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
 410              		.loc 1 59 44
 411              	.LBB68:
  60:src/riscv.cpp ****                 TCB::exit();
 412              		.loc 1 60 17
  60:src/riscv.cpp ****                 TCB::exit();
 413              		.loc 1 60 26 is_stmt 0
 414 0184 97000000 		call	_ZN3TCB4exitEv
 414      E7800000 
 415              	.LVL30:
GAS LISTING /tmp/ccmYpx3W.s 			page 15


  61:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 416              		.loc 1 61 17 is_stmt 1
  62:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 417              		.loc 1 62 17
  62:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 418              		.loc 1 62 24 is_stmt 0
 419 018c 83B70400 		ld	a5,0(s1)
  62:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 420              		.loc 1 62 23
 421 0190 17070000 		lla	a4,_ZN3TCB7runningE
 421      13070700 
 422 0198 03350700 		ld	a0,0(a4)
 423 019c 3305F540 		sub	a0,a0,a5
 424 01a0 97050000 		lla	a1,.LC0
 424      93850500 
 425 01a8 13351500 		seqz	a0,a0
 426 01ac 97000000 		call	_Z6assertbPKc
 426      E7800000 
 427              	.LVL31:
  63:src/riscv.cpp ****                 delete *handle;
 428              		.loc 1 63 17 is_stmt 1
  63:src/riscv.cpp ****                 delete *handle;
 429              		.loc 1 63 24 is_stmt 0
 430 01b4 83B40400 		ld	s1,0(s1)
 431              	.LVL32:
  63:src/riscv.cpp ****                 delete *handle;
 432              		.loc 1 63 31
 433 01b8 6384040A 		beq	s1,zero,.L23
 434              	.LVL33:
 435              	.LBB69:
 436              	.LBB70:
 437              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
 438              		.loc 3 15 14 is_stmt 1
 439              		.loc 3 15 23 is_stmt 0
 440 01bc 03B50401 		ld	a0,16(s1)
 441              		.loc 3 15 28
 442 01c0 63060500 		beq	a0,zero,.L18
 443              		.loc 3 15 23
 444 01c4 97000000 		call	_ZdaPv
 444      E7800000 
 445              	.LVL34:
 446              	.L18:
GAS LISTING /tmp/ccmYpx3W.s 			page 16


 447              	.LBE70:
 448              	.LBE69:
  63:src/riscv.cpp ****                 delete *handle;
 449              		.loc 1 63 25
 450 01cc 13850400 		mv	a0,s1
 451 01d0 97000000 		call	_ZdlPv
 451      E7800000 
 452              	.LVL35:
 453              	.LBE68:
 454              	.LBE81:
 455              	.LBE96:
  38:src/riscv.cpp ****         uint64 res = 0;
 456              		.loc 1 38 16
 457 01d8 13050000 		li	a0,0
 458              	.LBB97:
 459              	.LBB82:
 460              	.LBB71:
 461 01dc 6FF09FF1 		j	.L5
 462              	.LVL36:
 463              	.L11:
 464              	.LBE71:
  66:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
 465              		.loc 1 66 13 is_stmt 1
  67:src/riscv.cpp ****                 TCB::dispatch();
 466              		.loc 1 67 17
  67:src/riscv.cpp ****                 TCB::dispatch();
 467              		.loc 1 67 30 is_stmt 0
 468 01e0 97000000 		call	_ZN3TCB8dispatchEv
 468      E7800000 
 469              	.LVL37:
  68:src/riscv.cpp ****                 break;
 470              		.loc 1 68 17 is_stmt 1
 471              	.LBE82:
 472              	.LBE97:
  38:src/riscv.cpp ****         uint64 res = 0;
 473              		.loc 1 38 16 is_stmt 0
 474 01e8 13050000 		li	a0,0
 475              	.LBB98:
 476              	.LBB83:
  68:src/riscv.cpp ****                 break;
 477              		.loc 1 68 17
 478 01ec 6FF09FF0 		j	.L5
 479              	.LVL38:
 480              	.L10:
  69:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
 481              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
 482              		.loc 1 69 41
 483              	.LBB72:
  70:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
 484              		.loc 1 70 17
  71:src/riscv.cpp ****                 *handle = (sem_t)Semaphore::open(a2);
 485              		.loc 1 71 17
  71:src/riscv.cpp ****                 *handle = (sem_t)Semaphore::open(a2);
 486              		.loc 1 71 49 is_stmt 0
 487 01f0 1B850500 		sext.w	a0,a1
 488 01f4 97000000 		call	_ZN9Semaphore4openEj
GAS LISTING /tmp/ccmYpx3W.s 			page 17


 488      E7800000 
 489              	.LVL39:
  71:src/riscv.cpp ****                 *handle = (sem_t)Semaphore::open(a2);
 490              		.loc 1 71 25
 491 01fc 23B0A400 		sd	a0,0(s1)
  72:src/riscv.cpp ****                 if (!(*handle))
 492              		.loc 1 72 17 is_stmt 1
 493 0200 63040506 		beq	a0,zero,.L24
 494              	.LBE72:
 495              	.LBE83:
 496              	.LBE98:
  38:src/riscv.cpp ****         uint64 res = 0;
 497              		.loc 1 38 16 is_stmt 0
 498 0204 13050000 		li	a0,0
 499 0208 6FF0DFEE 		j	.L5
 500              	.LVL40:
 501              	.L9:
 502              	.LBB99:
 503              	.LBB84:
  76:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
 504              		.loc 1 76 13 is_stmt 1
  76:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
 505              		.loc 1 76 42
 506              	.LBB73:
  78:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
 507              		.loc 1 78 17
  79:src/riscv.cpp ****                 (*handle)->close();
 508              		.loc 1 79 17
  79:src/riscv.cpp ****                 (*handle)->close();
 509              		.loc 1 79 33 is_stmt 0
 510 020c 03B50400 		ld	a0,0(s1)
 511 0210 97000000 		call	_ZN9Semaphore5closeEv
 511      E7800000 
 512              	.LVL41:
  80:src/riscv.cpp ****                 delete *handle;
 513              		.loc 1 80 17 is_stmt 1
  80:src/riscv.cpp ****                 delete *handle;
 514              		.loc 1 80 25 is_stmt 0
 515 0218 03B50400 		ld	a0,0(s1)
 516 021c 97000000 		call	_ZdlPv
 516      E7800000 
 517              	.LVL42:
 518              	.LBE73:
  82:src/riscv.cpp ****                 break;
 519              		.loc 1 82 17 is_stmt 1
 520              	.LBE84:
 521              	.LBE99:
  38:src/riscv.cpp ****         uint64 res = 0;
 522              		.loc 1 38 16 is_stmt 0
 523 0224 13050000 		li	a0,0
 524              	.LBB100:
 525              	.LBB85:
  82:src/riscv.cpp ****                 break;
 526              		.loc 1 82 17
 527 0228 6FF0DFEC 		j	.L5
 528              	.LVL43:
 529              	.L8:
GAS LISTING /tmp/ccmYpx3W.s 			page 18


  83:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
 530              		.loc 1 83 13 is_stmt 1
  83:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
 531              		.loc 1 83 41
 532              	.LBB74:
  84:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
 533              		.loc 1 84 17
  85:src/riscv.cpp ****                 res = (*handle)->wait();
 534              		.loc 1 85 17
  85:src/riscv.cpp ****                 res = (*handle)->wait();
 535              		.loc 1 85 38 is_stmt 0
 536 022c 03B50400 		ld	a0,0(s1)
 537 0230 97000000 		call	_ZN9Semaphore4waitEv
 537      E7800000 
 538              	.LVL44:
 539              	.LBE74:
  87:src/riscv.cpp ****                 break;
 540              		.loc 1 87 17 is_stmt 1
 541 0238 6FF0DFEB 		j	.L5
 542              	.LVL45:
 543              	.L6:
  88:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 544              		.loc 1 88 13
  88:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 545              		.loc 1 88 43
 546              	.LBB75:
  89:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
 547              		.loc 1 89 17
  90:src/riscv.cpp ****                 (*handle)->signal();
 548              		.loc 1 90 17
  90:src/riscv.cpp ****                 (*handle)->signal();
 549              		.loc 1 90 34 is_stmt 0
 550 023c 03B50400 		ld	a0,0(s1)
 551 0240 97000000 		call	_ZN9Semaphore6signalEv
 551      E7800000 
 552              	.LVL46:
 553              	.LBE75:
  92:src/riscv.cpp ****                 break;
 554              		.loc 1 92 17 is_stmt 1
 555              	.LBE85:
 556              	.LBE100:
  38:src/riscv.cpp ****         uint64 res = 0;
 557              		.loc 1 38 16 is_stmt 0
 558 0248 13050000 		li	a0,0
 559              	.LBB101:
 560              	.LBB86:
  92:src/riscv.cpp ****                 break;
 561              		.loc 1 92 17
 562 024c 6FF09FEA 		j	.L5
 563              	.LVL47:
 564              	.L21:
 565              	.LBE86:
 566              	.LBE101:
  38:src/riscv.cpp ****         uint64 res = 0;
 567              		.loc 1 38 16
 568 0250 13050000 		li	a0,0
 569 0254 6FF01FEA 		j	.L5
GAS LISTING /tmp/ccmYpx3W.s 			page 19


 570              	.LVL48:
 571              	.L22:
 572              	.LBB102:
 573              	.LBB87:
 574              	.LBB76:
  56:src/riscv.cpp ****                     res = -1;
 575              		.loc 1 56 25
 576 0258 1305F0FF 		li	a0,-1
 577 025c 6FF09FE9 		j	.L5
 578              	.LVL49:
 579              	.L23:
 580              	.LBE76:
 581              	.LBE87:
 582              	.LBE102:
  38:src/riscv.cpp ****         uint64 res = 0;
 583              		.loc 1 38 16
 584 0260 13050000 		li	a0,0
 585 0264 6FF01FE9 		j	.L5
 586              	.LVL50:
 587              	.L24:
 588              	.LBB103:
 589              	.LBB88:
 590              	.LBB77:
  73:src/riscv.cpp ****                     res = -1;
 591              		.loc 1 73 25
 592 0268 1305F0FF 		li	a0,-1
 593 026c 6FF09FE8 		j	.L5
 594              	.LVL51:
 595              	.L27:
 596              	.LBE77:
 597              	.LBE88:
 598              	.LBE103:
 599              	.LBE104:
 600              	.LBB105:
 601              	.LBB45:
 105:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 602              		.loc 1 105 9 is_stmt 1
 603              	.LBB46:
 604              	.LBB47:
 147:src/../h/riscv.hpp **** }
 605              		.loc 2 147 5
 147:src/../h/riscv.hpp **** }
 606              		.loc 2 147 64 is_stmt 0
 607 0270 93072000 		li	a5,2
 608              	 #APP
 609              	# 147 "src/../h/riscv.hpp" 1
 610              		csrc sip, a5
 611              	# 0 "" 2
 612              	.LVL52:
 613              	 #NO_APP
 614              	.LBE47:
 615              	.LBE46:
 106:src/riscv.cpp ****         TCB::timeSliceCounter++;
 616              		.loc 1 106 9 is_stmt 1
 106:src/riscv.cpp ****         TCB::timeSliceCounter++;
 617              		.loc 1 106 30 is_stmt 0
 618 0278 17070000 		lla	a4,_ZN3TCB16timeSliceCounterE
GAS LISTING /tmp/ccmYpx3W.s 			page 20


 618      13070700 
 619              	.LVL53:
 620 0280 83370700 		ld	a5,0(a4)
 621 0284 93871700 		addi	a5,a5,1
 622 0288 2330F700 		sd	a5,0(a4)
 107:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 623              		.loc 1 107 9 is_stmt 1
 624              	.LBB48:
 107:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 625              		.loc 1 107 64 is_stmt 0
 626 028c 17070000 		lla	a4,_ZN3TCB7runningE
 626      13070700 
 627 0294 03370700 		ld	a4,0(a4)
 628              	.LVL54:
 629              	.LBB49:
 630              	.LBB50:
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     void block() { blocked_ = true; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void unblock() { blocked_ = false; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     bool isBlocked() { return blocked_; }
  22:src/../h/tcb.hpp **** 
  23:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 631              		.loc 3 23 35 is_stmt 1
 632              		.loc 3 23 42 is_stmt 0
 633 0298 03378702 		ld	a4,40(a4)
 634              	.LVL55:
 635              	.LBE50:
 636              	.LBE49:
 107:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 637              		.loc 1 107 9
 638 029c E3E8E7E6 		bltu	a5,a4,.L3
 639              	.LBB51:
 109:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 640              		.loc 1 109 13 is_stmt 1
 641              	.LBB52:
 642              	.LBB53:
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 643              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     return sepc;
 644              		.loc 2 107 5
 107:src/../h/riscv.hpp ****     return sepc;
 645              		.loc 2 107 64 is_stmt 0
 646              	 #APP
 647              	# 107 "src/../h/riscv.hpp" 1
 648              		csrr a5, sepc
 649              	# 0 "" 2
 650              	 #NO_APP
 651 02a4 233CF4FC 		sd	a5,-40(s0)
 108:src/../h/riscv.hpp **** }
 652              		.loc 2 108 5 is_stmt 1
 108:src/../h/riscv.hpp **** }
 653              		.loc 2 108 12 is_stmt 0
 654 02a8 833784FD 		ld	a5,-40(s0)
 655              	.LBE53:
 656              	.LBE52:
GAS LISTING /tmp/ccmYpx3W.s 			page 21


 109:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 657              		.loc 1 109 43
 658 02ac 2334F4FA 		sd	a5,-88(s0)
 110:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 659              		.loc 1 110 13 is_stmt 1
 660              	.LBB54:
 661              	.LBB55:
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 662              		.loc 2 174 5
 175:src/../h/riscv.hpp ****     return sstatus;
 663              		.loc 2 175 5
 175:src/../h/riscv.hpp ****     return sstatus;
 664              		.loc 2 175 76 is_stmt 0
 665              	 #APP
 666              	# 175 "src/../h/riscv.hpp" 1
 667              		csrr a5, sstatus
 668              	# 0 "" 2
 669              	 #NO_APP
 670 02b4 2338F4FC 		sd	a5,-48(s0)
 176:src/../h/riscv.hpp **** }
 671              		.loc 2 176 5 is_stmt 1
 176:src/../h/riscv.hpp **** }
 672              		.loc 2 176 12 is_stmt 0
 673 02b8 833704FD 		ld	a5,-48(s0)
 674              	.LBE55:
 675              	.LBE54:
 110:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 676              		.loc 1 110 49
 677 02bc 2338F4FA 		sd	a5,-80(s0)
 111:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 678              		.loc 1 111 13 is_stmt 1
 111:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 679              		.loc 1 111 35 is_stmt 0
 680 02c0 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 680      23B00700 
 112:src/riscv.cpp ****             TCB::dispatch();
 681              		.loc 1 112 13 is_stmt 1
 112:src/riscv.cpp ****             TCB::dispatch();
 682              		.loc 1 112 26 is_stmt 0
 683 02c8 97000000 		call	_ZN3TCB8dispatchEv
 683      E7800000 
 684              	.LVL56:
 113:src/riscv.cpp ****             w_sstatus(sstatus);
 685              		.loc 1 113 13 is_stmt 1
 113:src/riscv.cpp ****             w_sstatus(sstatus);
 686              		.loc 1 113 22 is_stmt 0
 687 02d0 833704FB 		ld	a5,-80(s0)
 688              	.LVL57:
 689              	.LBB56:
 690              	.LBB57:
 181:src/../h/riscv.hpp **** }
 691              		.loc 2 181 5 is_stmt 1
 181:src/../h/riscv.hpp **** }
 692              		.loc 2 181 77 is_stmt 0
 693              	 #APP
 694              	# 181 "src/../h/riscv.hpp" 1
 695              		csrw sstatus, a5
GAS LISTING /tmp/ccmYpx3W.s 			page 22


 696              	# 0 "" 2
 697              	.LVL58:
 698              	 #NO_APP
 699              	.LBE57:
 700              	.LBE56:
 114:src/riscv.cpp ****             w_sepc(sepc);
 701              		.loc 1 114 13 is_stmt 1
 114:src/riscv.cpp ****             w_sepc(sepc);
 702              		.loc 1 114 19 is_stmt 0
 703 02d8 833784FA 		ld	a5,-88(s0)
 704              	.LVL59:
 705              	.LBB58:
 706              	.LBB59:
 113:src/../h/riscv.hpp **** }
 707              		.loc 2 113 5 is_stmt 1
 113:src/../h/riscv.hpp **** }
 708              		.loc 2 113 65 is_stmt 0
 709              	 #APP
 710              	# 113 "src/../h/riscv.hpp" 1
 711              		csrw sepc, a5
 712              	# 0 "" 2
 713              	 #NO_APP
 714 02e0 6FF0DFE2 		j	.L3
 715              	.LBE59:
 716              	.LBE58:
 717              	.LBE51:
 718              	.LBE48:
 719              	.LBE45:
 720              	.LBE105:
 721              	.LBE108:
 722              		.cfi_endproc
 723              	.LFE35:
 725              		.section	.rodata.str1.8,"aMS",@progbits,1
 726              		.align	3
 727              	.LC0:
 728 0000 54687265 		.string	"Thread exit should be called by the running thread"
 728      61642065 
 728      78697420 
 728      73686F75 
 728      6C642062 
 729              		.text
 730              	.Letext0:
 731              		.file 4 "src/../h/../lib/hw.h"
 732              		.file 5 "src/../h/list.hpp"
 733              		.file 6 "src/../h/semaphore.hpp"
 734              		.file 7 "src/../h/syscall_c.hpp"
 735              		.file 8 "src/../h/mem.hpp"
 736              		.file 9 "src/../h/print.hpp"
 737              		.file 10 "src/../lib/console.h"
GAS LISTING /tmp/ccmYpx3W.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccmYpx3W.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccmYpx3W.s:16     .text:0000000000000000 .L0 
     /tmp/ccmYpx3W.s:17     .text:0000000000000000 .L0 
     /tmp/ccmYpx3W.s:18     .text:0000000000000004 .L0 
     /tmp/ccmYpx3W.s:20     .text:0000000000000008 .L0 
     /tmp/ccmYpx3W.s:22     .text:000000000000000c .L0 
     /tmp/ccmYpx3W.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccmYpx3W.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccmYpx3W.s:36     .text:0000000000000014 .L0 
     /tmp/ccmYpx3W.s:37     .text:0000000000000018 .L0 
     /tmp/ccmYpx3W.s:38     .text:0000000000000018 .L0 
     /tmp/ccmYpx3W.s:40     .text:000000000000001c .L0 
     /tmp/ccmYpx3W.s:42     .text:0000000000000020 .L0 
     /tmp/ccmYpx3W.s:48     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccmYpx3W.s:51     .text:0000000000000020 .L0 
     /tmp/ccmYpx3W.s:52     .text:0000000000000020 .L0 
     /tmp/ccmYpx3W.s:53     .text:0000000000000024 .L0 
     /tmp/ccmYpx3W.s:57     .text:0000000000000030 .L0 
     /tmp/ccmYpx3W.s:58     .text:0000000000000030 .L0 
     /tmp/ccmYpx3W.s:59     .text:0000000000000030 .L0 
     /tmp/ccmYpx3W.s:61     .text:0000000000000034 .L0 
     /tmp/ccmYpx3W.s:66     .text:0000000000000034 .L0 
     /tmp/ccmYpx3W.s:67     .text:0000000000000034 .L0 
     /tmp/ccmYpx3W.s:68     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:95     .text:0000000000000034 .L0 
     /tmp/ccmYpx3W.s:76     .text:000000000000003c .L0 
     /tmp/ccmYpx3W.s:77     .text:000000000000003c .L0 
     /tmp/ccmYpx3W.s:83     .text:0000000000000040 .L0 
     /tmp/ccmYpx3W.s:84     .text:0000000000000040 .L0 
     /tmp/ccmYpx3W.s:86     .text:0000000000000044 .L0 
     /tmp/ccmYpx3W.s:92     .text:000000000000004c .L0 
     /tmp/ccmYpx3W.s:97     .text:000000000000005c .L0 
     /tmp/ccmYpx3W.s:102    .text:000000000000006c .L0 
     /tmp/ccmYpx3W.s:103    .text:000000000000006c .L0 
     /tmp/ccmYpx3W.s:108    .text:0000000000000074 .L0 
     /tmp/ccmYpx3W.s:116    .text:0000000000000078 .L0 
     /tmp/ccmYpx3W.s:117    .text:0000000000000078 .L0 
     /tmp/ccmYpx3W.s:118    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000078 .L0 
     /tmp/ccmYpx3W.s:126    .text:0000000000000080 .L0 
     /tmp/ccmYpx3W.s:127    .text:0000000000000080 .L0 
     /tmp/ccmYpx3W.s:131    .text:0000000000000084 .L0 
     /tmp/ccmYpx3W.s:133    .text:0000000000000088 .L0 
     /tmp/ccmYpx3W.s:137    .text:000000000000008c .L0 
     /tmp/ccmYpx3W.s:138    .text:000000000000008c .L0 
     /tmp/ccmYpx3W.s:139    .text:000000000000008c .L0 
  src/../h/riscv.hpp:175    .text:000000000000008c .L0 
     /tmp/ccmYpx3W.s:147    .text:0000000000000094 .L0 
     /tmp/ccmYpx3W.s:148    .text:0000000000000094 .L0 
     /tmp/ccmYpx3W.s:152    .text:0000000000000098 .L0 
     /tmp/ccmYpx3W.s:154    .text:000000000000009c .L0 
     /tmp/ccmYpx3W.s:155    .text:000000000000009c .L0 
       src/riscv.cpp:29     .text:000000000000009c .L0 
GAS LISTING /tmp/ccmYpx3W.s 			page 24


     /tmp/ccmYpx3W.s:162    .text:00000000000000a0 .L0 
       src/riscv.cpp:30     .text:00000000000000a0 .L0 
     /tmp/ccmYpx3W.s:168    .text:00000000000000a4 .L0 
       src/riscv.cpp:31     .text:00000000000000a4 .L0 
     /tmp/ccmYpx3W.s:174    .text:00000000000000a8 .L0 
       src/riscv.cpp:32     .text:00000000000000a8 .L0 
     /tmp/ccmYpx3W.s:180    .text:00000000000000ac .L0 
       src/riscv.cpp:33     .text:00000000000000ac .L0 
     /tmp/ccmYpx3W.s:186    .text:00000000000000b0 .L0 
       src/riscv.cpp:34     .text:00000000000000b0 .L0 
     /tmp/ccmYpx3W.s:192    .text:00000000000000b4 .L0 
       src/riscv.cpp:35     .text:00000000000000b4 .L0 
     /tmp/ccmYpx3W.s:198    .text:00000000000000b8 .L0 
       src/riscv.cpp:36     .text:00000000000000b8 .L0 
     /tmp/ccmYpx3W.s:204    .text:00000000000000bc .L0 
     /tmp/ccmYpx3W.s:207    .text:00000000000000bc .L0 
     /tmp/ccmYpx3W.s:261    .text:00000000000000e0 .L0 
     /tmp/ccmYpx3W.s:262    .text:00000000000000e0 .L0 
     /tmp/ccmYpx3W.s:263    .text:00000000000000e0 .L0 
     /tmp/ccmYpx3W.s:272    .text:00000000000000f4 .L0 
     /tmp/ccmYpx3W.s:273    .text:00000000000000f4 .L0 
       src/riscv.cpp:94     .text:00000000000000f4 .L0 
     /tmp/ccmYpx3W.s:279    .text:00000000000000f8 .L0 
       src/riscv.cpp:97     .text:00000000000000f8 .L0 
     /tmp/ccmYpx3W.s:284    .text:00000000000000fc .L0 
     /tmp/ccmYpx3W.s:286    .text:00000000000000fc .L0 
     /tmp/ccmYpx3W.s:291    .text:0000000000000100 .L0 
  src/../h/riscv.hpp:181    .text:0000000000000100 .L0 
     /tmp/ccmYpx3W.s:301    .text:0000000000000104 .L0 
     /tmp/ccmYpx3W.s:302    .text:0000000000000104 .L0 
     /tmp/ccmYpx3W.s:307    .text:0000000000000108 .L0 
  src/../h/riscv.hpp:113    .text:0000000000000108 .L0 
     /tmp/ccmYpx3W.s:320    .text:000000000000010c .L0 
     /tmp/ccmYpx3W.s:321    .text:0000000000000110 .L0 
     /tmp/ccmYpx3W.s:322    .text:0000000000000110 .L0 
     /tmp/ccmYpx3W.s:324    .text:0000000000000114 .L0 
     /tmp/ccmYpx3W.s:325    .text:0000000000000114 .L0 
     /tmp/ccmYpx3W.s:327    .text:0000000000000118 .L0 
     /tmp/ccmYpx3W.s:329    .text:000000000000011c .L0 
     /tmp/ccmYpx3W.s:333    .text:0000000000000120 .L0 
     /tmp/ccmYpx3W.s:339    .text:0000000000000120 .L0 
     /tmp/ccmYpx3W.s:340    .text:0000000000000120 .L0 
     /tmp/ccmYpx3W.s:341    .text:0000000000000120 .L0 
     /tmp/ccmYpx3W.s:347    .text:0000000000000134 .L0 
     /tmp/ccmYpx3W.s:351    .text:0000000000000138 .L0 
     /tmp/ccmYpx3W.s:352    .text:0000000000000138 .L0 
     /tmp/ccmYpx3W.s:353    .text:0000000000000138 .L0 
     /tmp/ccmYpx3W.s:360    .text:0000000000000148 .L0 
     /tmp/ccmYpx3W.s:361    .text:0000000000000148 .L0 
     /tmp/ccmYpx3W.s:365    .text:000000000000014c .L0 
     /tmp/ccmYpx3W.s:369    .text:0000000000000150 .L0 
     /tmp/ccmYpx3W.s:370    .text:0000000000000150 .L0 
     /tmp/ccmYpx3W.s:371    .text:0000000000000150 .L0 
     /tmp/ccmYpx3W.s:378    .text:0000000000000160 .L0 
     /tmp/ccmYpx3W.s:379    .text:0000000000000160 .L0 
     /tmp/ccmYpx3W.s:383    .text:0000000000000164 .L0 
     /tmp/ccmYpx3W.s:387    .text:0000000000000168 .L0 
GAS LISTING /tmp/ccmYpx3W.s 			page 25


     /tmp/ccmYpx3W.s:389    .text:0000000000000168 .L0 
     /tmp/ccmYpx3W.s:390    .text:0000000000000168 .L0 
     /tmp/ccmYpx3W.s:391    .text:0000000000000168 .L0 
     /tmp/ccmYpx3W.s:392    .text:0000000000000168 .L0 
     /tmp/ccmYpx3W.s:396    .text:0000000000000174 .L0 
     /tmp/ccmYpx3W.s:398    .text:0000000000000178 .L0 
     /tmp/ccmYpx3W.s:403    .text:000000000000017c .L0 
     /tmp/ccmYpx3W.s:410    .text:0000000000000184 .L0 
     /tmp/ccmYpx3W.s:412    .text:0000000000000184 .L0 
     /tmp/ccmYpx3W.s:413    .text:0000000000000184 .L0 
     /tmp/ccmYpx3W.s:414    .text:0000000000000184 .L0 
     /tmp/ccmYpx3W.s:417    .text:000000000000018c .L0 
     /tmp/ccmYpx3W.s:418    .text:000000000000018c .L0 
     /tmp/ccmYpx3W.s:419    .text:000000000000018c .L0 
     /tmp/ccmYpx3W.s:421    .text:0000000000000190 .L0 
     /tmp/ccmYpx3W.s:429    .text:00000000000001b4 .L0 
     /tmp/ccmYpx3W.s:430    .text:00000000000001b4 .L0 
     /tmp/ccmYpx3W.s:433    .text:00000000000001b8 .L0 
     /tmp/ccmYpx3W.s:439    .text:00000000000001bc .L0 
     /tmp/ccmYpx3W.s:440    .text:00000000000001bc .L0 
     /tmp/ccmYpx3W.s:442    .text:00000000000001c0 .L0 
     /tmp/ccmYpx3W.s:444    .text:00000000000001c4 .L0 
     /tmp/ccmYpx3W.s:450    .text:00000000000001cc .L0 
     /tmp/ccmYpx3W.s:457    .text:00000000000001d8 .L0 
     /tmp/ccmYpx3W.s:466    .text:00000000000001e0 .L0 
     /tmp/ccmYpx3W.s:467    .text:00000000000001e0 .L0 
     /tmp/ccmYpx3W.s:468    .text:00000000000001e0 .L0 
     /tmp/ccmYpx3W.s:473    .text:00000000000001e8 .L0 
     /tmp/ccmYpx3W.s:474    .text:00000000000001e8 .L0 
     /tmp/ccmYpx3W.s:478    .text:00000000000001ec .L0 
     /tmp/ccmYpx3W.s:482    .text:00000000000001f0 .L0 
     /tmp/ccmYpx3W.s:484    .text:00000000000001f0 .L0 
     /tmp/ccmYpx3W.s:485    .text:00000000000001f0 .L0 
     /tmp/ccmYpx3W.s:486    .text:00000000000001f0 .L0 
     /tmp/ccmYpx3W.s:487    .text:00000000000001f0 .L0 
     /tmp/ccmYpx3W.s:491    .text:00000000000001fc .L0 
     /tmp/ccmYpx3W.s:493    .text:0000000000000200 .L0 
     /tmp/ccmYpx3W.s:498    .text:0000000000000204 .L0 
     /tmp/ccmYpx3W.s:505    .text:000000000000020c .L0 
     /tmp/ccmYpx3W.s:507    .text:000000000000020c .L0 
     /tmp/ccmYpx3W.s:508    .text:000000000000020c .L0 
     /tmp/ccmYpx3W.s:509    .text:000000000000020c .L0 
     /tmp/ccmYpx3W.s:510    .text:000000000000020c .L0 
     /tmp/ccmYpx3W.s:514    .text:0000000000000218 .L0 
     /tmp/ccmYpx3W.s:515    .text:0000000000000218 .L0 
     /tmp/ccmYpx3W.s:522    .text:0000000000000224 .L0 
     /tmp/ccmYpx3W.s:523    .text:0000000000000224 .L0 
     /tmp/ccmYpx3W.s:527    .text:0000000000000228 .L0 
     /tmp/ccmYpx3W.s:531    .text:000000000000022c .L0 
     /tmp/ccmYpx3W.s:533    .text:000000000000022c .L0 
     /tmp/ccmYpx3W.s:534    .text:000000000000022c .L0 
     /tmp/ccmYpx3W.s:535    .text:000000000000022c .L0 
     /tmp/ccmYpx3W.s:536    .text:000000000000022c .L0 
     /tmp/ccmYpx3W.s:541    .text:0000000000000238 .L0 
     /tmp/ccmYpx3W.s:545    .text:000000000000023c .L0 
     /tmp/ccmYpx3W.s:547    .text:000000000000023c .L0 
     /tmp/ccmYpx3W.s:548    .text:000000000000023c .L0 
GAS LISTING /tmp/ccmYpx3W.s 			page 26


     /tmp/ccmYpx3W.s:549    .text:000000000000023c .L0 
     /tmp/ccmYpx3W.s:550    .text:000000000000023c .L0 
     /tmp/ccmYpx3W.s:557    .text:0000000000000248 .L0 
     /tmp/ccmYpx3W.s:558    .text:0000000000000248 .L0 
     /tmp/ccmYpx3W.s:562    .text:000000000000024c .L0 
     /tmp/ccmYpx3W.s:568    .text:0000000000000250 .L0 
     /tmp/ccmYpx3W.s:576    .text:0000000000000258 .L0 
     /tmp/ccmYpx3W.s:584    .text:0000000000000260 .L0 
     /tmp/ccmYpx3W.s:592    .text:0000000000000268 .L0 
     /tmp/ccmYpx3W.s:605    .text:0000000000000270 .L0 
     /tmp/ccmYpx3W.s:606    .text:0000000000000270 .L0 
     /tmp/ccmYpx3W.s:607    .text:0000000000000270 .L0 
     /tmp/ccmYpx3W.s:617    .text:0000000000000278 .L0 
     /tmp/ccmYpx3W.s:618    .text:0000000000000278 .L0 
     /tmp/ccmYpx3W.s:625    .text:000000000000028c .L0 
     /tmp/ccmYpx3W.s:626    .text:000000000000028c .L0 
     /tmp/ccmYpx3W.s:632    .text:0000000000000298 .L0 
     /tmp/ccmYpx3W.s:633    .text:0000000000000298 .L0 
     /tmp/ccmYpx3W.s:638    .text:000000000000029c .L0 
     /tmp/ccmYpx3W.s:643    .text:00000000000002a0 .L0 
     /tmp/ccmYpx3W.s:644    .text:00000000000002a0 .L0 
     /tmp/ccmYpx3W.s:645    .text:00000000000002a0 .L0 
  src/../h/riscv.hpp:107    .text:00000000000002a0 .L0 
     /tmp/ccmYpx3W.s:653    .text:00000000000002a8 .L0 
     /tmp/ccmYpx3W.s:654    .text:00000000000002a8 .L0 
     /tmp/ccmYpx3W.s:658    .text:00000000000002ac .L0 
     /tmp/ccmYpx3W.s:662    .text:00000000000002b0 .L0 
     /tmp/ccmYpx3W.s:663    .text:00000000000002b0 .L0 
     /tmp/ccmYpx3W.s:664    .text:00000000000002b0 .L0 
  src/../h/riscv.hpp:175    .text:00000000000002b0 .L0 
     /tmp/ccmYpx3W.s:672    .text:00000000000002b8 .L0 
     /tmp/ccmYpx3W.s:673    .text:00000000000002b8 .L0 
     /tmp/ccmYpx3W.s:677    .text:00000000000002bc .L0 
     /tmp/ccmYpx3W.s:679    .text:00000000000002c0 .L0 
     /tmp/ccmYpx3W.s:680    .text:00000000000002c0 .L0 
     /tmp/ccmYpx3W.s:682    .text:00000000000002c8 .L0 
     /tmp/ccmYpx3W.s:683    .text:00000000000002c8 .L0 
     /tmp/ccmYpx3W.s:686    .text:00000000000002d0 .L0 
     /tmp/ccmYpx3W.s:687    .text:00000000000002d0 .L0 
     /tmp/ccmYpx3W.s:692    .text:00000000000002d4 .L0 
  src/../h/riscv.hpp:181    .text:00000000000002d4 .L0 
     /tmp/ccmYpx3W.s:702    .text:00000000000002d8 .L0 
     /tmp/ccmYpx3W.s:703    .text:00000000000002d8 .L0 
     /tmp/ccmYpx3W.s:708    .text:00000000000002dc .L0 
  src/../h/riscv.hpp:113    .text:00000000000002dc .L0 
     /tmp/ccmYpx3W.s:722    .text:00000000000002e4 .L0 
     /tmp/ccmYpx3W.s:738    .text:00000000000002e4 .L0 
     /tmp/ccmYpx3W.s:219    .rodata:0000000000000000 .L7
     /tmp/ccmYpx3W.s:211    .text:00000000000000c8 .L0 
     /tmp/ccmYpx3W.s:421    .text:0000000000000190 .L0 
     /tmp/ccmYpx3W.s:727    .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccmYpx3W.s:424    .text:00000000000001a0 .L0 
     /tmp/ccmYpx3W.s:618    .text:0000000000000278 .L0 
     /tmp/ccmYpx3W.s:626    .text:000000000000028c .L0 
     /tmp/ccmYpx3W.s:680    .text:00000000000002c0 .L0 
     /tmp/ccmYpx3W.s:110    .text:0000000000000078 .L26
     /tmp/ccmYpx3W.s:595    .text:0000000000000270 .L27
GAS LISTING /tmp/ccmYpx3W.s 			page 27


     /tmp/ccmYpx3W.s:314    .text:000000000000010c .L3
     /tmp/ccmYpx3W.s:564    .text:0000000000000250 .L21
     /tmp/ccmYpx3W.s:269    .text:00000000000000f4 .L5
     /tmp/ccmYpx3W.s:571    .text:0000000000000258 .L22
     /tmp/ccmYpx3W.s:579    .text:0000000000000260 .L23
     /tmp/ccmYpx3W.s:446    .text:00000000000001cc .L18
     /tmp/ccmYpx3W.s:587    .text:0000000000000268 .L24
     /tmp/ccmYpx3W.s:258    .text:00000000000000e0 .L17
     /tmp/ccmYpx3W.s:332    .text:0000000000000120 .L16
     /tmp/ccmYpx3W.s:349    .text:0000000000000138 .L15
     /tmp/ccmYpx3W.s:367    .text:0000000000000150 .L14
     /tmp/ccmYpx3W.s:385    .text:0000000000000168 .L13
     /tmp/ccmYpx3W.s:406    .text:0000000000000184 .L12
     /tmp/ccmYpx3W.s:463    .text:00000000000001e0 .L11
     /tmp/ccmYpx3W.s:480    .text:00000000000001f0 .L10
     /tmp/ccmYpx3W.s:501    .text:000000000000020c .L9
     /tmp/ccmYpx3W.s:529    .text:000000000000022c .L8
     /tmp/ccmYpx3W.s:543    .text:000000000000023c .L6
     /tmp/ccmYpx3W.s:2498   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccmYpx3W.s:4204   .debug_str:0000000000000423 .LASF177
     /tmp/ccmYpx3W.s:4426   .debug_str:0000000000000b09 .LASF178
     /tmp/ccmYpx3W.s:4164   .debug_str:00000000000002e8 .LASF179
     /tmp/ccmYpx3W.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccmYpx3W.s:730    .text:00000000000002e4 .Letext0
     /tmp/ccmYpx3W.s:4070   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccmYpx3W.s:4190   .debug_str:00000000000003a7 .LASF0
     /tmp/ccmYpx3W.s:4218   .debug_str:000000000000055a .LASF1
     /tmp/ccmYpx3W.s:4308   .debug_str:00000000000007da .LASF2
     /tmp/ccmYpx3W.s:4316   .debug_str:0000000000000815 .LASF4
     /tmp/ccmYpx3W.s:4196   .debug_str:00000000000003ce .LASF3
     /tmp/ccmYpx3W.s:4090   .debug_str:00000000000000be .LASF5
     /tmp/ccmYpx3W.s:4272   .debug_str:00000000000006c5 .LASF6
     /tmp/ccmYpx3W.s:4208   .debug_str:0000000000000504 .LASF7
     /tmp/ccmYpx3W.s:4160   .debug_str:00000000000002d2 .LASF8
     /tmp/ccmYpx3W.s:4170   .debug_str:0000000000000327 .LASF9
     /tmp/ccmYpx3W.s:4110   .debug_str:000000000000015d .LASF10
     /tmp/ccmYpx3W.s:4152   .debug_str:00000000000002b0 .LASF11
     /tmp/ccmYpx3W.s:4120   .debug_str:00000000000001a5 .LASF12
     /tmp/ccmYpx3W.s:4108   .debug_str:000000000000014d .LASF13
     /tmp/ccmYpx3W.s:4352   .debug_str:00000000000008f6 .LASF14
     /tmp/ccmYpx3W.s:4136   .debug_str:000000000000021c .LASF15
     /tmp/ccmYpx3W.s:4338   .debug_str:000000000000089a .LASF16
     /tmp/ccmYpx3W.s:4412   .debug_str:0000000000000a9f .LASF56
     /tmp/ccmYpx3W.s:4296   .debug_str:000000000000077f .LASF180
     /tmp/ccmYpx3W.s:4222   .debug_str:0000000000000573 .LASF17
     /tmp/ccmYpx3W.s:4140   .debug_str:000000000000024e .LASF18
     /tmp/ccmYpx3W.s:4430   .debug_str:0000000000000b23 .LASF19
     /tmp/ccmYpx3W.s:4178   .debug_str:0000000000000353 .LASF52
     /tmp/ccmYpx3W.s:4186   .debug_str:0000000000000389 .LASF54
     /tmp/ccmYpx3W.s:4394   .debug_str:0000000000000a1a .LASF20
     /tmp/ccmYpx3W.s:4392   .debug_str:0000000000000a05 .LASF22
     /tmp/ccmYpx3W.s:4304   .debug_str:00000000000007c6 .LASF24
     /tmp/ccmYpx3W.s:4260   .debug_str:000000000000066e .LASF26
     /tmp/ccmYpx3W.s:4290   .debug_str:0000000000000751 .LASF21
     /tmp/ccmYpx3W.s:4292   .debug_str:0000000000000758 .LASF23
     /tmp/ccmYpx3W.s:4250   .debug_str:000000000000062b .LASF25
     /tmp/ccmYpx3W.s:4210   .debug_str:0000000000000517 .LASF27
GAS LISTING /tmp/ccmYpx3W.s 			page 28


     /tmp/ccmYpx3W.s:4424   .debug_str:0000000000000b01 .LASF28
     /tmp/ccmYpx3W.s:4380   .debug_str:00000000000009a9 .LASF29
     /tmp/ccmYpx3W.s:4246   .debug_str:000000000000061e .LASF30
     /tmp/ccmYpx3W.s:4258   .debug_str:000000000000065a .LASF31
     /tmp/ccmYpx3W.s:4226   .debug_str:0000000000000595 .LASF32
     /tmp/ccmYpx3W.s:4294   .debug_str:000000000000076b .LASF33
     /tmp/ccmYpx3W.s:4442   .debug_str:0000000000000b8b .LASF34
     /tmp/ccmYpx3W.s:4194   .debug_str:00000000000003ba .LASF35
     /tmp/ccmYpx3W.s:4348   .debug_str:00000000000008e2 .LASF36
     /tmp/ccmYpx3W.s:4320   .debug_str:0000000000000821 .LASF37
     /tmp/ccmYpx3W.s:4322   .debug_str:0000000000000834 .LASF38
     /tmp/ccmYpx3W.s:4114   .debug_str:0000000000000175 .LASF39
     /tmp/ccmYpx3W.s:4134   .debug_str:0000000000000216 .LASF40
     /tmp/ccmYpx3W.s:4182   .debug_str:000000000000036e .LASF41
     /tmp/ccmYpx3W.s:4192   .debug_str:00000000000003b4 .LASF42
     /tmp/ccmYpx3W.s:4126   .debug_str:00000000000001d3 .LASF43
     /tmp/ccmYpx3W.s:4092   .debug_str:00000000000000c5 .LASF44
     /tmp/ccmYpx3W.s:4312   .debug_str:00000000000007f2 .LASF45
     /tmp/ccmYpx3W.s:4306   .debug_str:00000000000007cf .LASF46
     /tmp/ccmYpx3W.s:4440   .debug_str:0000000000000b73 .LASF47
     /tmp/ccmYpx3W.s:4416   .debug_str:0000000000000aab .LASF48
     /tmp/ccmYpx3W.s:4434   .debug_str:0000000000000b37 .LASF49
     /tmp/ccmYpx3W.s:4408   .debug_str:0000000000000a77 .LASF50
     /tmp/ccmYpx3W.s:4234   .debug_str:00000000000005b7 .LASF51
     /tmp/ccmYpx3W.s:4420   .debug_str:0000000000000ae8 .LASF53
     /tmp/ccmYpx3W.s:4168   .debug_str:000000000000030b .LASF55
     /tmp/ccmYpx3W.s:4276   .debug_str:00000000000006e2 .LASF95
     /tmp/ccmYpx3W.s:4202   .debug_str:0000000000000401 .LASF97
     /tmp/ccmYpx3W.s:4274   .debug_str:00000000000006d8 .LASF57
     /tmp/ccmYpx3W.s:4396   .debug_str:0000000000000a23 .LASF181
     /tmp/ccmYpx3W.s:4346   .debug_str:00000000000008dd .LASF58
     /tmp/ccmYpx3W.s:4248   .debug_str:0000000000000626 .LASF59
     /tmp/ccmYpx3W.s:4242   .debug_str:0000000000000610 .LASF60
     /tmp/ccmYpx3W.s:4340   .debug_str:00000000000008b0 .LASF62
     /tmp/ccmYpx3W.s:4148   .debug_str:0000000000000278 .LASF67
     /tmp/ccmYpx3W.s:4310   .debug_str:00000000000007e8 .LASF116
     /tmp/ccmYpx3W.s:4300   .debug_str:000000000000079f .LASF117
     /tmp/ccmYpx3W.s:4214   .debug_str:0000000000000545 .LASF61
     /tmp/ccmYpx3W.s:4106   .debug_str:0000000000000130 .LASF63
     /tmp/ccmYpx3W.s:4228   .debug_str:000000000000059d .LASF64
     /tmp/ccmYpx3W.s:4138   .debug_str:0000000000000232 .LASF65
     /tmp/ccmYpx3W.s:4268   .debug_str:00000000000006aa .LASF66
     /tmp/ccmYpx3W.s:4410   .debug_str:0000000000000a81 .LASF68
     /tmp/ccmYpx3W.s:4446   .debug_str:0000000000000b9d .LASF69
     /tmp/ccmYpx3W.s:4438   .debug_str:0000000000000b58 .LASF70
     /tmp/ccmYpx3W.s:4330   .debug_str:0000000000000876 .LASF71
     /tmp/ccmYpx3W.s:4206   .debug_str:00000000000004e7 .LASF72
     /tmp/ccmYpx3W.s:4280   .debug_str:0000000000000705 .LASF73
     /tmp/ccmYpx3W.s:4080   .debug_str:000000000000002b .LASF74
     /tmp/ccmYpx3W.s:4358   .debug_str:000000000000091d .LASF182
     /tmp/ccmYpx3W.s:4318   .debug_str:000000000000081c .LASF75
     /tmp/ccmYpx3W.s:4084   .debug_str:000000000000006d .LASF76
     /tmp/ccmYpx3W.s:4188   .debug_str:00000000000003a1 .LASF77
     /tmp/ccmYpx3W.s:4180   .debug_str:000000000000035e .LASF78
     /tmp/ccmYpx3W.s:4078   .debug_str:0000000000000023 .LASF79
     /tmp/ccmYpx3W.s:4262   .debug_str:0000000000000683 .LASF80
     /tmp/ccmYpx3W.s:4422   .debug_str:0000000000000af7 .LASF81
GAS LISTING /tmp/ccmYpx3W.s 			page 29


     /tmp/ccmYpx3W.s:4354   .debug_str:0000000000000902 .LASF82
     /tmp/ccmYpx3W.s:4232   .debug_str:00000000000005aa .LASF83
     /tmp/ccmYpx3W.s:4400   .debug_str:0000000000000a32 .LASF84
     /tmp/ccmYpx3W.s:4350   .debug_str:00000000000008e9 .LASF85
     /tmp/ccmYpx3W.s:4402   .debug_str:0000000000000a4b .LASF86
     /tmp/ccmYpx3W.s:4264   .debug_str:0000000000000695 .LASF183
     /tmp/ccmYpx3W.s:4220   .debug_str:000000000000056d .LASF87
     /tmp/ccmYpx3W.s:4302   .debug_str:00000000000007b6 .LASF88
     /tmp/ccmYpx3W.s:4372   .debug_str:000000000000098e .LASF154
     /tmp/ccmYpx3W.s:4286   .debug_str:0000000000000730 .LASF184
     /tmp/ccmYpx3W.s:4074   .debug_str:000000000000000e .LASF89
     /tmp/ccmYpx3W.s:4370   .debug_str:0000000000000989 .LASF90
     /tmp/ccmYpx3W.s:4332   .debug_str:0000000000000881 .LASF91
     /tmp/ccmYpx3W.s:4390   .debug_str:00000000000009fd .LASF92
     /tmp/ccmYpx3W.s:4382   .debug_str:00000000000009bd .LASF93
     /tmp/ccmYpx3W.s:4104   .debug_str:0000000000000127 .LASF94
     /tmp/ccmYpx3W.s:4278   .debug_str:00000000000006f7 .LASF96
     /tmp/ccmYpx3W.s:4224   .debug_str:000000000000057c .LASF98
     /tmp/ccmYpx3W.s:4122   .debug_str:00000000000001b5 .LASF159
     /tmp/ccmYpx3W.s:4082   .debug_str:0000000000000045 .LASF161
     /tmp/ccmYpx3W.s:4130   .debug_str:00000000000001f7 .LASF99
     /tmp/ccmYpx3W.s:4116   .debug_str:0000000000000188 .LASF100
     /tmp/ccmYpx3W.s:4334   .debug_str:0000000000000887 .LASF101
     /tmp/ccmYpx3W.s:4270   .debug_str:00000000000006b6 .LASF102
     /tmp/ccmYpx3W.s:4324   .debug_str:000000000000083b .LASF151
     /tmp/ccmYpx3W.s:4314   .debug_str:000000000000080a .LASF103
     /tmp/ccmYpx3W.s:4432   .debug_str:0000000000000b2c .LASF104
     /tmp/ccmYpx3W.s:4230   .debug_str:00000000000005a5 .LASF105
     /tmp/ccmYpx3W.s:4398   .debug_str:0000000000000a28 .LASF106
     /tmp/ccmYpx3W.s:4252   .debug_str:0000000000000632 .LASF107
     /tmp/ccmYpx3W.s:4240   .debug_str:00000000000005fb .LASF108
     /tmp/ccmYpx3W.s:4096   .debug_str:00000000000000f1 .LASF109
     /tmp/ccmYpx3W.s:4132   .debug_str:0000000000000200 .LASF110
     /tmp/ccmYpx3W.s:4378   .debug_str:00000000000009a4 .LASF111
     /tmp/ccmYpx3W.s:4384   .debug_str:00000000000009c7 .LASF112
     /tmp/ccmYpx3W.s:4356   .debug_str:0000000000000916 .LASF113
     /tmp/ccmYpx3W.s:4386   .debug_str:00000000000009dc .LASF114
     /tmp/ccmYpx3W.s:4368   .debug_str:0000000000000974 .LASF115
     /tmp/ccmYpx3W.s:4298   .debug_str:000000000000078a .LASF118
     /tmp/ccmYpx3W.s:4364   .debug_str:000000000000095b .LASF119
     /tmp/ccmYpx3W.s:4102   .debug_str:0000000000000120 .LASF120
     /tmp/ccmYpx3W.s:4142   .debug_str:0000000000000257 .LASF121
     /tmp/ccmYpx3W.s:4374   .debug_str:0000000000000996 .LASF122
     /tmp/ccmYpx3W.s:4162   .debug_str:00000000000002e2 .LASF123
     /tmp/ccmYpx3W.s:4172   .debug_str:0000000000000335 .LASF185
     /tmp/ccmYpx3W.s:4444   .debug_str:0000000000000b93 .LASF124
     /tmp/ccmYpx3W.s:4158   .debug_str:00000000000002c9 .LASF125
     /tmp/ccmYpx3W.s:4342   .debug_str:00000000000008c3 .LASF126
     /tmp/ccmYpx3W.s:4284   .debug_str:0000000000000715 .LASF127
     /tmp/ccmYpx3W.s:4336   .debug_str:000000000000088c .LASF128
     /tmp/ccmYpx3W.s:4288   .debug_str:0000000000000745 .LASF129
     /tmp/ccmYpx3W.s:4124   .debug_str:00000000000001c3 .LASF130
     /tmp/ccmYpx3W.s:4112   .debug_str:000000000000016c .LASF131
     /tmp/ccmYpx3W.s:4118   .debug_str:000000000000019b .LASF132
     /tmp/ccmYpx3W.s:4244   .debug_str:0000000000000615 .LASF133
     /tmp/ccmYpx3W.s:4362   .debug_str:0000000000000950 .LASF134
     /tmp/ccmYpx3W.s:4436   .debug_str:0000000000000b4d .LASF135
GAS LISTING /tmp/ccmYpx3W.s 			page 30


     /tmp/ccmYpx3W.s:4200   .debug_str:00000000000003fc .LASF136
     /tmp/ccmYpx3W.s:4154   .debug_str:00000000000002bf .LASF137
     /tmp/ccmYpx3W.s:4266   .debug_str:000000000000069a .LASF138
     /tmp/ccmYpx3W.s:4388   .debug_str:00000000000009f3 .LASF186
     /tmp/ccmYpx3W.s:4144   .debug_str:000000000000025f .LASF139
     /tmp/ccmYpx3W.s:4414   .debug_str:0000000000000aa5 .LASF140
     /tmp/ccmYpx3W.s:4428   .debug_str:0000000000000b17 .LASF141
     /tmp/ccmYpx3W.s:4238   .debug_str:00000000000005d7 .LASF142
     /tmp/ccmYpx3W.s:4236   .debug_str:00000000000005cd .LASF143
     /tmp/ccmYpx3W.s:4094   .debug_str:00000000000000d0 .LASF144
     /tmp/ccmYpx3W.s:4184   .debug_str:0000000000000380 .LASF145
     /tmp/ccmYpx3W.s:4150   .debug_str:000000000000028f .LASF146
     /tmp/ccmYpx3W.s:4328   .debug_str:0000000000000863 .LASF147
     /tmp/ccmYpx3W.s:4360   .debug_str:0000000000000925 .LASF148
     /tmp/ccmYpx3W.s:4212   .debug_str:000000000000052a .LASF149
     /tmp/ccmYpx3W.s:4418   .debug_str:0000000000000ab5 .LASF150
     /tmp/ccmYpx3W.s:4174   .debug_str:0000000000000341 .LASF152
     /tmp/ccmYpx3W.s:4100   .debug_str:0000000000000110 .LASF153
     /tmp/ccmYpx3W.s:4326   .debug_str:000000000000084c .LASF155
     /tmp/ccmYpx3W.s:4098   .debug_str:00000000000000f7 .LASF156
     /tmp/ccmYpx3W.s:4198   .debug_str:00000000000003e0 .LASF157
     /tmp/ccmYpx3W.s:4254   .debug_str:0000000000000637 .LASF158
     /tmp/ccmYpx3W.s:4128   .debug_str:00000000000001e5 .LASF160
     /tmp/ccmYpx3W.s:4086   .debug_str:0000000000000079 .LASF162
     /tmp/ccmYpx3W.s:49     .text:0000000000000020 .LFB35
     /tmp/ccmYpx3W.s:723    .text:00000000000002e4 .LFE35
     /tmp/ccmYpx3W.s:4344   .debug_str:00000000000008d6 .LASF163
     /tmp/ccmYpx3W.s:3733   .debug_loc:0000000000000000 .LLST0
     /tmp/ccmYpx3W.s:4044   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccmYpx3W.s:4376   .debug_str:000000000000099f .LASF164
     /tmp/ccmYpx3W.s:4176   .debug_str:000000000000034b .LASF165
     /tmp/ccmYpx3W.s:3826   .debug_loc:000000000000015a .LLST4
     /tmp/ccmYpx3W.s:3833   .debug_loc:000000000000017d .LLST5
     /tmp/ccmYpx3W.s:3852   .debug_loc:00000000000001d9 .LLST6
     /tmp/ccmYpx3W.s:3903   .debug_loc:00000000000002cd .LLST7
     /tmp/ccmYpx3W.s:4366   .debug_str:000000000000096d .LASF166
     /tmp/ccmYpx3W.s:3938   .debug_loc:0000000000000366 .LLST8
     /tmp/ccmYpx3W.s:394    .text:0000000000000174 .LVL28
     /tmp/ccmYpx3W.s:3949   .debug_loc:000000000000039c .LLST9
     /tmp/ccmYpx3W.s:435    .text:00000000000001bc .LBB69
     /tmp/ccmYpx3W.s:448    .text:00000000000001cc .LBE69
     /tmp/ccmYpx3W.s:3956   .debug_loc:00000000000003bf .LLST10
     /tmp/ccmYpx3W.s:445    .text:00000000000001cc .LVL34
     /tmp/ccmYpx3W.s:415    .text:000000000000018c .LVL30
     /tmp/ccmYpx3W.s:427    .text:00000000000001b4 .LVL31
     /tmp/ccmYpx3W.s:452    .text:00000000000001d8 .LVL35
     /tmp/ccmYpx3W.s:3963   .debug_loc:00000000000003e2 .LLST11
     /tmp/ccmYpx3W.s:489    .text:00000000000001fc .LVL39
     /tmp/ccmYpx3W.s:506    .text:000000000000020c .LBB73
     /tmp/ccmYpx3W.s:518    .text:0000000000000224 .LBE73
     /tmp/ccmYpx3W.s:3974   .debug_loc:0000000000000418 .LLST12
     /tmp/ccmYpx3W.s:512    .text:0000000000000218 .LVL41
     /tmp/ccmYpx3W.s:517    .text:0000000000000224 .LVL42
     /tmp/ccmYpx3W.s:532    .text:000000000000022c .LBB74
     /tmp/ccmYpx3W.s:539    .text:0000000000000238 .LBE74
     /tmp/ccmYpx3W.s:3981   .debug_loc:000000000000043b .LLST13
     /tmp/ccmYpx3W.s:538    .text:0000000000000238 .LVL44
GAS LISTING /tmp/ccmYpx3W.s 			page 31


     /tmp/ccmYpx3W.s:546    .text:000000000000023c .LBB75
     /tmp/ccmYpx3W.s:553    .text:0000000000000248 .LBE75
     /tmp/ccmYpx3W.s:3988   .debug_loc:000000000000045e .LLST14
     /tmp/ccmYpx3W.s:552    .text:0000000000000248 .LVL46
     /tmp/ccmYpx3W.s:114    .text:0000000000000078 .LBB61
     /tmp/ccmYpx3W.s:129    .text:0000000000000084 .LBE61
     /tmp/ccmYpx3W.s:115    .text:0000000000000078 .LBB62
     /tmp/ccmYpx3W.s:128    .text:0000000000000084 .LBE62
     /tmp/ccmYpx3W.s:135    .text:000000000000008c .LBB63
     /tmp/ccmYpx3W.s:150    .text:0000000000000098 .LBE63
     /tmp/ccmYpx3W.s:136    .text:000000000000008c .LBB64
     /tmp/ccmYpx3W.s:149    .text:0000000000000098 .LBE64
     /tmp/ccmYpx3W.s:288    .text:0000000000000100 .LBB89
     /tmp/ccmYpx3W.s:299    .text:0000000000000104 .LBE89
     /tmp/ccmYpx3W.s:3995   .debug_loc:0000000000000481 .LLST15
     /tmp/ccmYpx3W.s:304    .text:0000000000000108 .LBB91
     /tmp/ccmYpx3W.s:316    .text:000000000000010c .LBE91
     /tmp/ccmYpx3W.s:4002   .debug_loc:00000000000004a4 .LLST16
     /tmp/ccmYpx3W.s:264    .text:00000000000000e8 .LVL12
     /tmp/ccmYpx3W.s:267    .text:00000000000000f4 .LVL13
     /tmp/ccmYpx3W.s:342    .text:0000000000000128 .LVL19
     /tmp/ccmYpx3W.s:345    .text:0000000000000134 .LVL20
     /tmp/ccmYpx3W.s:354    .text:0000000000000140 .LVL22
     /tmp/ccmYpx3W.s:356    .text:0000000000000148 .LVL23
     /tmp/ccmYpx3W.s:372    .text:0000000000000158 .LVL25
     /tmp/ccmYpx3W.s:374    .text:0000000000000160 .LVL26
     /tmp/ccmYpx3W.s:469    .text:00000000000001e8 .LVL37
     /tmp/ccmYpx3W.s:639    .text:00000000000002a0 .LBB51
     /tmp/ccmYpx3W.s:717    .text:00000000000002e4 .LBE51
     /tmp/ccmYpx3W.s:641    .text:00000000000002a0 .LBB52
     /tmp/ccmYpx3W.s:656    .text:00000000000002ac .LBE52
     /tmp/ccmYpx3W.s:642    .text:00000000000002a0 .LBB53
     /tmp/ccmYpx3W.s:655    .text:00000000000002ac .LBE53
     /tmp/ccmYpx3W.s:660    .text:00000000000002b0 .LBB54
     /tmp/ccmYpx3W.s:675    .text:00000000000002bc .LBE54
     /tmp/ccmYpx3W.s:661    .text:00000000000002b0 .LBB55
     /tmp/ccmYpx3W.s:674    .text:00000000000002bc .LBE55
     /tmp/ccmYpx3W.s:689    .text:00000000000002d4 .LBB56
     /tmp/ccmYpx3W.s:700    .text:00000000000002d8 .LBE56
     /tmp/ccmYpx3W.s:4009   .debug_loc:00000000000004c7 .LLST3
     /tmp/ccmYpx3W.s:705    .text:00000000000002dc .LBB58
     /tmp/ccmYpx3W.s:716    .text:00000000000002e4 .LBE58
     /tmp/ccmYpx3W.s:684    .text:00000000000002d0 .LVL56
     /tmp/ccmYpx3W.s:63     .text:0000000000000034 .LBB41
     /tmp/ccmYpx3W.s:80     .text:0000000000000040 .LBE41
     /tmp/ccmYpx3W.s:64     .text:0000000000000034 .LBB42
     /tmp/ccmYpx3W.s:79     .text:0000000000000040 .LBE42
     /tmp/ccmYpx3W.s:603    .text:0000000000000270 .LBB46
     /tmp/ccmYpx3W.s:615    .text:0000000000000278 .LBE46
     /tmp/ccmYpx3W.s:4016   .debug_loc:00000000000004ea .LLST1
     /tmp/ccmYpx3W.s:629    .text:0000000000000298 .LBB49
     /tmp/ccmYpx3W.s:636    .text:000000000000029c .LBE49
     /tmp/ccmYpx3W.s:4024   .debug_loc:000000000000050e .LLST2
     /tmp/ccmYpx3W.s:104    .text:0000000000000074 .LVL1
     /tmp/ccmYpx3W.s:13     .text:0000000000000000 .LFB34
     /tmp/ccmYpx3W.s:43     .text:0000000000000020 .LFE34
     /tmp/ccmYpx3W.s:4156   .debug_str:00000000000002c4 .LASF167
GAS LISTING /tmp/ccmYpx3W.s 			page 32


     /tmp/ccmYpx3W.s:4088   .debug_str:00000000000000b4 .LASF168
     /tmp/ccmYpx3W.s:4216   .debug_str:000000000000054e .LASF187
     /tmp/ccmYpx3W.s:4404   .debug_str:0000000000000a6b .LASF169
     /tmp/ccmYpx3W.s:4256   .debug_str:0000000000000653 .LASF170
     /tmp/ccmYpx3W.s:4146   .debug_str:0000000000000265 .LASF172
     /tmp/ccmYpx3W.s:4072   .debug_str:0000000000000000 .LASF174
     /tmp/ccmYpx3W.s:4282   .debug_str:000000000000070e .LASF176
     /tmp/ccmYpx3W.s:4406   .debug_str:0000000000000a70 .LASF171
     /tmp/ccmYpx3W.s:4076   .debug_str:0000000000000013 .LASF173
     /tmp/ccmYpx3W.s:4166   .debug_str:00000000000002fb .LASF175
     /tmp/ccmYpx3W.s:78     .text:0000000000000040 .LVL0
     /tmp/ccmYpx3W.s:109    .text:0000000000000078 .LVL2
     /tmp/ccmYpx3W.s:178    .text:00000000000000ac .LVL6
     /tmp/ccmYpx3W.s:331    .text:0000000000000120 .LVL18
     /tmp/ccmYpx3W.s:348    .text:0000000000000138 .LVL21
     /tmp/ccmYpx3W.s:366    .text:0000000000000150 .LVL24
     /tmp/ccmYpx3W.s:384    .text:0000000000000168 .LVL27
     /tmp/ccmYpx3W.s:405    .text:0000000000000184 .LVL29
     /tmp/ccmYpx3W.s:462    .text:00000000000001e0 .LVL36
     /tmp/ccmYpx3W.s:479    .text:00000000000001f0 .LVL38
     /tmp/ccmYpx3W.s:500    .text:000000000000020c .LVL40
     /tmp/ccmYpx3W.s:528    .text:000000000000022c .LVL43
     /tmp/ccmYpx3W.s:542    .text:000000000000023c .LVL45
     /tmp/ccmYpx3W.s:563    .text:0000000000000250 .LVL47
     /tmp/ccmYpx3W.s:570    .text:0000000000000258 .LVL48
     /tmp/ccmYpx3W.s:594    .text:0000000000000270 .LVL51
     /tmp/ccmYpx3W.s:619    .text:0000000000000280 .LVL53
     /tmp/ccmYpx3W.s:160    .text:00000000000000a0 .LVL3
     /tmp/ccmYpx3W.s:210    .text:00000000000000c8 .LVL11
     /tmp/ccmYpx3W.s:166    .text:00000000000000a4 .LVL4
     /tmp/ccmYpx3W.s:431    .text:00000000000001b8 .LVL32
     /tmp/ccmYpx3W.s:578    .text:0000000000000260 .LVL49
     /tmp/ccmYpx3W.s:586    .text:0000000000000268 .LVL50
     /tmp/ccmYpx3W.s:172    .text:00000000000000a8 .LVL5
     /tmp/ccmYpx3W.s:202    .text:00000000000000bc .LVL10
     /tmp/ccmYpx3W.s:312    .text:000000000000010c .LVL17
     /tmp/ccmYpx3W.s:434    .text:00000000000001bc .LVL33
     /tmp/ccmYpx3W.s:287    .text:0000000000000100 .LVL14
     /tmp/ccmYpx3W.s:296    .text:0000000000000104 .LVL15
     /tmp/ccmYpx3W.s:303    .text:0000000000000108 .LVL16
     /tmp/ccmYpx3W.s:688    .text:00000000000002d4 .LVL57
     /tmp/ccmYpx3W.s:697    .text:00000000000002d8 .LVL58
     /tmp/ccmYpx3W.s:612    .text:0000000000000278 .LVL52
     /tmp/ccmYpx3W.s:628    .text:0000000000000298 .LVL54
     /tmp/ccmYpx3W.s:634    .text:000000000000029c .LVL55
     /tmp/ccmYpx3W.s:739    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccmYpx3W.s:112    .text:0000000000000078 .LBB60
     /tmp/ccmYpx3W.s:317    .text:000000000000010c .LBE60
     /tmp/ccmYpx3W.s:335    .text:0000000000000120 .LBB104
     /tmp/ccmYpx3W.s:599    .text:0000000000000270 .LBE104
     /tmp/ccmYpx3W.s:388    .text:0000000000000168 .LBB67
     /tmp/ccmYpx3W.s:399    .text:000000000000017c .LBE67
     /tmp/ccmYpx3W.s:574    .text:0000000000000258 .LBB76
     /tmp/ccmYpx3W.s:580    .text:0000000000000260 .LBE76
     /tmp/ccmYpx3W.s:411    .text:0000000000000184 .LBB68
     /tmp/ccmYpx3W.s:453    .text:00000000000001d8 .LBE68
     /tmp/ccmYpx3W.s:460    .text:00000000000001dc .LBB71
GAS LISTING /tmp/ccmYpx3W.s 			page 33


     /tmp/ccmYpx3W.s:464    .text:00000000000001e0 .LBE71
     /tmp/ccmYpx3W.s:483    .text:00000000000001f0 .LBB72
     /tmp/ccmYpx3W.s:494    .text:0000000000000204 .LBE72
     /tmp/ccmYpx3W.s:590    .text:0000000000000268 .LBB77
     /tmp/ccmYpx3W.s:596    .text:0000000000000270 .LBE77

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator11getInstanceEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB4exitEv
_ZN3TCB7runningE
_Z6assertbPKc
_ZdaPv
_ZdlPv
_ZN3TCB8dispatchEv
_ZN9Semaphore4openEj
_ZN9Semaphore5closeEv
_ZN9Semaphore4waitEv
_ZN9Semaphore6signalEv
_ZN3TCB16timeSliceCounterE
