GAS LISTING /tmp/ccCcDxah.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB57:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../h/syscall_c.h"
   8:src/riscv.cpp **** #include "../h/mem.hpp"
   9:src/riscv.cpp **** #include "../h/_console.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  15              		.loc 1 12 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  23              		.loc 1 13 5
  24              		.loc 1 13 38 is_stmt 0
  25              	 #APP
  26              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 14 5 is_stmt 1
  30              		.loc 1 14 29 is_stmt 0
  31              	# 14 "src/riscv.cpp" 1
  15              	}
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 15 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
  43              	.LFE57:
GAS LISTING /tmp/ccCcDxah.s 			page 2


  45              		.align	2
  46              		.globl	_ZN5Riscv14consoleHandlerEv
  48              	_ZN5Riscv14consoleHandlerEv:
  49              	.LFB58:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::consoleHandler()
  18:src/riscv.cpp **** {
  50              		.loc 1 18 1 is_stmt 1
  51              		.cfi_startproc
  52 0020 130101FC 		addi	sp,sp,-64
  53              		.cfi_def_cfa_offset 64
  54 0024 233C1102 		sd	ra,56(sp)
  55 0028 23388102 		sd	s0,48(sp)
  56 002c 23349102 		sd	s1,40(sp)
  57 0030 23302103 		sd	s2,32(sp)
  58 0034 233C3101 		sd	s3,24(sp)
  59 0038 23384101 		sd	s4,16(sp)
  60 003c 23345101 		sd	s5,8(sp)
  61              		.cfi_offset 1, -8
  62              		.cfi_offset 8, -16
  63              		.cfi_offset 9, -24
  64              		.cfi_offset 18, -32
  65              		.cfi_offset 19, -40
  66              		.cfi_offset 20, -48
  67              		.cfi_offset 21, -56
  68 0040 13040104 		addi	s0,sp,64
  69              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp ****     // TODO: EOF HANDLING
  20:src/riscv.cpp ****     uint64 irq = plic_claim();
  70              		.loc 1 20 5
  71              		.loc 1 20 28 is_stmt 0
  72 0044 97000000 		call	plic_claim
  72      E7800000 
  73              	.LVL0:
  74 004c 93090500 		mv	s3,a0
  75              	.LVL1:
  21:src/riscv.cpp ****     if (irq != CONSOLE_IRQ) {
  76              		.loc 1 21 5 is_stmt 1
  77 0050 9307A000 		li	a5,10
  78 0054 631CF500 		bne	a0,a5,.L16
  22:src/riscv.cpp ****         debug_print("Unexpected IRQ: ");
  23:src/riscv.cpp ****         debug_print(irq);
  24:src/riscv.cpp ****         debug_print("\n");
  25:src/riscv.cpp ****         plic_complete(irq);
  26:src/riscv.cpp ****         return;
  27:src/riscv.cpp ****     }
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****     // This should not be blocking.
  30:src/riscv.cpp ****     uint8 c_stat = *(uint8*)CONSOLE_STATUS;
  79              		.loc 1 30 5
  80              		.loc 1 30 20 is_stmt 0
  81 0058 97070000 		lla	a5,CONSOLE_STATUS
  81      93870700 
  82 0060 03B90700 		ld	s2,0(a5)
  83              		.loc 1 30 11
  84 0064 83440900 		lbu	s1,0(s2)
  85              	.LVL2:
GAS LISTING /tmp/ccCcDxah.s 			page 3


  86 0068 6F00C00D 		j	.L9
  87              	.LVL3:
  88              	.L16:
  22:src/riscv.cpp ****         debug_print("Unexpected IRQ: ");
  89              		.loc 1 22 9 is_stmt 1
  22:src/riscv.cpp ****         debug_print("Unexpected IRQ: ");
  90              		.loc 1 22 20 is_stmt 0
  91 006c 17050000 		lla	a0,.LC0
  91      13050500 
  92              	.LVL4:
  93 0074 97000000 		call	_Z11debug_printPKc
  93      E7800000 
  94              	.LVL5:
  23:src/riscv.cpp ****         debug_print("\n");
  95              		.loc 1 23 9 is_stmt 1
  23:src/riscv.cpp ****         debug_print("\n");
  96              		.loc 1 23 20 is_stmt 0
  97 007c 13850900 		mv	a0,s3
  98 0080 97000000 		call	_Z11debug_printm
  98      E7800000 
  99              	.LVL6:
  24:src/riscv.cpp ****         plic_complete(irq);
 100              		.loc 1 24 9 is_stmt 1
  24:src/riscv.cpp ****         plic_complete(irq);
 101              		.loc 1 24 20 is_stmt 0
 102 0088 17050000 		lla	a0,.LC1
 102      13050500 
 103 0090 97000000 		call	_Z11debug_printPKc
 103      E7800000 
 104              	.LVL7:
  25:src/riscv.cpp ****         return;
 105              		.loc 1 25 9 is_stmt 1
  25:src/riscv.cpp ****         return;
 106              		.loc 1 25 22 is_stmt 0
 107 0098 13850900 		mv	a0,s3
 108 009c 97000000 		call	plic_complete
 108      E7800000 
 109              	.LVL8:
  26:src/riscv.cpp ****     }
 110              		.loc 1 26 9 is_stmt 1
 111 00a4 6F00001A 		j	.L3
 112              	.LVL9:
 113              	.L7:
 114              	.LBB74:
 115              	.LBB75:
 116              	.LBB76:
 117              	.LBB77:
 118              		.file 2 "src/../h/circular_buffer.hpp"
   1:src/../h/circular_buffer.hpp **** #ifndef CIRCULAR_BUFFER_HPP
   2:src/../h/circular_buffer.hpp **** #define CIRCULAR_BUFFER_HPP
   3:src/../h/circular_buffer.hpp **** 
   4:src/../h/circular_buffer.hpp **** #include "../h/syscall_c.h"
   5:src/../h/circular_buffer.hpp **** #include "semaphore.hpp"
   6:src/../h/circular_buffer.hpp **** #include "mem.hpp"
   7:src/../h/circular_buffer.hpp **** 
   8:src/../h/circular_buffer.hpp **** template<typename T>
   9:src/../h/circular_buffer.hpp **** class CircularBuffer {
GAS LISTING /tmp/ccCcDxah.s 			page 4


  10:src/../h/circular_buffer.hpp ****     public:
  11:src/../h/circular_buffer.hpp ****     static CircularBuffer<T> *createInstance(int size) {
  12:src/../h/circular_buffer.hpp ****         CircularBuffer<T> *instance = (CircularBuffer<T>*)MemoryAllocator::getInstance()->mem_alloc
  13:src/../h/circular_buffer.hpp ****         instance->first_idx_ = 0;
  14:src/../h/circular_buffer.hpp ****         instance->last_idx_ = 0;
  15:src/../h/circular_buffer.hpp ****         instance->size_ = size+1;
  16:src/../h/circular_buffer.hpp ****         instance->item_ = _semaphore::open(0);
  17:src/../h/circular_buffer.hpp ****         instance->space_ = _semaphore::open(size);
  18:src/../h/circular_buffer.hpp ****         instance->mutex_ = _semaphore::open(1);
  19:src/../h/circular_buffer.hpp ****         instance->buffer_ = (T*)MemoryAllocator::getInstance()->mem_alloc(sizeof(T) * instance->siz
  20:src/../h/circular_buffer.hpp ****         return instance;
  21:src/../h/circular_buffer.hpp ****     }
  22:src/../h/circular_buffer.hpp **** 
  23:src/../h/circular_buffer.hpp ****     CircularBuffer(int size = 16) : first_idx_(0), last_idx_(0), size_(size+1) {
  24:src/../h/circular_buffer.hpp ****         item_ = _semaphore::open(0);
  25:src/../h/circular_buffer.hpp ****         space_ = _semaphore::open(size);
  26:src/../h/circular_buffer.hpp ****         mutex_ = _semaphore::open(1);
  27:src/../h/circular_buffer.hpp ****         buffer_ = (T*)mem_alloc(sizeof(T) * size_);
  28:src/../h/circular_buffer.hpp ****     }
  29:src/../h/circular_buffer.hpp **** 
  30:src/../h/circular_buffer.hpp ****     ~CircularBuffer() {
  31:src/../h/circular_buffer.hpp ****         sem_close(item_);
  32:src/../h/circular_buffer.hpp ****         sem_close(space_);
  33:src/../h/circular_buffer.hpp ****         sem_close(mutex_);
  34:src/../h/circular_buffer.hpp ****     }
  35:src/../h/circular_buffer.hpp **** 
  36:src/../h/circular_buffer.hpp ****     T removeFirst() {
  37:src/../h/circular_buffer.hpp ****         sem_wait(item_);
  38:src/../h/circular_buffer.hpp ****         sem_wait(mutex_);
  39:src/../h/circular_buffer.hpp ****         T ret = buffer_[first_idx_];
  40:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
  41:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
  42:src/../h/circular_buffer.hpp ****         sem_signal(space_);
  43:src/../h/circular_buffer.hpp ****         return ret;
  44:src/../h/circular_buffer.hpp ****     }
  45:src/../h/circular_buffer.hpp **** 
  46:src/../h/circular_buffer.hpp ****     T addLast(T c) {
  47:src/../h/circular_buffer.hpp ****         sem_wait(space_);
  48:src/../h/circular_buffer.hpp ****         sem_wait(mutex_);
  49:src/../h/circular_buffer.hpp ****         buffer_[last_idx_] = c;
  50:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
  51:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
  52:src/../h/circular_buffer.hpp ****         sem_signal(item_);
  53:src/../h/circular_buffer.hpp ****         return buffer_[last_idx_];
  54:src/../h/circular_buffer.hpp ****     }
  55:src/../h/circular_buffer.hpp **** 
  56:src/../h/circular_buffer.hpp ****     int getCnt() {
  57:src/../h/circular_buffer.hpp ****         int ret = 0;
  58:src/../h/circular_buffer.hpp ****         sem_wait(mutex_);
  59:src/../h/circular_buffer.hpp **** 
  60:src/../h/circular_buffer.hpp ****         if (last_idx_ >= first_idx_) {
  61:src/../h/circular_buffer.hpp ****             ret = last_idx_ - first_idx_;
  62:src/../h/circular_buffer.hpp ****         } else {
  63:src/../h/circular_buffer.hpp ****             ret = size_ - first_idx_ + last_idx_;
 119              		.loc 2 63 19 is_stmt 0
 120 00a8 03270A02 		lw	a4,32(s4)
 121              		.loc 2 63 25
GAS LISTING /tmp/ccCcDxah.s 			page 5


 122 00ac BB0A5741 		subw	s5,a4,s5
 123              		.loc 2 63 13
 124 00b0 BB8AFA00 		addw	s5,s5,a5
 125              	.LVL10:
 126              	.L8:
  64:src/../h/circular_buffer.hpp ****         }
  65:src/../h/circular_buffer.hpp **** 
  66:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 127              		.loc 2 66 19
 128 00b4 03350A01 		ld	a0,16(s4)
 129 00b8 97000000 		call	_Z10sem_signalP10_semaphore
 129      E7800000 
 130              	.LVL11:
 131              	.LBE77:
 132              	.LBE76:
 133              		.file 3 "src/../h/_console.hpp"
   1:src/../h/_console.hpp **** #ifndef _CONSOLE_HPP
   2:src/../h/_console.hpp **** #define _CONSOLE_HPP
   3:src/../h/_console.hpp **** 
   4:src/../h/_console.hpp **** #include "circular_buffer.hpp"
   5:src/../h/_console.hpp **** #include "print.hpp"
   6:src/../h/_console.hpp **** 
   7:src/../h/_console.hpp **** class _console {
   8:src/../h/_console.hpp ****     public:
   9:src/../h/_console.hpp ****     static void _console_init() {
  10:src/../h/_console.hpp ****         debug_print("Creating buffers\n");
  11:src/../h/_console.hpp ****         buffer_in_ = CircularBuffer<char>::createInstance(size_);
  12:src/../h/_console.hpp ****         buffer_out_ = CircularBuffer<char>::createInstance(size_);
  13:src/../h/_console.hpp ****         debug_print("Buffers created\n");
  14:src/../h/_console.hpp ****     }
  15:src/../h/_console.hpp ****     static void _console_destroy() {
  16:src/../h/_console.hpp ****         delete buffer_in_;
  17:src/../h/_console.hpp ****         delete buffer_out_;
  18:src/../h/_console.hpp ****     }
  19:src/../h/_console.hpp **** 
  20:src/../h/_console.hpp ****     static char _getc() {
  21:src/../h/_console.hpp ****         return buffer_in_->removeFirst();
  22:src/../h/_console.hpp ****     }
  23:src/../h/_console.hpp **** 
  24:src/../h/_console.hpp ****     static void _putc(char c) {
  25:src/../h/_console.hpp ****         buffer_out_->addLast(c);
  26:src/../h/_console.hpp ****     }
  27:src/../h/_console.hpp **** 
  28:src/../h/_console.hpp ****     static bool _can_output() {
  29:src/../h/_console.hpp ****         return buffer_out_->getCnt() > 0;
  30:src/../h/_console.hpp ****     }
  31:src/../h/_console.hpp **** 
  32:src/../h/_console.hpp ****     static bool _can_input() {
  33:src/../h/_console.hpp ****         return buffer_in_->getCnt() < size_;
 134              		.loc 3 33 37
 135 00c0 97070000 		lla	a5,_ZN8_console5size_E
 135      93870700 
 136 00c8 83A70700 		lw	a5,0(a5)
 137              	.LBE75:
 138              	.LBE74:
  31:src/riscv.cpp ****     while ((c_stat & CONSOLE_RX_STATUS_BIT) && _console::_can_input()) {
 139              		.loc 1 31 45
GAS LISTING /tmp/ccCcDxah.s 			page 6


 140 00cc 63DCFA12 		ble	a5,s5,.L14
 141              	.LBB81:
  32:src/riscv.cpp ****         char c = *(uint8*)CONSOLE_RX_DATA;
 142              		.loc 1 32 9 is_stmt 1
 143              		.loc 1 32 18 is_stmt 0
 144 00d0 97070000 		lla	a5,CONSOLE_RX_DATA
 144      93870700 
 145 00d8 83B70700 		ld	a5,0(a5)
 146              		.loc 1 32 14
 147 00dc 03CA0700 		lbu	s4,0(a5)
 148              	.LVL12:
  33:src/riscv.cpp ****         _console::_add_to_in(c);
 149              		.loc 1 33 9 is_stmt 1
 150              	.LBB82:
 151              	.LBB83:
  34:src/../h/_console.hpp ****     }
  35:src/../h/_console.hpp **** 
  36:src/../h/_console.hpp ****     static char _remove_from_out() {
  37:src/../h/_console.hpp ****         char ret = buffer_out_->removeFirst();
  38:src/../h/_console.hpp ****         return ret;
  39:src/../h/_console.hpp ****     }
  40:src/../h/_console.hpp ****     static void _add_to_in(char c) {
  41:src/../h/_console.hpp ****         buffer_in_->addLast(c);
 152              		.loc 3 41 9
 153              		.loc 3 41 28 is_stmt 0
 154 00e0 97070000 		lla	a5,_ZN8_console10buffer_in_E
 154      93870700 
 155 00e8 83B40700 		ld	s1,0(a5)
 156              	.LVL13:
 157              	.LBB84:
 158              	.LBB85:
  47:src/../h/circular_buffer.hpp ****         sem_wait(mutex_);
 159              		.loc 2 47 17
 160 00ec 03B58400 		ld	a0,8(s1)
 161 00f0 97000000 		call	_Z8sem_waitP10_semaphore
 161      E7800000 
 162              	.LVL14:
  48:src/../h/circular_buffer.hpp ****         buffer_[last_idx_] = c;
 163              		.loc 2 48 17
 164 00f8 03B50401 		ld	a0,16(s1)
 165 00fc 97000000 		call	_Z8sem_waitP10_semaphore
 165      E7800000 
 166              	.LVL15:
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 167              		.loc 2 49 9
 168 0104 83B78402 		ld	a5,40(s1)
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 169              		.loc 2 49 17
 170 0108 03A7C401 		lw	a4,28(s1)
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 171              		.loc 2 49 16
 172 010c B387E700 		add	a5,a5,a4
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 173              		.loc 2 49 9
 174 0110 23804701 		sb	s4,0(a5)
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 175              		.loc 2 50 22
GAS LISTING /tmp/ccCcDxah.s 			page 7


 176 0114 83A7C401 		lw	a5,28(s1)
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 177              		.loc 2 50 32
 178 0118 9B871700 		addiw	a5,a5,1
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 179              		.loc 2 50 39
 180 011c 03A70402 		lw	a4,32(s1)
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 181              		.loc 2 50 37
 182 0120 BBE7E702 		remw	a5,a5,a4
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 183              		.loc 2 50 9
 184 0124 23AEF400 		sw	a5,28(s1)
  51:src/../h/circular_buffer.hpp ****         sem_signal(item_);
 185              		.loc 2 51 19
 186 0128 03B50401 		ld	a0,16(s1)
 187 012c 97000000 		call	_Z10sem_signalP10_semaphore
 187      E7800000 
 188              	.LVL16:
  52:src/../h/circular_buffer.hpp ****         return buffer_[last_idx_];
 189              		.loc 2 52 19
 190 0134 03B50400 		ld	a0,0(s1)
 191 0138 97000000 		call	_Z10sem_signalP10_semaphore
 191      E7800000 
 192              	.LVL17:
 193              	.LBE85:
 194              	.LBE84:
 195              	.LBE83:
 196              	.LBE82:
  34:src/riscv.cpp ****         c_stat = *(uint8*)CONSOLE_STATUS;
 197              		.loc 1 34 9 is_stmt 1
 198              		.loc 1 34 16 is_stmt 0
 199 0140 83440900 		lbu	s1,0(s2)
 200              	.LVL18:
 201              	.L9:
 202              	.LBE81:
  31:src/riscv.cpp ****         char c = *(uint8*)CONSOLE_RX_DATA;
 203              		.loc 1 31 5 is_stmt 1
  31:src/riscv.cpp ****         char c = *(uint8*)CONSOLE_RX_DATA;
 204              		.loc 1 31 45 is_stmt 0
 205 0144 93F71400 		andi	a5,s1,1
 206 0148 638E070A 		beq	a5,zero,.L14
 207              	.LBB86:
 208              	.LBB80:
  33:src/../h/_console.hpp ****     }
 209              		.loc 3 33 9 is_stmt 1
  33:src/../h/_console.hpp ****     }
 210              		.loc 3 33 34 is_stmt 0
 211 014c 97070000 		lla	a5,_ZN8_console10buffer_in_E
 211      93870700 
 212 0154 03BA0700 		ld	s4,0(a5)
 213              	.LVL19:
 214              	.LBB79:
 215              	.LBB78:
  58:src/../h/circular_buffer.hpp **** 
 216              		.loc 2 58 17
 217 0158 03350A01 		ld	a0,16(s4)
GAS LISTING /tmp/ccCcDxah.s 			page 8


 218 015c 97000000 		call	_Z8sem_waitP10_semaphore
 218      E7800000 
 219              	.LVL20:
  60:src/../h/circular_buffer.hpp ****             ret = last_idx_ - first_idx_;
 220              		.loc 2 60 13
 221 0164 8327CA01 		lw	a5,28(s4)
  60:src/../h/circular_buffer.hpp ****             ret = last_idx_ - first_idx_;
 222              		.loc 2 60 26
 223 0168 832A8A01 		lw	s5,24(s4)
  60:src/../h/circular_buffer.hpp ****             ret = last_idx_ - first_idx_;
 224              		.loc 2 60 9
 225 016c E3CE57F3 		blt	a5,s5,.L7
  61:src/../h/circular_buffer.hpp ****         } else {
 226              		.loc 2 61 13
 227 0170 BB8A5741 		subw	s5,a5,s5
 228              	.LVL21:
 229 0174 6FF01FF4 		j	.L8
 230              	.LVL22:
 231              	.L11:
 232              	.LBE78:
 233              	.LBE79:
 234              	.LBE80:
 235              	.LBE86:
 236              	.LBB87:
 237              	.LBB88:
 238              	.LBB89:
 239              	.LBB90:
  63:src/../h/circular_buffer.hpp ****         }
 240              		.loc 2 63 19
 241 0178 03A70402 		lw	a4,32(s1)
  63:src/../h/circular_buffer.hpp ****         }
 242              		.loc 2 63 25
 243 017c 3B0A4741 		subw	s4,a4,s4
  63:src/../h/circular_buffer.hpp ****         }
 244              		.loc 2 63 13
 245 0180 3B0AFA00 		addw	s4,s4,a5
 246              	.LVL23:
 247              	.L12:
 248              		.loc 2 66 19
 249 0184 03B50401 		ld	a0,16(s1)
 250 0188 97000000 		call	_Z10sem_signalP10_semaphore
 250      E7800000 
 251              	.LVL24:
 252              	.LBE90:
 253              	.LBE89:
 254              	.LBE88:
 255              	.LBE87:
  35:src/riscv.cpp ****     }
  36:src/riscv.cpp **** 
  37:src/riscv.cpp ****     // This should not be blocking.
  38:src/riscv.cpp ****     while ((c_stat & CONSOLE_TX_STATUS_BIT) && _console::_can_output()) {
 256              		.loc 1 38 45
 257 0190 6354400B 		ble	s4,zero,.L10
 258              	.LBB94:
  39:src/riscv.cpp ****         char c = _console::_remove_from_out();
 259              		.loc 1 39 9 is_stmt 1
 260              	.LBB95:
GAS LISTING /tmp/ccCcDxah.s 			page 9


 261              	.LBB96:
  37:src/../h/_console.hpp ****         return ret;
 262              		.loc 3 37 9
  37:src/../h/_console.hpp ****         return ret;
 263              		.loc 3 37 44 is_stmt 0
 264 0194 97070000 		lla	a5,_ZN8_console11buffer_out_E
 264      93870700 
 265 019c 83B40700 		ld	s1,0(a5)
 266              	.LVL25:
 267              	.LBB97:
 268              	.LBB98:
  37:src/../h/circular_buffer.hpp ****         sem_wait(mutex_);
 269              		.loc 2 37 17
 270 01a0 03B50400 		ld	a0,0(s1)
 271 01a4 97000000 		call	_Z8sem_waitP10_semaphore
 271      E7800000 
 272              	.LVL26:
  38:src/../h/circular_buffer.hpp ****         T ret = buffer_[first_idx_];
 273              		.loc 2 38 17
 274 01ac 03B50401 		ld	a0,16(s1)
 275 01b0 97000000 		call	_Z8sem_waitP10_semaphore
 275      E7800000 
 276              	.LVL27:
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 277              		.loc 2 39 17
 278 01b8 03B78402 		ld	a4,40(s1)
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 279              		.loc 2 39 25
 280 01bc 83A78401 		lw	a5,24(s1)
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 281              		.loc 2 39 24
 282 01c0 3307F700 		add	a4,a4,a5
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 283              		.loc 2 39 11
 284 01c4 034A0700 		lbu	s4,0(a4)
 285              	.LVL28:
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 286              		.loc 2 40 34
 287 01c8 9B871700 		addiw	a5,a5,1
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 288              		.loc 2 40 41
 289 01cc 03A70402 		lw	a4,32(s1)
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 290              		.loc 2 40 39
 291 01d0 BBE7E702 		remw	a5,a5,a4
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 292              		.loc 2 40 9
 293 01d4 23ACF400 		sw	a5,24(s1)
  41:src/../h/circular_buffer.hpp ****         sem_signal(space_);
 294              		.loc 2 41 19
 295 01d8 03B50401 		ld	a0,16(s1)
 296 01dc 97000000 		call	_Z10sem_signalP10_semaphore
 296      E7800000 
 297              	.LVL29:
  42:src/../h/circular_buffer.hpp ****         return ret;
 298              		.loc 2 42 19
 299 01e4 03B58400 		ld	a0,8(s1)
GAS LISTING /tmp/ccCcDxah.s 			page 10


 300 01e8 97000000 		call	_Z10sem_signalP10_semaphore
 300      E7800000 
 301              	.LVL30:
 302              	.LBE98:
 303              	.LBE97:
  38:src/../h/_console.hpp ****     }
 304              		.loc 3 38 9 is_stmt 1
 305              	.LBE96:
 306              	.LBE95:
  40:src/riscv.cpp ****         *(uint8*)CONSOLE_TX_DATA = c;
 307              		.loc 1 40 9
 308 01f0 97070000 		lla	a5,CONSOLE_TX_DATA
 308      93870700 
 309 01f8 83B70700 		ld	a5,0(a5)
 310              		.loc 1 40 34 is_stmt 0
 311 01fc 23804701 		sb	s4,0(a5)
  41:src/riscv.cpp ****         c_stat = *(uint8*)CONSOLE_STATUS;
 312              		.loc 1 41 9 is_stmt 1
 313              		.loc 1 41 16 is_stmt 0
 314 0200 83440900 		lbu	s1,0(s2)
 315              	.LVL31:
 316              	.L14:
 317              	.LBE94:
  38:src/riscv.cpp ****         char c = _console::_remove_from_out();
 318              		.loc 1 38 5 is_stmt 1
  38:src/riscv.cpp ****         char c = _console::_remove_from_out();
 319              		.loc 1 38 45 is_stmt 0
 320 0204 93F40402 		andi	s1,s1,32
 321              	.LVL32:
 322 0208 63880402 		beq	s1,zero,.L10
 323              	.LBB99:
 324              	.LBB93:
  29:src/../h/_console.hpp ****     }
 325              		.loc 3 29 9 is_stmt 1
  29:src/../h/_console.hpp ****     }
 326              		.loc 3 29 35 is_stmt 0
 327 020c 97070000 		lla	a5,_ZN8_console11buffer_out_E
 327      93870700 
 328 0214 83B40700 		ld	s1,0(a5)
 329              	.LVL33:
 330              	.LBB92:
 331              	.LBB91:
  58:src/../h/circular_buffer.hpp **** 
 332              		.loc 2 58 17
 333 0218 03B50401 		ld	a0,16(s1)
 334 021c 97000000 		call	_Z8sem_waitP10_semaphore
 334      E7800000 
 335              	.LVL34:
  60:src/../h/circular_buffer.hpp ****             ret = last_idx_ - first_idx_;
 336              		.loc 2 60 13
 337 0224 83A7C401 		lw	a5,28(s1)
  60:src/../h/circular_buffer.hpp ****             ret = last_idx_ - first_idx_;
 338              		.loc 2 60 26
 339 0228 03AA8401 		lw	s4,24(s1)
  60:src/../h/circular_buffer.hpp ****             ret = last_idx_ - first_idx_;
 340              		.loc 2 60 9
 341 022c E3C647F5 		blt	a5,s4,.L11
GAS LISTING /tmp/ccCcDxah.s 			page 11


  61:src/../h/circular_buffer.hpp ****         } else {
 342              		.loc 2 61 13
 343 0230 3B8A4741 		subw	s4,a5,s4
 344              	.LVL35:
 345 0234 6FF01FF5 		j	.L12
 346              	.LVL36:
 347              	.L10:
 348              	.LBE91:
 349              	.LBE92:
 350              	.LBE93:
 351              	.LBE99:
  42:src/riscv.cpp ****     }
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****     // Write to output/input
  45:src/riscv.cpp ****     plic_complete(irq);
 352              		.loc 1 45 5 is_stmt 1 discriminator 4
 353              		.loc 1 45 18 is_stmt 0 discriminator 4
 354 0238 13850900 		mv	a0,s3
 355 023c 97000000 		call	plic_complete
 355      E7800000 
 356              	.LVL37:
 357              	.L3:
  46:src/riscv.cpp **** }
 358              		.loc 1 46 1
 359 0244 83308103 		ld	ra,56(sp)
 360              		.cfi_restore 1
 361 0248 03340103 		ld	s0,48(sp)
 362              		.cfi_restore 8
 363              		.cfi_def_cfa 2, 64
 364 024c 83348102 		ld	s1,40(sp)
 365              		.cfi_restore 9
 366 0250 03390102 		ld	s2,32(sp)
 367              		.cfi_restore 18
 368 0254 83398101 		ld	s3,24(sp)
 369              		.cfi_restore 19
 370              	.LVL38:
 371 0258 033A0101 		ld	s4,16(sp)
 372              		.cfi_restore 20
 373 025c 833A8100 		ld	s5,8(sp)
 374              		.cfi_restore 21
 375 0260 13010104 		addi	sp,sp,64
 376              		.cfi_def_cfa_offset 0
 377 0264 67800000 		jr	ra
 378              		.cfi_endproc
 379              	.LFE58:
 381              		.align	2
 382              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 384              	_ZN5Riscv20handleSupervisorTrapEv:
 385              	.LFB59:
  47:src/riscv.cpp **** 
  48:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  49:src/riscv.cpp **** {
 386              		.loc 1 49 1 is_stmt 1
 387              		.cfi_startproc
 388 0268 130101F9 		addi	sp,sp,-112
 389              		.cfi_def_cfa_offset 112
 390 026c 23341106 		sd	ra,104(sp)
GAS LISTING /tmp/ccCcDxah.s 			page 12


 391 0270 23308106 		sd	s0,96(sp)
 392 0274 233C9104 		sd	s1,88(sp)
 393 0278 23382105 		sd	s2,80(sp)
 394              		.cfi_offset 1, -8
 395              		.cfi_offset 8, -16
 396              		.cfi_offset 9, -24
 397              		.cfi_offset 18, -32
 398 027c 13040107 		addi	s0,sp,112
 399              		.cfi_def_cfa 8, 0
  50:src/riscv.cpp ****     uint64 a0, a1, a2, a3, a4, a5, a6, a7;
 400              		.loc 1 50 5
  51:src/riscv.cpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
 401              		.loc 1 51 5
 402              		.loc 1 51 46 is_stmt 0
 403              	 #APP
 404              	# 51 "src/riscv.cpp" 1
  52              	    __asm__ volatile ("mv %0, a1" : "=r"(a1));
 405              		mv a5, a0
 406              	# 0 "" 2
 407              	.LVL39:
 408              		.loc 1 52 5 is_stmt 1
 409              		.loc 1 52 46 is_stmt 0
 410              	# 52 "src/riscv.cpp" 1
  53              	    __asm__ volatile ("mv %0, a2" : "=r"(a2));
 411              		mv s1, a1
 412              	# 0 "" 2
 413              	.LVL40:
 414              		.loc 1 53 5 is_stmt 1
 415              		.loc 1 53 46 is_stmt 0
 416              	# 53 "src/riscv.cpp" 1
  54              	    __asm__ volatile ("mv %0, a3" : "=r"(a3));
 417              		mv a0, a2
 418              	# 0 "" 2
 419              	.LVL41:
 420              		.loc 1 54 5 is_stmt 1
 421              		.loc 1 54 46 is_stmt 0
 422              	# 54 "src/riscv.cpp" 1
  55              	    __asm__ volatile ("mv %0, a4" : "=r"(a4));
 423              		mv a1, a3
 424              	# 0 "" 2
 425              	.LVL42:
 426              		.loc 1 55 5 is_stmt 1
 427              		.loc 1 55 46 is_stmt 0
 428              	# 55 "src/riscv.cpp" 1
  56              	    __asm__ volatile ("mv %0, a5" : "=r"(a5));
 429              		mv a4, a4
 430              	# 0 "" 2
 431              	.LVL43:
 432              		.loc 1 56 5 is_stmt 1
 433              		.loc 1 56 46 is_stmt 0
 434              	# 56 "src/riscv.cpp" 1
  57              	    __asm__ volatile ("mv %0, a6" : "=r"(a6));
 435              		mv a4, a5
 436              	# 0 "" 2
 437              	.LVL44:
 438              		.loc 1 57 5 is_stmt 1
 439              		.loc 1 57 46 is_stmt 0
GAS LISTING /tmp/ccCcDxah.s 			page 13


 440              	# 57 "src/riscv.cpp" 1
  58              	    __asm__ volatile ("mv %0, a7" : "=r"(a7));
 441              		mv a4, a6
 442              	# 0 "" 2
 443              	.LVL45:
 444              		.loc 1 58 5 is_stmt 1
 445              		.loc 1 58 46 is_stmt 0
 446              	# 58 "src/riscv.cpp" 1
  59              	
 447              		mv a4, a7
 448              	# 0 "" 2
 449              	.LVL46:
  60:src/riscv.cpp ****     uint64 scause = r_scause();
 450              		.loc 1 60 5 is_stmt 1
 451              	 #NO_APP
 452              	.LBB147:
 453              	.LBB148:
 454              		.file 4 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** extern const size_t DEFAULT_STACK_SIZE;
  11:src/../h/riscv.hpp **** extern const time_t DEFAULT_TIME_SLICE;
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register scause
  21:src/../h/riscv.hpp ****     static uint64 r_scause();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register scause
  24:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register sepc
  27:src/../h/riscv.hpp ****     static uint64 r_sepc();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register sepc
  30:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stvec
  33:src/../h/riscv.hpp ****     static uint64 r_stvec();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stvec
  36:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // read register stval
  39:src/../h/riscv.hpp ****     static uint64 r_stval();
GAS LISTING /tmp/ccCcDxah.s 			page 14


  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // write register stval
  42:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     enum BitMaskSip
  45:src/../h/riscv.hpp ****     {
  46:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  47:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  48:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  49:src/../h/riscv.hpp ****     };
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask set register sip
  52:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // mask clear register sip
  55:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // read register sip
  58:src/../h/riscv.hpp ****     static uint64 r_sip();
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // write register sip
  61:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     enum BitMaskSstatus
  64:src/../h/riscv.hpp ****     {
  65:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  66:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  67:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  68:src/../h/riscv.hpp ****     };
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask set register sstatus
  71:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // mask clear register sstatus
  74:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // read register sstatus
  77:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // write register sstatus
  80:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // supervisor trap
  83:src/../h/riscv.hpp ****     static void supervisorTrap();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** private:
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     // supervisor trap handler
  88:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp ****     static void consoleHandler();
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** };
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  95:src/../h/riscv.hpp **** {
  96:src/../h/riscv.hpp ****     uint64 volatile scause;
GAS LISTING /tmp/ccCcDxah.s 			page 15


 455              		.loc 4 96 5
  97:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 456              		.loc 4 97 5
 457              		.loc 4 97 72 is_stmt 0
 458              	 #APP
 459              	# 97 "src/../h/riscv.hpp" 1
  98              	    return scause;
 460              		csrr a4, scause
 461              	# 0 "" 2
 462              	 #NO_APP
 463 02a4 233CE4FA 		sd	a4,-72(s0)
 464              		.loc 4 98 5 is_stmt 1
 465              		.loc 4 98 12 is_stmt 0
 466 02a8 033784FB 		ld	a4,-72(s0)
 467              	.LVL47:
 468              	.LBE148:
 469              	.LBE147:
  61:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 470              		.loc 1 61 5 is_stmt 1
 471              	.LBB149:
 472              		.loc 1 61 40 is_stmt 0
 473 02ac 130687FF 		addi	a2,a4,-8
 474              		.loc 1 61 5
 475 02b0 93061000 		li	a3,1
 476 02b4 63F0C604 		bleu	a2,a3,.L44
 477              	.LBE149:
  62:src/riscv.cpp ****     {
  63:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  64:src/riscv.cpp ****         // Should be triggered on syscall.
  65:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  66:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  67:src/riscv.cpp ****         // debug_print("Supervisor trap handler called\n");
  68:src/riscv.cpp **** 
  69:src/riscv.cpp ****         uint64 res = 0;
  70:src/riscv.cpp ****         switch (a0) {
  71:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
  72:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
  73:src/riscv.cpp ****                 break;
  74:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
  75:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
  76:src/riscv.cpp ****                 break;
  77:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
  78:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
  79:src/riscv.cpp ****                 break;
  80:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
  81:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
  82:src/riscv.cpp ****                 break;
  83:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
  84:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
  85:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
  86:src/riscv.cpp ****                 // debug_print("Thread created with handle: ");
  87:src/riscv.cpp ****                 // debug_print((uint64)*handle);
  88:src/riscv.cpp ****                 // debug_print("\n");
  89:src/riscv.cpp ****                 // debug_print("Thread body: ");
  90:src/riscv.cpp ****                 // debug_print((uint64)a2);
  91:src/riscv.cpp ****                 // debug_print("\n");
  92:src/riscv.cpp ****                 // debug_print("Thread arg: ");
GAS LISTING /tmp/ccCcDxah.s 			page 16


  93:src/riscv.cpp ****                 // debug_print((uint64)a3);
  94:src/riscv.cpp ****                 // debug_print("\n");
  95:src/riscv.cpp ****                 if (!(*handle))
  96:src/riscv.cpp ****                     res = -1;
  97:src/riscv.cpp ****                 }
  98:src/riscv.cpp ****                 break;
  99:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
 100:src/riscv.cpp ****                 TCB::exit();
 101:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 102:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 103:src/riscv.cpp ****                 delete *handle;
 104:src/riscv.cpp ****                 }
 105:src/riscv.cpp ****                 break;
 106:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
 107:src/riscv.cpp ****                 TCB::dispatch();
 108:src/riscv.cpp ****                 break;
 109:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
 110:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
 111:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
 112:src/riscv.cpp ****                 if (!(*handle))
 113:src/riscv.cpp ****                     res = -1;
 114:src/riscv.cpp ****                 debug_print("Semaphore open: Handle: ");
 115:src/riscv.cpp ****                 debug_print((uint64)*handle);
 116:src/riscv.cpp ****                 debug_print("\n");
 117:src/riscv.cpp ****                 debug_print("On handle addr: ");
 118:src/riscv.cpp ****                 debug_print((uint64)handle);
 119:src/riscv.cpp ****                 debug_print("\n");
 120:src/riscv.cpp ****                 }
 121:src/riscv.cpp ****                 break;
 122:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
 123:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 124:src/riscv.cpp ****                 handle->close();
 125:src/riscv.cpp ****                 delete handle;
 126:src/riscv.cpp ****                 }
 127:src/riscv.cpp ****                 break;
 128:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
 129:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 130:src/riscv.cpp ****                 res = handle->wait();
 131:src/riscv.cpp ****             }
 132:src/riscv.cpp ****                 break;
 133:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 134:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 135:src/riscv.cpp ****                 handle->signal();
 136:src/riscv.cpp ****             }
 137:src/riscv.cpp ****                 break;
 138:src/riscv.cpp ****             case SyscallCode::TIME_SLEEP: {
 139:src/riscv.cpp ****                 time_t time = (time_t)a1;
 140:src/riscv.cpp ****                 // TODO: Enchance rounding.
 141:src/riscv.cpp ****                 uint64 time_slices_left = time / TCB::TIME_SLICE;
 142:src/riscv.cpp ****                 Scheduler::putToSleep(time_slices_left);
 143:src/riscv.cpp ****             }
 144:src/riscv.cpp ****                 break;
 145:src/riscv.cpp ****             case SyscallCode::GETC:
 146:src/riscv.cpp ****                 res = _console::_getc();
 147:src/riscv.cpp ****                 break;
 148:src/riscv.cpp ****             case SyscallCode::PUTC:
 149:src/riscv.cpp ****                 _console::_putc((char)a1);
GAS LISTING /tmp/ccCcDxah.s 			page 17


 150:src/riscv.cpp ****                 break;
 151:src/riscv.cpp ****         }
 152:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 153:src/riscv.cpp **** 
 154:src/riscv.cpp ****         // Overwrite a0 with the result from the syscall.
 155:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 156:src/riscv.cpp **** 
 157:src/riscv.cpp ****         w_sstatus(sstatus);
 158:src/riscv.cpp ****         w_sepc(sepc);
 159:src/riscv.cpp ****     }
 160:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 478              		.loc 1 160 10 is_stmt 1
 479              	.LBB222:
 480              	.LBB150:
 481 02b8 9307F0FF 		li	a5,-1
 482              	.LVL48:
 483 02bc 9397F703 		slli	a5,a5,63
 484 02c0 93871700 		addi	a5,a5,1
 485 02c4 6306F734 		beq	a4,a5,.L45
 161:src/riscv.cpp ****     {
 162:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 163:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 164:src/riscv.cpp ****         TCB::timeSliceCounter++;
 165:src/riscv.cpp ****         Scheduler::maybeWakeThreads();
 166:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 167:src/riscv.cpp ****         {
 168:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 169:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 170:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 171:src/riscv.cpp ****             TCB::dispatch();
 172:src/riscv.cpp ****             w_sstatus(sstatus);
 173:src/riscv.cpp ****             w_sepc(sepc);
 174:src/riscv.cpp ****         }
 175:src/riscv.cpp ****     }
 176:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 486              		.loc 1 176 10
 487 02c8 9307F0FF 		li	a5,-1
 488 02cc 9397F703 		slli	a5,a5,63
 489 02d0 93879700 		addi	a5,a5,9
 490 02d4 631CF708 		bne	a4,a5,.L17
 177:src/riscv.cpp ****     {
 178:src/riscv.cpp ****         debug_print("Console handler called\n");
 491              		.loc 1 178 9
 492              		.loc 1 178 20 is_stmt 0
 493 02d8 17050000 		lla	a0,.LC5
 493      13050500 
 494              	.LVL49:
 495 02e0 97000000 		call	_Z11debug_printPKc
 495      E7800000 
 496              	.LVL50:
 179:src/riscv.cpp ****         Riscv::consoleHandler();
 497              		.loc 1 179 9 is_stmt 1
 498              		.loc 1 179 30 is_stmt 0
 499 02e8 97000000 		call	_ZN5Riscv14consoleHandlerEv
 499      E7800000 
 500              	.LVL51:
 501              	.LBE150:
GAS LISTING /tmp/ccCcDxah.s 			page 18


 502              	.LBE222:
 180:src/riscv.cpp ****     }
 181:src/riscv.cpp ****     else
 182:src/riscv.cpp ****     {
 183:src/riscv.cpp ****         // unexpected trap cause
 184:src/riscv.cpp ****     }
 185:src/riscv.cpp **** }...
 503              		.loc 1 185 1
 504 02f0 6F00C007 		j	.L17
 505              	.LVL52:
 506              	.L44:
 507              	.LBB223:
 508              	.LBB166:
  65:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 509              		.loc 1 65 9 is_stmt 1
 510              	.LBB167:
 511              	.LBB168:
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     uint64 volatile sepc;
 512              		.loc 4 108 5
 109:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 513              		.loc 4 109 5
 514              		.loc 4 109 64 is_stmt 0
 515              	 #APP
 516              	# 109 "src/../h/riscv.hpp" 1
 110              	    return sepc;
 517              		csrr a4, sepc
 518              	# 0 "" 2
 519              	.LVL53:
 520              	 #NO_APP
 521 02f8 2334E4FC 		sd	a4,-56(s0)
 522              		.loc 4 110 5 is_stmt 1
 523              		.loc 4 110 12 is_stmt 0
 524 02fc 033784FC 		ld	a4,-56(s0)
 525              	.LBE168:
 526              	.LBE167:
  65:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 527              		.loc 1 65 41
 528 0300 13074700 		addi	a4,a4,4
  65:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 529              		.loc 1 65 43
 530 0304 233CE4F8 		sd	a4,-104(s0)
  66:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 531              		.loc 1 66 9 is_stmt 1
 532              	.LBB169:
 533              	.LBB170:
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
GAS LISTING /tmp/ccCcDxah.s 			page 19


 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     uint64 volatile stvec;
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 122:src/../h/riscv.hpp ****     return stvec;
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     uint64 volatile stval;
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 134:src/../h/riscv.hpp ****     return stval;
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     uint64 volatile sip;
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 156:src/../h/riscv.hpp ****     return sip;
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 170:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccCcDxah.s 			page 20


 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 534              		.loc 4 176 5
 177:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 535              		.loc 4 177 5
 536              		.loc 4 177 76 is_stmt 0
 537              	 #APP
 538              	# 177 "src/../h/riscv.hpp" 1
 178              	    return sstatus;
 539              		csrr a4, sstatus
 540              	# 0 "" 2
 541              	 #NO_APP
 542 030c 2330E4FC 		sd	a4,-64(s0)
 543              		.loc 4 178 5 is_stmt 1
 544              		.loc 4 178 12 is_stmt 0
 545 0310 033704FC 		ld	a4,-64(s0)
 546              	.LBE170:
 547              	.LBE169:
  66:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 548              		.loc 1 66 45
 549 0314 2330E4FA 		sd	a4,-96(s0)
  69:src/riscv.cpp ****         uint64 res = 0;
 550              		.loc 1 69 9 is_stmt 1
 551              	.LVL54:
  70:src/riscv.cpp ****         switch (a0) {
 552              		.loc 1 70 9
 553              	.LBB171:
 554 0318 13072004 		li	a4,66
 555 031c 636EF72C 		bgtu	a5,a4,.L39
 556 0320 93972700 		slli	a5,a5,2
 557              	.LVL55:
 558 0324 17070000 		lla	a4,.L21
 558      13070700 
 559 032c B387E700 		add	a5,a5,a4
 560 0330 83A70700 		lw	a5,0(a5)
 561 0334 B387E700 		add	a5,a5,a4
 562 0338 67800700 		jr	a5
 563              		.section	.rodata
 564              		.align	2
 565              		.align	2
 566              	.L21:
 567 0000 00000000 		.word	.L39-.L21
 568 0004 00000000 		.word	.L34-.L21
 569 0008 00000000 		.word	.L33-.L21
 570 000c 00000000 		.word	.L32-.L21
 571 0010 00000000 		.word	.L31-.L21
 572 0014 00000000 		.word	.L39-.L21
 573 0018 00000000 		.word	.L39-.L21
 574 001c 00000000 		.word	.L39-.L21
 575 0020 00000000 		.word	.L39-.L21
 576 0024 00000000 		.word	.L39-.L21
 577 0028 00000000 		.word	.L39-.L21
 578 002c 00000000 		.word	.L39-.L21
GAS LISTING /tmp/ccCcDxah.s 			page 21


 579 0030 00000000 		.word	.L39-.L21
 580 0034 00000000 		.word	.L39-.L21
 581 0038 00000000 		.word	.L39-.L21
 582 003c 00000000 		.word	.L39-.L21
 583 0040 00000000 		.word	.L39-.L21
 584 0044 00000000 		.word	.L30-.L21
 585 0048 00000000 		.word	.L29-.L21
 586 004c 00000000 		.word	.L28-.L21
 587 0050 00000000 		.word	.L39-.L21
 588 0054 00000000 		.word	.L39-.L21
 589 0058 00000000 		.word	.L39-.L21
 590 005c 00000000 		.word	.L39-.L21
 591 0060 00000000 		.word	.L39-.L21
 592 0064 00000000 		.word	.L39-.L21
 593 0068 00000000 		.word	.L39-.L21
 594 006c 00000000 		.word	.L39-.L21
 595 0070 00000000 		.word	.L39-.L21
 596 0074 00000000 		.word	.L39-.L21
 597 0078 00000000 		.word	.L39-.L21
 598 007c 00000000 		.word	.L39-.L21
 599 0080 00000000 		.word	.L39-.L21
 600 0084 00000000 		.word	.L27-.L21
 601 0088 00000000 		.word	.L26-.L21
 602 008c 00000000 		.word	.L25-.L21
 603 0090 00000000 		.word	.L24-.L21
 604 0094 00000000 		.word	.L39-.L21
 605 0098 00000000 		.word	.L39-.L21
 606 009c 00000000 		.word	.L39-.L21
 607 00a0 00000000 		.word	.L39-.L21
 608 00a4 00000000 		.word	.L39-.L21
 609 00a8 00000000 		.word	.L39-.L21
 610 00ac 00000000 		.word	.L39-.L21
 611 00b0 00000000 		.word	.L39-.L21
 612 00b4 00000000 		.word	.L39-.L21
 613 00b8 00000000 		.word	.L39-.L21
 614 00bc 00000000 		.word	.L39-.L21
 615 00c0 00000000 		.word	.L39-.L21
 616 00c4 00000000 		.word	.L23-.L21
 617 00c8 00000000 		.word	.L39-.L21
 618 00cc 00000000 		.word	.L39-.L21
 619 00d0 00000000 		.word	.L39-.L21
 620 00d4 00000000 		.word	.L39-.L21
 621 00d8 00000000 		.word	.L39-.L21
 622 00dc 00000000 		.word	.L39-.L21
 623 00e0 00000000 		.word	.L39-.L21
 624 00e4 00000000 		.word	.L39-.L21
 625 00e8 00000000 		.word	.L39-.L21
 626 00ec 00000000 		.word	.L39-.L21
 627 00f0 00000000 		.word	.L39-.L21
 628 00f4 00000000 		.word	.L39-.L21
 629 00f8 00000000 		.word	.L39-.L21
 630 00fc 00000000 		.word	.L39-.L21
 631 0100 00000000 		.word	.L39-.L21
 632 0104 00000000 		.word	.L22-.L21
 633 0108 00000000 		.word	.L20-.L21
 634              		.text
 635              	.L34:
GAS LISTING /tmp/ccCcDxah.s 			page 22


 636              	.LBB172:
  71:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
 637              		.loc 1 71 13
  72:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 638              		.loc 1 72 17
  72:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 639              		.loc 1 72 72 is_stmt 0
 640 033c 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 640      E7800000 
 641              	.LVL56:
 642 0344 93850400 		mv	a1,s1
 643 0348 97000000 		call	_ZN15MemoryAllocator9mem_allocEm
 643      E7800000 
 644              	.LVL57:
 645 0350 13090500 		mv	s2,a0
 646              	.LVL58:
  73:src/riscv.cpp ****                 break;
 647              		.loc 1 73 17 is_stmt 1
 648              	.L19:
 649              	.LBE172:
 650              	.LBE171:
 152:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 651              		.loc 1 152 9
 152:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 652              		.loc 1 152 52 is_stmt 0
 653              	 #APP
 654              	# 152 "src/riscv.cpp" 1
 155:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 655              		mv a0, s2
 656              	# 0 "" 2
 657              		.loc 1 155 9 is_stmt 1
 155:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 658              		.loc 1 155 58 is_stmt 0
 659              	# 155 "src/riscv.cpp" 1
 157:src/riscv.cpp ****         w_sstatus(sstatus);
 660              		sd s2, 10*8(x8)
 661              	# 0 "" 2
 662              		.loc 1 157 9 is_stmt 1
 157:src/riscv.cpp ****         w_sstatus(sstatus);
 663              		.loc 1 157 18 is_stmt 0
 664              	 #NO_APP
 665 035c 833704FA 		ld	a5,-96(s0)
 666              	.LVL59:
 667              	.LBB205:
 668              	.LBB206:
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 669              		.loc 4 183 5 is_stmt 1
 670              		.loc 4 183 77 is_stmt 0
 671              	 #APP
 672              	# 183 "src/../h/riscv.hpp" 1
 184              	}
 673              		csrw sstatus, a5
 674              	# 0 "" 2
GAS LISTING /tmp/ccCcDxah.s 			page 23


 675              	.LVL60:
 676              	 #NO_APP
 677              	.LBE206:
 678              	.LBE205:
 158:src/riscv.cpp ****         w_sepc(sepc);
 679              		.loc 1 158 9 is_stmt 1
 158:src/riscv.cpp ****         w_sepc(sepc);
 680              		.loc 1 158 15 is_stmt 0
 681 0364 833784F9 		ld	a5,-104(s0)
 682              	.LVL61:
 683              	.LBB207:
 684              	.LBB208:
 115:src/../h/riscv.hpp **** }
 685              		.loc 4 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 686              		.loc 4 115 65 is_stmt 0
 687              	 #APP
 688              	# 115 "src/../h/riscv.hpp" 1
 689              		csrw sepc, a5
 690              	# 0 "" 2
 691              	.LVL62:
 692              	 #NO_APP
 693              	.L17:
 694              	.LBE208:
 695              	.LBE207:
 696              	.LBE166:
 697              	.LBE223:
 698              		.loc 1 185 1
 699 036c 83308106 		ld	ra,104(sp)
 700              		.cfi_remember_state
 701              		.cfi_restore 1
 702 0370 03340106 		ld	s0,96(sp)
 703              		.cfi_restore 8
 704              		.cfi_def_cfa 2, 112
 705 0374 83348105 		ld	s1,88(sp)
 706              		.cfi_restore 9
 707 0378 03390105 		ld	s2,80(sp)
 708              		.cfi_restore 18
 709 037c 13010107 		addi	sp,sp,112
 710              		.cfi_def_cfa_offset 0
 711 0380 67800000 		jr	ra
 712              	.LVL63:
 713              	.L33:
 714              		.cfi_restore_state
 715              	.LBB224:
 716              	.LBB220:
 717              	.LBB209:
 718              	.LBB194:
  74:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
 719              		.loc 1 74 13 is_stmt 1
  75:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 720              		.loc 1 75 17
  75:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 721              		.loc 1 75 63 is_stmt 0
 722 0384 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 722      E7800000 
 723              	.LVL64:
GAS LISTING /tmp/ccCcDxah.s 			page 24


 724 038c 93850400 		mv	a1,s1
 725 0390 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv
 725      E7800000 
 726              	.LVL65:
  75:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 727              		.loc 1 75 21
 728 0398 13090500 		mv	s2,a0
 729              	.LVL66:
  76:src/riscv.cpp ****                 break;
 730              		.loc 1 76 17 is_stmt 1
 731 039c 6FF09FFB 		j	.L19
 732              	.LVL67:
 733              	.L32:
  77:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
 734              		.loc 1 77 13
  78:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 735              		.loc 1 78 17
  78:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 736              		.loc 1 78 67 is_stmt 0
 737 03a0 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 737      E7800000 
 738              	.LVL68:
 739 03a8 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv
 739      E7800000 
 740              	.LVL69:
  79:src/riscv.cpp ****                 break;
 741              		.loc 1 79 17 is_stmt 1
 742              	.LBE194:
 743              	.LBE209:
  69:src/riscv.cpp ****         uint64 res = 0;
 744              		.loc 1 69 16 is_stmt 0
 745 03b0 13090000 		li	s2,0
 746              	.LBB210:
 747              	.LBB195:
  79:src/riscv.cpp ****                 break;
 748              		.loc 1 79 17
 749 03b4 6FF01FFA 		j	.L19
 750              	.LVL70:
 751              	.L31:
  80:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
 752              		.loc 1 80 13 is_stmt 1
  81:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 753              		.loc 1 81 17
  81:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 754              		.loc 1 81 75 is_stmt 0
 755 03b8 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 755      E7800000 
 756              	.LVL71:
 757 03c0 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv
 757      E7800000 
 758              	.LVL72:
  82:src/riscv.cpp ****                 break;
 759              		.loc 1 82 17 is_stmt 1
 760              	.LBE195:
 761              	.LBE210:
  69:src/riscv.cpp ****         uint64 res = 0;
 762              		.loc 1 69 16 is_stmt 0
GAS LISTING /tmp/ccCcDxah.s 			page 25


 763 03c8 13090000 		li	s2,0
 764              	.LBB211:
 765              	.LBB196:
  82:src/riscv.cpp ****                 break;
 766              		.loc 1 82 17
 767 03cc 6FF09FF8 		j	.L19
 768              	.LVL73:
 769              	.L30:
  83:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 770              		.loc 1 83 13 is_stmt 1
  83:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 771              		.loc 1 83 46
 772              	.LBB173:
  84:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 773              		.loc 1 84 17
  85:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
 774              		.loc 1 85 17
  85:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
 775              		.loc 1 85 54 is_stmt 0
 776 03d0 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_
 776      E7800000 
 777              	.LVL74:
  85:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
 778              		.loc 1 85 25
 779 03d8 23B0A400 		sd	a0,0(s1)
  95:src/riscv.cpp ****                 if (!(*handle))
 780              		.loc 1 95 17 is_stmt 1
 781 03dc 63020522 		beq	a0,zero,.L40
 782              	.LBE173:
 783              	.LBE196:
 784              	.LBE211:
  69:src/riscv.cpp ****         uint64 res = 0;
 785              		.loc 1 69 16 is_stmt 0
 786 03e0 13090000 		li	s2,0
 787 03e4 6FF01FF7 		j	.L19
 788              	.LVL75:
 789              	.L29:
 790              	.LBB212:
 791              	.LBB197:
  99:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
 792              		.loc 1 99 13 is_stmt 1
  99:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
 793              		.loc 1 99 44
 794              	.LBB174:
 100:src/riscv.cpp ****                 TCB::exit();
 795              		.loc 1 100 17
 100:src/riscv.cpp ****                 TCB::exit();
 796              		.loc 1 100 26 is_stmt 0
 797 03e8 97000000 		call	_ZN3TCB4exitEv
 797      E7800000 
 798              	.LVL76:
 101:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 799              		.loc 1 101 17 is_stmt 1
 102:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 800              		.loc 1 102 17
 102:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 801              		.loc 1 102 24 is_stmt 0
GAS LISTING /tmp/ccCcDxah.s 			page 26


 802 03f0 83B70400 		ld	a5,0(s1)
 102:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 803              		.loc 1 102 23
 804 03f4 17070000 		lla	a4,_ZN3TCB7runningE
 804      13070700 
 805 03fc 03350700 		ld	a0,0(a4)
 806 0400 3305F540 		sub	a0,a0,a5
 807 0404 97050000 		lla	a1,.LC2
 807      93850500 
 808 040c 13351500 		seqz	a0,a0
 809 0410 97000000 		call	_Z6assertbPKc
 809      E7800000 
 810              	.LVL77:
 103:src/riscv.cpp ****                 delete *handle;
 811              		.loc 1 103 17 is_stmt 1
 103:src/riscv.cpp ****                 delete *handle;
 812              		.loc 1 103 24 is_stmt 0
 813 0418 83B40400 		ld	s1,0(s1)
 814              	.LVL78:
 103:src/riscv.cpp ****                 delete *handle;
 815              		.loc 1 103 31
 816 041c 6386041E 		beq	s1,zero,.L41
 817              	.LVL79:
 818              	.LBB175:
 819              	.LBB176:
 820              		.file 5 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
 821              		.loc 5 15 14 is_stmt 1
 822              		.loc 5 15 23 is_stmt 0
 823 0420 03B50401 		ld	a0,16(s1)
 824              		.loc 5 15 28
 825 0424 63060500 		beq	a0,zero,.L35
 826              		.loc 5 15 23
 827 0428 97000000 		call	_ZdaPv
 827      E7800000 
 828              	.LVL80:
 829              	.L35:
 830              	.LBE176:
 831              	.LBE175:
 103:src/riscv.cpp ****                 delete *handle;
 832              		.loc 1 103 25
 833 0430 13850400 		mv	a0,s1
 834 0434 97000000 		call	_ZdlPv
GAS LISTING /tmp/ccCcDxah.s 			page 27


 834      E7800000 
 835              	.LVL81:
 836              	.LBE174:
 837              	.LBE197:
 838              	.LBE212:
  69:src/riscv.cpp ****         uint64 res = 0;
 839              		.loc 1 69 16
 840 043c 13090000 		li	s2,0
 841              	.LBB213:
 842              	.LBB198:
 843              	.LBB177:
 844 0440 6FF05FF1 		j	.L19
 845              	.LVL82:
 846              	.L28:
 847              	.LBE177:
 106:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
 848              		.loc 1 106 13 is_stmt 1
 107:src/riscv.cpp ****                 TCB::dispatch();
 849              		.loc 1 107 17
 107:src/riscv.cpp ****                 TCB::dispatch();
 850              		.loc 1 107 30 is_stmt 0
 851 0444 97000000 		call	_ZN3TCB8dispatchEv
 851      E7800000 
 852              	.LVL83:
 108:src/riscv.cpp ****                 break;
 853              		.loc 1 108 17 is_stmt 1
 854              	.LBE198:
 855              	.LBE213:
  69:src/riscv.cpp ****         uint64 res = 0;
 856              		.loc 1 69 16 is_stmt 0
 857 044c 13090000 		li	s2,0
 858              	.LBB214:
 859              	.LBB199:
 108:src/riscv.cpp ****                 break;
 860              		.loc 1 108 17
 861 0450 6FF05FF0 		j	.L19
 862              	.LVL84:
 863              	.L27:
 109:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
 864              		.loc 1 109 13 is_stmt 1
 109:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
 865              		.loc 1 109 41
 866              	.LBB178:
 110:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
 867              		.loc 1 110 17
 111:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
 868              		.loc 1 111 17
 111:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
 869              		.loc 1 111 50 is_stmt 0
 870 0454 1B050500 		sext.w	a0,a0
 871              	.LVL85:
 872 0458 97000000 		call	_ZN10_semaphore4openEj
 872      E7800000 
 873              	.LVL86:
 111:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
 874              		.loc 1 111 25
 875 0460 23B0A400 		sd	a0,0(s1)
GAS LISTING /tmp/ccCcDxah.s 			page 28


 112:src/riscv.cpp ****                 if (!(*handle))
 876              		.loc 1 112 17 is_stmt 1
 877 0464 63020506 		beq	a0,zero,.L42
 878              	.LBE178:
 879              	.LBE199:
 880              	.LBE214:
  69:src/riscv.cpp ****         uint64 res = 0;
 881              		.loc 1 69 16 is_stmt 0
 882 0468 13090000 		li	s2,0
 883              	.L36:
 884              	.LVL87:
 885              	.LBB215:
 886              	.LBB200:
 887              	.LBB179:
 114:src/riscv.cpp ****                 debug_print("Semaphore open: Handle: ");
 888              		.loc 1 114 17 is_stmt 1
 114:src/riscv.cpp ****                 debug_print("Semaphore open: Handle: ");
 889              		.loc 1 114 28 is_stmt 0
 890 046c 17050000 		lla	a0,.LC3
 890      13050500 
 891 0474 97000000 		call	_Z11debug_printPKc
 891      E7800000 
 892              	.LVL88:
 115:src/riscv.cpp ****                 debug_print((uint64)*handle);
 893              		.loc 1 115 17 is_stmt 1
 115:src/riscv.cpp ****                 debug_print((uint64)*handle);
 894              		.loc 1 115 28 is_stmt 0
 895 047c 03B50400 		ld	a0,0(s1)
 896 0480 97000000 		call	_Z11debug_printm
 896      E7800000 
 897              	.LVL89:
 116:src/riscv.cpp ****                 debug_print("\n");
 898              		.loc 1 116 17 is_stmt 1
 116:src/riscv.cpp ****                 debug_print("\n");
 899              		.loc 1 116 28 is_stmt 0
 900 0488 17050000 		lla	a0,.LC1
 900      13050500 
 901 0490 97000000 		call	_Z11debug_printPKc
 901      E7800000 
 902              	.LVL90:
 117:src/riscv.cpp ****                 debug_print("On handle addr: ");
 903              		.loc 1 117 17 is_stmt 1
 117:src/riscv.cpp ****                 debug_print("On handle addr: ");
 904              		.loc 1 117 28 is_stmt 0
 905 0498 17050000 		lla	a0,.LC4
 905      13050500 
 906 04a0 97000000 		call	_Z11debug_printPKc
 906      E7800000 
 907              	.LVL91:
 118:src/riscv.cpp ****                 debug_print((uint64)handle);
 908              		.loc 1 118 17 is_stmt 1
 118:src/riscv.cpp ****                 debug_print((uint64)handle);
 909              		.loc 1 118 28 is_stmt 0
 910 04a8 13850400 		mv	a0,s1
 911 04ac 97000000 		call	_Z11debug_printm
 911      E7800000 
 912              	.LVL92:
GAS LISTING /tmp/ccCcDxah.s 			page 29


 119:src/riscv.cpp ****                 debug_print("\n");
 913              		.loc 1 119 17 is_stmt 1
 119:src/riscv.cpp ****                 debug_print("\n");
 914              		.loc 1 119 28 is_stmt 0
 915 04b4 17050000 		lla	a0,.LC1
 915      13050500 
 916 04bc 97000000 		call	_Z11debug_printPKc
 916      E7800000 
 917              	.LVL93:
 918              	.LBE179:
 121:src/riscv.cpp ****                 break;
 919              		.loc 1 121 17 is_stmt 1
 920 04c4 6FF01FE9 		j	.L19
 921              	.LVL94:
 922              	.L42:
 923              	.LBB180:
 113:src/riscv.cpp ****                     res = -1;
 924              		.loc 1 113 25 is_stmt 0
 925 04c8 1309F0FF 		li	s2,-1
 926 04cc 6FF01FFA 		j	.L36
 927              	.LVL95:
 928              	.L26:
 929              	.LBE180:
 122:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
 930              		.loc 1 122 13 is_stmt 1
 122:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
 931              		.loc 1 122 42
 932              	.LBB181:
 123:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 933              		.loc 1 123 17
 124:src/riscv.cpp ****                 handle->close();
 934              		.loc 1 124 17
 124:src/riscv.cpp ****                 handle->close();
 935              		.loc 1 124 30 is_stmt 0
 936 04d0 13850400 		mv	a0,s1
 937              	.LVL96:
 938 04d4 97000000 		call	_ZN10_semaphore5closeEv
 938      E7800000 
 939              	.LVL97:
 125:src/riscv.cpp ****                 delete handle;
 940              		.loc 1 125 17 is_stmt 1
 125:src/riscv.cpp ****                 delete handle;
 941              		.loc 1 125 24 is_stmt 0
 942 04dc 13850400 		mv	a0,s1
 943 04e0 97000000 		call	_ZdlPv
 943      E7800000 
 944              	.LVL98:
 945              	.LBE181:
 127:src/riscv.cpp ****                 break;
 946              		.loc 1 127 17 is_stmt 1
 947              	.LBE200:
 948              	.LBE215:
  69:src/riscv.cpp ****         uint64 res = 0;
 949              		.loc 1 69 16 is_stmt 0
 950 04e8 13090000 		li	s2,0
 951              	.LBB216:
 952              	.LBB201:
GAS LISTING /tmp/ccCcDxah.s 			page 30


 127:src/riscv.cpp ****                 break;
 953              		.loc 1 127 17
 954 04ec 6FF09FE6 		j	.L19
 955              	.LVL99:
 956              	.L25:
 128:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
 957              		.loc 1 128 13 is_stmt 1
 128:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
 958              		.loc 1 128 41
 959              	.LBB182:
 129:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 960              		.loc 1 129 17
 130:src/riscv.cpp ****                 res = handle->wait();
 961              		.loc 1 130 17
 130:src/riscv.cpp ****                 res = handle->wait();
 962              		.loc 1 130 35 is_stmt 0
 963 04f0 13850400 		mv	a0,s1
 964              	.LVL100:
 965 04f4 97000000 		call	_ZN10_semaphore4waitEv
 965      E7800000 
 966              	.LVL101:
 130:src/riscv.cpp ****                 res = handle->wait();
 967              		.loc 1 130 21
 968 04fc 13090500 		mv	s2,a0
 969              	.LVL102:
 970              	.LBE182:
 132:src/riscv.cpp ****                 break;
 971              		.loc 1 132 17 is_stmt 1
 972 0500 6FF05FE5 		j	.L19
 973              	.LVL103:
 974              	.L24:
 133:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 975              		.loc 1 133 13
 133:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 976              		.loc 1 133 43
 977              	.LBB183:
 134:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 978              		.loc 1 134 17
 135:src/riscv.cpp ****                 handle->signal();
 979              		.loc 1 135 17
 135:src/riscv.cpp ****                 handle->signal();
 980              		.loc 1 135 31 is_stmt 0
 981 0504 13850400 		mv	a0,s1
 982              	.LVL104:
 983 0508 97000000 		call	_ZN10_semaphore6signalEv
 983      E7800000 
 984              	.LVL105:
 985              	.LBE183:
 137:src/riscv.cpp ****                 break;
 986              		.loc 1 137 17 is_stmt 1
 987              	.LBE201:
 988              	.LBE216:
  69:src/riscv.cpp ****         uint64 res = 0;
 989              		.loc 1 69 16 is_stmt 0
 990 0510 13090000 		li	s2,0
 991              	.LBB217:
 992              	.LBB202:
GAS LISTING /tmp/ccCcDxah.s 			page 31


 137:src/riscv.cpp ****                 break;
 993              		.loc 1 137 17
 994 0514 6FF01FE4 		j	.L19
 995              	.LVL106:
 996              	.L23:
 138:src/riscv.cpp ****             case SyscallCode::TIME_SLEEP: {
 997              		.loc 1 138 13 is_stmt 1
 138:src/riscv.cpp ****             case SyscallCode::TIME_SLEEP: {
 998              		.loc 1 138 43
 999              	.LBB184:
 139:src/riscv.cpp ****                 time_t time = (time_t)a1;
 1000              		.loc 1 139 17
 141:src/riscv.cpp ****                 uint64 time_slices_left = time / TCB::TIME_SLICE;
 1001              		.loc 1 141 17
 142:src/riscv.cpp ****                 Scheduler::putToSleep(time_slices_left);
 1002              		.loc 1 142 17
 142:src/riscv.cpp ****                 Scheduler::putToSleep(time_slices_left);
 1003              		.loc 1 142 38 is_stmt 0
 1004 0518 13D51400 		srli	a0,s1,1
 1005              	.LVL107:
 1006 051c 97000000 		call	_ZN9Scheduler10putToSleepEm
 1006      E7800000 
 1007              	.LVL108:
 1008              	.LBE184:
 144:src/riscv.cpp ****                 break;
 1009              		.loc 1 144 17 is_stmt 1
 1010              	.LBE202:
 1011              	.LBE217:
  69:src/riscv.cpp ****         uint64 res = 0;
 1012              		.loc 1 69 16 is_stmt 0
 1013 0524 13090000 		li	s2,0
 1014              	.LBB218:
 1015              	.LBB203:
 144:src/riscv.cpp ****                 break;
 1016              		.loc 1 144 17
 1017 0528 6FF0DFE2 		j	.L19
 1018              	.LVL109:
 1019              	.L22:
 145:src/riscv.cpp ****             case SyscallCode::GETC:
 1020              		.loc 1 145 13 is_stmt 1
 146:src/riscv.cpp ****                 res = _console::_getc();
 1021              		.loc 1 146 17
 1022              	.LBB185:
 1023              	.LBB186:
  21:src/../h/_console.hpp ****     }
 1024              		.loc 3 21 9
  21:src/../h/_console.hpp ****     }
 1025              		.loc 3 21 39 is_stmt 0
 1026 052c 97070000 		lla	a5,_ZN8_console10buffer_in_E
 1026      93870700 
 1027 0534 83B40700 		ld	s1,0(a5)
 1028              	.LVL110:
 1029              	.LBB187:
 1030              	.LBB188:
  37:src/../h/circular_buffer.hpp ****         sem_wait(mutex_);
 1031              		.loc 2 37 17
 1032 0538 03B50400 		ld	a0,0(s1)
GAS LISTING /tmp/ccCcDxah.s 			page 32


 1033              	.LVL111:
 1034 053c 97000000 		call	_Z8sem_waitP10_semaphore
 1034      E7800000 
 1035              	.LVL112:
  38:src/../h/circular_buffer.hpp ****         T ret = buffer_[first_idx_];
 1036              		.loc 2 38 17
 1037 0544 03B50401 		ld	a0,16(s1)
 1038 0548 97000000 		call	_Z8sem_waitP10_semaphore
 1038      E7800000 
 1039              	.LVL113:
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 1040              		.loc 2 39 17
 1041 0550 03B78402 		ld	a4,40(s1)
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 1042              		.loc 2 39 25
 1043 0554 83A78401 		lw	a5,24(s1)
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 1044              		.loc 2 39 24
 1045 0558 3307F700 		add	a4,a4,a5
  39:src/../h/circular_buffer.hpp ****         first_idx_ = (first_idx_ + 1) % size_;
 1046              		.loc 2 39 11
 1047 055c 03490700 		lbu	s2,0(a4)
 1048              	.LVL114:
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1049              		.loc 2 40 34
 1050 0560 9B871700 		addiw	a5,a5,1
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1051              		.loc 2 40 41
 1052 0564 03A70402 		lw	a4,32(s1)
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1053              		.loc 2 40 39
 1054 0568 BBE7E702 		remw	a5,a5,a4
  40:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1055              		.loc 2 40 9
 1056 056c 23ACF400 		sw	a5,24(s1)
  41:src/../h/circular_buffer.hpp ****         sem_signal(space_);
 1057              		.loc 2 41 19
 1058 0570 03B50401 		ld	a0,16(s1)
 1059 0574 97000000 		call	_Z10sem_signalP10_semaphore
 1059      E7800000 
 1060              	.LVL115:
  42:src/../h/circular_buffer.hpp ****         return ret;
 1061              		.loc 2 42 19
 1062 057c 03B58400 		ld	a0,8(s1)
 1063 0580 97000000 		call	_Z10sem_signalP10_semaphore
 1063      E7800000 
 1064              	.LVL116:
 1065              	.LBE188:
 1066              	.LBE187:
 1067              	.LBE186:
 1068              	.LBE185:
 147:src/riscv.cpp ****                 break;
 1069              		.loc 1 147 17 is_stmt 1
 1070 0588 6FF0DFDC 		j	.L19
 1071              	.LVL117:
 1072              	.L20:
 148:src/riscv.cpp ****             case SyscallCode::PUTC:
GAS LISTING /tmp/ccCcDxah.s 			page 33


 1073              		.loc 1 148 13
 149:src/riscv.cpp ****                 _console::_putc((char)a1);
 1074              		.loc 1 149 17
 149:src/riscv.cpp ****                 _console::_putc((char)a1);
 1075              		.loc 1 149 32 is_stmt 0
 1076 058c 93F4F40F 		andi	s1,s1,0xff
 1077              	.LVL118:
 1078              	.LBB189:
 1079              	.LBB190:
  25:src/../h/_console.hpp ****     }
 1080              		.loc 3 25 9 is_stmt 1
  25:src/../h/_console.hpp ****     }
 1081              		.loc 3 25 29 is_stmt 0
 1082 0590 97070000 		lla	a5,_ZN8_console11buffer_out_E
 1082      93870700 
 1083 0598 03B90700 		ld	s2,0(a5)
 1084              	.LVL119:
 1085              	.LBB191:
 1086              	.LBB192:
  47:src/../h/circular_buffer.hpp ****         sem_wait(mutex_);
 1087              		.loc 2 47 17
 1088 059c 03358900 		ld	a0,8(s2)
 1089              	.LVL120:
 1090 05a0 97000000 		call	_Z8sem_waitP10_semaphore
 1090      E7800000 
 1091              	.LVL121:
  48:src/../h/circular_buffer.hpp ****         buffer_[last_idx_] = c;
 1092              		.loc 2 48 17
 1093 05a8 03350901 		ld	a0,16(s2)
 1094 05ac 97000000 		call	_Z8sem_waitP10_semaphore
 1094      E7800000 
 1095              	.LVL122:
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 1096              		.loc 2 49 9
 1097 05b4 83378902 		ld	a5,40(s2)
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 1098              		.loc 2 49 17
 1099 05b8 0327C901 		lw	a4,28(s2)
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 1100              		.loc 2 49 16
 1101 05bc B387E700 		add	a5,a5,a4
  49:src/../h/circular_buffer.hpp ****         last_idx_ = (last_idx_ + 1) % size_;
 1102              		.loc 2 49 9
 1103 05c0 23809700 		sb	s1,0(a5)
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1104              		.loc 2 50 22
 1105 05c4 8327C901 		lw	a5,28(s2)
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1106              		.loc 2 50 32
 1107 05c8 9B871700 		addiw	a5,a5,1
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1108              		.loc 2 50 39
 1109 05cc 03270902 		lw	a4,32(s2)
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
 1110              		.loc 2 50 37
 1111 05d0 BBE7E702 		remw	a5,a5,a4
  50:src/../h/circular_buffer.hpp ****         sem_signal(mutex_);
GAS LISTING /tmp/ccCcDxah.s 			page 34


 1112              		.loc 2 50 9
 1113 05d4 232EF900 		sw	a5,28(s2)
  51:src/../h/circular_buffer.hpp ****         sem_signal(item_);
 1114              		.loc 2 51 19
 1115 05d8 03350901 		ld	a0,16(s2)
 1116 05dc 97000000 		call	_Z10sem_signalP10_semaphore
 1116      E7800000 
 1117              	.LVL123:
  52:src/../h/circular_buffer.hpp ****         return buffer_[last_idx_];
 1118              		.loc 2 52 19
 1119 05e4 03350900 		ld	a0,0(s2)
 1120 05e8 97000000 		call	_Z10sem_signalP10_semaphore
 1120      E7800000 
 1121              	.LVL124:
 1122              	.LBE192:
 1123              	.LBE191:
 1124              	.LBE190:
 1125              	.LBE189:
 1126              	.LBE203:
 1127              	.LBE218:
  69:src/riscv.cpp ****         uint64 res = 0;
 1128              		.loc 1 69 16
 1129 05f0 13090000 		li	s2,0
 1130              	.LVL125:
 1131 05f4 6FF01FD6 		j	.L19
 1132              	.LVL126:
 1133              	.L39:
 1134 05f8 13090000 		li	s2,0
 1135 05fc 6FF09FD5 		j	.L19
 1136              	.LVL127:
 1137              	.L40:
 1138              	.LBB219:
 1139              	.LBB204:
 1140              	.LBB193:
  96:src/riscv.cpp ****                     res = -1;
 1141              		.loc 1 96 25
 1142 0600 1309F0FF 		li	s2,-1
 1143 0604 6FF01FD5 		j	.L19
 1144              	.LVL128:
 1145              	.L41:
 1146              	.LBE193:
 1147              	.LBE204:
 1148              	.LBE219:
  69:src/riscv.cpp ****         uint64 res = 0;
 1149              		.loc 1 69 16
 1150 0608 13090000 		li	s2,0
 1151 060c 6FF09FD4 		j	.L19
 1152              	.LVL129:
 1153              	.L45:
 1154              	.LBE220:
 1155              	.LBB221:
 1156              	.LBB151:
 163:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 1157              		.loc 1 163 9 is_stmt 1
 1158              	.LBB152:
 1159              	.LBB153:
 149:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccCcDxah.s 			page 35


 1160              		.loc 4 149 5
 149:src/../h/riscv.hpp **** }
 1161              		.loc 4 149 64 is_stmt 0
 1162 0610 93072000 		li	a5,2
 1163              	 #APP
 1164              	# 149 "src/../h/riscv.hpp" 1
 1165              		csrc sip, a5
 1166              	# 0 "" 2
 1167              	.LVL130:
 1168              	 #NO_APP
 1169              	.LBE153:
 1170              	.LBE152:
 164:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1171              		.loc 1 164 9 is_stmt 1
 164:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1172              		.loc 1 164 30 is_stmt 0
 1173 0618 97040000 		lla	s1,_ZN3TCB16timeSliceCounterE
 1173      93840400 
 1174              	.LVL131:
 1175 0620 83B70400 		ld	a5,0(s1)
 1176 0624 93871700 		addi	a5,a5,1
 1177 0628 23B0F400 		sd	a5,0(s1)
 165:src/riscv.cpp ****         Scheduler::maybeWakeThreads();
 1178              		.loc 1 165 9 is_stmt 1
 165:src/riscv.cpp ****         Scheduler::maybeWakeThreads();
 1179              		.loc 1 165 36 is_stmt 0
 1180 062c 97000000 		call	_ZN9Scheduler16maybeWakeThreadsEv
 1180      E7800000 
 1181              	.LVL132:
 166:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1182              		.loc 1 166 9 is_stmt 1
 1183              	.LBB154:
 166:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1184              		.loc 1 166 64 is_stmt 0
 1185 0634 97070000 		lla	a5,_ZN3TCB7runningE
 1185      93870700 
 1186 063c 83B70700 		ld	a5,0(a5)
 1187              	.LVL133:
 1188              	.LBB155:
 1189              	.LBB156:
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished_; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished_ = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void block() { blocked_ = true; }
  22:src/../h/tcb.hpp **** 
  23:src/../h/tcb.hpp ****     void unblock() { blocked_ = false; }
  24:src/../h/tcb.hpp **** 
  25:src/../h/tcb.hpp ****     bool isBlocked() { return blocked_; }
  26:src/../h/tcb.hpp **** 
  27:src/../h/tcb.hpp ****     void setSleeping(bool value) { sleeping_ = value; }
  28:src/../h/tcb.hpp **** 
  29:src/../h/tcb.hpp ****     bool isSleeping() { return sleeping_; }
  30:src/../h/tcb.hpp **** 
  31:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 1190              		.loc 5 31 35 is_stmt 1
GAS LISTING /tmp/ccCcDxah.s 			page 36


 1191              		.loc 5 31 42 is_stmt 0
 1192 0640 83B78702 		ld	a5,40(a5)
 1193              	.LVL134:
 1194              	.LBE156:
 1195              	.LBE155:
 166:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1196              		.loc 1 166 35
 1197 0644 03B70400 		ld	a4,0(s1)
 166:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1198              		.loc 1 166 9
 1199 0648 E362F7D2 		bltu	a4,a5,.L17
 1200              	.LBB157:
 168:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1201              		.loc 1 168 13 is_stmt 1
 1202              	.LBB158:
 1203              	.LBB159:
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1204              		.loc 4 108 5
 109:src/../h/riscv.hpp ****     return sepc;
 1205              		.loc 4 109 5
 109:src/../h/riscv.hpp ****     return sepc;
 1206              		.loc 4 109 64 is_stmt 0
 1207              	 #APP
 1208              	# 109 "src/../h/riscv.hpp" 1
 1209              		csrr a5, sepc
 1210              	# 0 "" 2
 1211              	 #NO_APP
 1212 0650 233CF4FC 		sd	a5,-40(s0)
 110:src/../h/riscv.hpp **** }
 1213              		.loc 4 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 1214              		.loc 4 110 12 is_stmt 0
 1215 0654 833784FD 		ld	a5,-40(s0)
 1216              	.LBE159:
 1217              	.LBE158:
 168:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1218              		.loc 1 168 43
 1219 0658 2334F4FA 		sd	a5,-88(s0)
 169:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1220              		.loc 1 169 13 is_stmt 1
 1221              	.LBB160:
 1222              	.LBB161:
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1223              		.loc 4 176 5
 177:src/../h/riscv.hpp ****     return sstatus;
 1224              		.loc 4 177 5
 177:src/../h/riscv.hpp ****     return sstatus;
 1225              		.loc 4 177 76 is_stmt 0
 1226              	 #APP
 1227              	# 177 "src/../h/riscv.hpp" 1
 1228              		csrr a5, sstatus
 1229              	# 0 "" 2
 1230              	 #NO_APP
 1231 0660 2338F4FC 		sd	a5,-48(s0)
 178:src/../h/riscv.hpp **** }
 1232              		.loc 4 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccCcDxah.s 			page 37


 1233              		.loc 4 178 12 is_stmt 0
 1234 0664 833704FD 		ld	a5,-48(s0)
 1235              	.LBE161:
 1236              	.LBE160:
 169:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1237              		.loc 1 169 49
 1238 0668 2338F4FA 		sd	a5,-80(s0)
 170:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1239              		.loc 1 170 13 is_stmt 1
 170:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1240              		.loc 1 170 35 is_stmt 0
 1241 066c 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 1241      23B00700 
 171:src/riscv.cpp ****             TCB::dispatch();
 1242              		.loc 1 171 13 is_stmt 1
 171:src/riscv.cpp ****             TCB::dispatch();
 1243              		.loc 1 171 26 is_stmt 0
 1244 0674 97000000 		call	_ZN3TCB8dispatchEv
 1244      E7800000 
 1245              	.LVL135:
 172:src/riscv.cpp ****             w_sstatus(sstatus);
 1246              		.loc 1 172 13 is_stmt 1
 172:src/riscv.cpp ****             w_sstatus(sstatus);
 1247              		.loc 1 172 22 is_stmt 0
 1248 067c 833704FB 		ld	a5,-80(s0)
 1249              	.LVL136:
 1250              	.LBB162:
 1251              	.LBB163:
 183:src/../h/riscv.hpp **** }
 1252              		.loc 4 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 1253              		.loc 4 183 77 is_stmt 0
 1254              	 #APP
 1255              	# 183 "src/../h/riscv.hpp" 1
 1256              		csrw sstatus, a5
 1257              	# 0 "" 2
 1258              	.LVL137:
 1259              	 #NO_APP
 1260              	.LBE163:
 1261              	.LBE162:
 173:src/riscv.cpp ****             w_sepc(sepc);
 1262              		.loc 1 173 13 is_stmt 1
 173:src/riscv.cpp ****             w_sepc(sepc);
 1263              		.loc 1 173 19 is_stmt 0
 1264 0684 833784FA 		ld	a5,-88(s0)
 1265              	.LVL138:
 1266              	.LBB164:
 1267              	.LBB165:
 115:src/../h/riscv.hpp **** }
 1268              		.loc 4 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 1269              		.loc 4 115 65 is_stmt 0
 1270              	 #APP
 1271              	# 115 "src/../h/riscv.hpp" 1
 1272              		csrw sepc, a5
 1273              	# 0 "" 2
 1274              	 #NO_APP
GAS LISTING /tmp/ccCcDxah.s 			page 38


 1275 068c 6FF01FCE 		j	.L17
 1276              	.LBE165:
 1277              	.LBE164:
 1278              	.LBE157:
 1279              	.LBE154:
 1280              	.LBE151:
 1281              	.LBE221:
 1282              	.LBE224:
 1283              		.cfi_endproc
 1284              	.LFE59:
 1286              		.section	.rodata.str1.8,"aMS",@progbits,1
 1287              		.align	3
 1288              	.LC0:
 1289 0000 556E6578 		.string	"Unexpected IRQ: "
 1289      70656374 
 1289      65642049 
 1289      52513A20 
 1289      00
 1290 0011 00000000 		.zero	7
 1290      000000
 1291              	.LC1:
 1292 0018 0A00     		.string	"\n"
 1293 001a 00000000 		.zero	6
 1293      0000
 1294              	.LC2:
 1295 0020 54687265 		.string	"Thread exit should be called by the running thread"
 1295      61642065 
 1295      78697420 
 1295      73686F75 
 1295      6C642062 
 1296 0053 00000000 		.zero	5
 1296      00
 1297              	.LC3:
 1298 0058 53656D61 		.string	"Semaphore open: Handle: "
 1298      70686F72 
 1298      65206F70 
 1298      656E3A20 
 1298      48616E64 
 1299 0071 00000000 		.zero	7
 1299      000000
 1300              	.LC4:
 1301 0078 4F6E2068 		.string	"On handle addr: "
 1301      616E646C 
 1301      65206164 
 1301      64723A20 
 1301      00
 1302 0089 00000000 		.zero	7
 1302      000000
 1303              	.LC5:
 1304 0090 436F6E73 		.string	"Console handler called\n"
 1304      6F6C6520 
 1304      68616E64 
 1304      6C657220 
 1304      63616C6C 
 1305              		.text
 1306              	.Letext0:
 1307              		.file 6 "src/../h/../lib/hw.h"
GAS LISTING /tmp/ccCcDxah.s 			page 39


 1308              		.file 7 "src/../h/scheduler.hpp"
 1309              		.file 8 "src/../h/list.hpp"
 1310              		.file 9 "src/../h/semaphore.hpp"
 1311              		.file 10 "src/../h/syscall_c.h"
 1312              		.file 11 "src/../h/mem.hpp"
 1313              		.file 12 "src/../h/print.hpp"
GAS LISTING /tmp/ccCcDxah.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccCcDxah.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccCcDxah.s:16     .text:0000000000000000 .L0 
     /tmp/ccCcDxah.s:17     .text:0000000000000000 .L0 
     /tmp/ccCcDxah.s:18     .text:0000000000000004 .L0 
     /tmp/ccCcDxah.s:20     .text:0000000000000008 .L0 
     /tmp/ccCcDxah.s:22     .text:000000000000000c .L0 
     /tmp/ccCcDxah.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccCcDxah.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccCcDxah.s:36     .text:0000000000000014 .L0 
     /tmp/ccCcDxah.s:37     .text:0000000000000018 .L0 
     /tmp/ccCcDxah.s:38     .text:0000000000000018 .L0 
     /tmp/ccCcDxah.s:40     .text:000000000000001c .L0 
     /tmp/ccCcDxah.s:42     .text:0000000000000020 .L0 
     /tmp/ccCcDxah.s:48     .text:0000000000000020 _ZN5Riscv14consoleHandlerEv
     /tmp/ccCcDxah.s:51     .text:0000000000000020 .L0 
     /tmp/ccCcDxah.s:52     .text:0000000000000020 .L0 
     /tmp/ccCcDxah.s:53     .text:0000000000000024 .L0 
     /tmp/ccCcDxah.s:61     .text:0000000000000040 .L0 
     /tmp/ccCcDxah.s:62     .text:0000000000000040 .L0 
     /tmp/ccCcDxah.s:63     .text:0000000000000040 .L0 
     /tmp/ccCcDxah.s:64     .text:0000000000000040 .L0 
     /tmp/ccCcDxah.s:65     .text:0000000000000040 .L0 
     /tmp/ccCcDxah.s:66     .text:0000000000000040 .L0 
     /tmp/ccCcDxah.s:67     .text:0000000000000040 .L0 
     /tmp/ccCcDxah.s:69     .text:0000000000000044 .L0 
     /tmp/ccCcDxah.s:71     .text:0000000000000044 .L0 
     /tmp/ccCcDxah.s:72     .text:0000000000000044 .L0 
     /tmp/ccCcDxah.s:77     .text:0000000000000050 .L0 
     /tmp/ccCcDxah.s:80     .text:0000000000000058 .L0 
     /tmp/ccCcDxah.s:81     .text:0000000000000058 .L0 
     /tmp/ccCcDxah.s:84     .text:0000000000000064 .L0 
     /tmp/ccCcDxah.s:90     .text:000000000000006c .L0 
     /tmp/ccCcDxah.s:91     .text:000000000000006c .L0 
     /tmp/ccCcDxah.s:96     .text:000000000000007c .L0 
     /tmp/ccCcDxah.s:97     .text:000000000000007c .L0 
     /tmp/ccCcDxah.s:101    .text:0000000000000088 .L0 
     /tmp/ccCcDxah.s:102    .text:0000000000000088 .L0 
     /tmp/ccCcDxah.s:106    .text:0000000000000098 .L0 
     /tmp/ccCcDxah.s:107    .text:0000000000000098 .L0 
     /tmp/ccCcDxah.s:111    .text:00000000000000a4 .L0 
     /tmp/ccCcDxah.s:120    .text:00000000000000a8 .L0 
     /tmp/ccCcDxah.s:122    .text:00000000000000ac .L0 
     /tmp/ccCcDxah.s:124    .text:00000000000000b0 .L0 
     /tmp/ccCcDxah.s:128    .text:00000000000000b4 .L0 
     /tmp/ccCcDxah.s:135    .text:00000000000000c0 .L0 
     /tmp/ccCcDxah.s:140    .text:00000000000000cc .L0 
     /tmp/ccCcDxah.s:143    .text:00000000000000d0 .L0 
     /tmp/ccCcDxah.s:144    .text:00000000000000d0 .L0 
     /tmp/ccCcDxah.s:147    .text:00000000000000dc .L0 
     /tmp/ccCcDxah.s:152    .text:00000000000000e0 .L0 
     /tmp/ccCcDxah.s:153    .text:00000000000000e0 .L0 
     /tmp/ccCcDxah.s:154    .text:00000000000000e0 .L0 
     /tmp/ccCcDxah.s:160    .text:00000000000000ec .L0 
GAS LISTING /tmp/ccCcDxah.s 			page 41


     /tmp/ccCcDxah.s:164    .text:00000000000000f8 .L0 
     /tmp/ccCcDxah.s:168    .text:0000000000000104 .L0 
     /tmp/ccCcDxah.s:170    .text:0000000000000108 .L0 
     /tmp/ccCcDxah.s:172    .text:000000000000010c .L0 
     /tmp/ccCcDxah.s:174    .text:0000000000000110 .L0 
     /tmp/ccCcDxah.s:176    .text:0000000000000114 .L0 
     /tmp/ccCcDxah.s:178    .text:0000000000000118 .L0 
     /tmp/ccCcDxah.s:180    .text:000000000000011c .L0 
     /tmp/ccCcDxah.s:182    .text:0000000000000120 .L0 
     /tmp/ccCcDxah.s:184    .text:0000000000000124 .L0 
     /tmp/ccCcDxah.s:186    .text:0000000000000128 .L0 
     /tmp/ccCcDxah.s:190    .text:0000000000000134 .L0 
     /tmp/ccCcDxah.s:198    .text:0000000000000140 .L0 
     /tmp/ccCcDxah.s:199    .text:0000000000000140 .L0 
     /tmp/ccCcDxah.s:204    .text:0000000000000144 .L0 
     /tmp/ccCcDxah.s:205    .text:0000000000000144 .L0 
     /tmp/ccCcDxah.s:210    .text:000000000000014c .L0 
     /tmp/ccCcDxah.s:211    .text:000000000000014c .L0 
     /tmp/ccCcDxah.s:217    .text:0000000000000158 .L0 
     /tmp/ccCcDxah.s:221    .text:0000000000000164 .L0 
     /tmp/ccCcDxah.s:223    .text:0000000000000168 .L0 
     /tmp/ccCcDxah.s:225    .text:000000000000016c .L0 
     /tmp/ccCcDxah.s:227    .text:0000000000000170 .L0 
     /tmp/ccCcDxah.s:241    .text:0000000000000178 .L0 
     /tmp/ccCcDxah.s:243    .text:000000000000017c .L0 
     /tmp/ccCcDxah.s:245    .text:0000000000000180 .L0 
     /tmp/ccCcDxah.s:249    .text:0000000000000184 .L0 
     /tmp/ccCcDxah.s:257    .text:0000000000000190 .L0 
     /tmp/ccCcDxah.s:262    .text:0000000000000194 .L0 
     /tmp/ccCcDxah.s:263    .text:0000000000000194 .L0 
     /tmp/ccCcDxah.s:264    .text:0000000000000194 .L0 
     /tmp/ccCcDxah.s:270    .text:00000000000001a0 .L0 
     /tmp/ccCcDxah.s:274    .text:00000000000001ac .L0 
     /tmp/ccCcDxah.s:278    .text:00000000000001b8 .L0 
     /tmp/ccCcDxah.s:280    .text:00000000000001bc .L0 
     /tmp/ccCcDxah.s:282    .text:00000000000001c0 .L0 
     /tmp/ccCcDxah.s:284    .text:00000000000001c4 .L0 
     /tmp/ccCcDxah.s:287    .text:00000000000001c8 .L0 
     /tmp/ccCcDxah.s:289    .text:00000000000001cc .L0 
     /tmp/ccCcDxah.s:291    .text:00000000000001d0 .L0 
     /tmp/ccCcDxah.s:293    .text:00000000000001d4 .L0 
     /tmp/ccCcDxah.s:295    .text:00000000000001d8 .L0 
     /tmp/ccCcDxah.s:299    .text:00000000000001e4 .L0 
     /tmp/ccCcDxah.s:307    .text:00000000000001f0 .L0 
     /tmp/ccCcDxah.s:308    .text:00000000000001f0 .L0 
     /tmp/ccCcDxah.s:311    .text:00000000000001fc .L0 
     /tmp/ccCcDxah.s:313    .text:0000000000000200 .L0 
     /tmp/ccCcDxah.s:314    .text:0000000000000200 .L0 
     /tmp/ccCcDxah.s:319    .text:0000000000000204 .L0 
     /tmp/ccCcDxah.s:320    .text:0000000000000204 .L0 
     /tmp/ccCcDxah.s:326    .text:000000000000020c .L0 
     /tmp/ccCcDxah.s:327    .text:000000000000020c .L0 
     /tmp/ccCcDxah.s:333    .text:0000000000000218 .L0 
     /tmp/ccCcDxah.s:337    .text:0000000000000224 .L0 
     /tmp/ccCcDxah.s:339    .text:0000000000000228 .L0 
     /tmp/ccCcDxah.s:341    .text:000000000000022c .L0 
     /tmp/ccCcDxah.s:343    .text:0000000000000230 .L0 
GAS LISTING /tmp/ccCcDxah.s 			page 42


     /tmp/ccCcDxah.s:353    .text:0000000000000238 .L0 
     /tmp/ccCcDxah.s:354    .text:0000000000000238 .L0 
     /tmp/ccCcDxah.s:359    .text:0000000000000244 .L0 
     /tmp/ccCcDxah.s:360    .text:0000000000000248 .L0 
     /tmp/ccCcDxah.s:362    .text:000000000000024c .L0 
     /tmp/ccCcDxah.s:363    .text:000000000000024c .L0 
     /tmp/ccCcDxah.s:365    .text:0000000000000250 .L0 
     /tmp/ccCcDxah.s:367    .text:0000000000000254 .L0 
     /tmp/ccCcDxah.s:369    .text:0000000000000258 .L0 
     /tmp/ccCcDxah.s:372    .text:000000000000025c .L0 
     /tmp/ccCcDxah.s:374    .text:0000000000000260 .L0 
     /tmp/ccCcDxah.s:376    .text:0000000000000264 .L0 
     /tmp/ccCcDxah.s:378    .text:0000000000000268 .L0 
     /tmp/ccCcDxah.s:384    .text:0000000000000268 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccCcDxah.s:387    .text:0000000000000268 .L0 
     /tmp/ccCcDxah.s:388    .text:0000000000000268 .L0 
     /tmp/ccCcDxah.s:389    .text:000000000000026c .L0 
     /tmp/ccCcDxah.s:394    .text:000000000000027c .L0 
     /tmp/ccCcDxah.s:395    .text:000000000000027c .L0 
     /tmp/ccCcDxah.s:396    .text:000000000000027c .L0 
     /tmp/ccCcDxah.s:397    .text:000000000000027c .L0 
     /tmp/ccCcDxah.s:399    .text:0000000000000280 .L0 
     /tmp/ccCcDxah.s:401    .text:0000000000000280 .L0 
     /tmp/ccCcDxah.s:402    .text:0000000000000280 .L0 
       src/riscv.cpp:51     .text:0000000000000280 .L0 
     /tmp/ccCcDxah.s:409    .text:0000000000000284 .L0 
       src/riscv.cpp:52     .text:0000000000000284 .L0 
     /tmp/ccCcDxah.s:415    .text:0000000000000288 .L0 
       src/riscv.cpp:53     .text:0000000000000288 .L0 
     /tmp/ccCcDxah.s:421    .text:000000000000028c .L0 
       src/riscv.cpp:54     .text:000000000000028c .L0 
     /tmp/ccCcDxah.s:427    .text:0000000000000290 .L0 
       src/riscv.cpp:55     .text:0000000000000290 .L0 
     /tmp/ccCcDxah.s:433    .text:0000000000000294 .L0 
       src/riscv.cpp:56     .text:0000000000000294 .L0 
     /tmp/ccCcDxah.s:439    .text:0000000000000298 .L0 
       src/riscv.cpp:57     .text:0000000000000298 .L0 
     /tmp/ccCcDxah.s:445    .text:000000000000029c .L0 
       src/riscv.cpp:58     .text:000000000000029c .L0 
     /tmp/ccCcDxah.s:455    .text:00000000000002a0 .L0 
     /tmp/ccCcDxah.s:456    .text:00000000000002a0 .L0 
     /tmp/ccCcDxah.s:457    .text:00000000000002a0 .L0 
  src/../h/riscv.hpp:97     .text:00000000000002a0 .L0 
     /tmp/ccCcDxah.s:465    .text:00000000000002a8 .L0 
     /tmp/ccCcDxah.s:466    .text:00000000000002a8 .L0 
     /tmp/ccCcDxah.s:472    .text:00000000000002ac .L0 
     /tmp/ccCcDxah.s:473    .text:00000000000002ac .L0 
     /tmp/ccCcDxah.s:475    .text:00000000000002b0 .L0 
     /tmp/ccCcDxah.s:481    .text:00000000000002b8 .L0 
     /tmp/ccCcDxah.s:487    .text:00000000000002c8 .L0 
     /tmp/ccCcDxah.s:492    .text:00000000000002d8 .L0 
     /tmp/ccCcDxah.s:493    .text:00000000000002d8 .L0 
     /tmp/ccCcDxah.s:498    .text:00000000000002e8 .L0 
     /tmp/ccCcDxah.s:499    .text:00000000000002e8 .L0 
     /tmp/ccCcDxah.s:504    .text:00000000000002f0 .L0 
     /tmp/ccCcDxah.s:512    .text:00000000000002f4 .L0 
     /tmp/ccCcDxah.s:513    .text:00000000000002f4 .L0 
GAS LISTING /tmp/ccCcDxah.s 			page 43


     /tmp/ccCcDxah.s:514    .text:00000000000002f4 .L0 
  src/../h/riscv.hpp:109    .text:00000000000002f4 .L0 
     /tmp/ccCcDxah.s:523    .text:00000000000002fc .L0 
     /tmp/ccCcDxah.s:524    .text:00000000000002fc .L0 
     /tmp/ccCcDxah.s:528    .text:0000000000000300 .L0 
     /tmp/ccCcDxah.s:530    .text:0000000000000304 .L0 
     /tmp/ccCcDxah.s:534    .text:0000000000000308 .L0 
     /tmp/ccCcDxah.s:535    .text:0000000000000308 .L0 
     /tmp/ccCcDxah.s:536    .text:0000000000000308 .L0 
  src/../h/riscv.hpp:177    .text:0000000000000308 .L0 
     /tmp/ccCcDxah.s:544    .text:0000000000000310 .L0 
     /tmp/ccCcDxah.s:545    .text:0000000000000310 .L0 
     /tmp/ccCcDxah.s:549    .text:0000000000000314 .L0 
     /tmp/ccCcDxah.s:552    .text:0000000000000318 .L0 
     /tmp/ccCcDxah.s:554    .text:0000000000000318 .L0 
     /tmp/ccCcDxah.s:638    .text:000000000000033c .L0 
     /tmp/ccCcDxah.s:639    .text:000000000000033c .L0 
     /tmp/ccCcDxah.s:640    .text:000000000000033c .L0 
     /tmp/ccCcDxah.s:651    .text:0000000000000354 .L0 
     /tmp/ccCcDxah.s:652    .text:0000000000000354 .L0 
       src/riscv.cpp:152    .text:0000000000000354 .L0 
     /tmp/ccCcDxah.s:658    .text:0000000000000358 .L0 
       src/riscv.cpp:155    .text:0000000000000358 .L0 
     /tmp/ccCcDxah.s:663    .text:000000000000035c .L0 
     /tmp/ccCcDxah.s:665    .text:000000000000035c .L0 
     /tmp/ccCcDxah.s:670    .text:0000000000000360 .L0 
  src/../h/riscv.hpp:183    .text:0000000000000360 .L0 
     /tmp/ccCcDxah.s:680    .text:0000000000000364 .L0 
     /tmp/ccCcDxah.s:681    .text:0000000000000364 .L0 
     /tmp/ccCcDxah.s:686    .text:0000000000000368 .L0 
  src/../h/riscv.hpp:115    .text:0000000000000368 .L0 
     /tmp/ccCcDxah.s:699    .text:000000000000036c .L0 
     /tmp/ccCcDxah.s:700    .text:0000000000000370 .L0 
     /tmp/ccCcDxah.s:701    .text:0000000000000370 .L0 
     /tmp/ccCcDxah.s:703    .text:0000000000000374 .L0 
     /tmp/ccCcDxah.s:704    .text:0000000000000374 .L0 
     /tmp/ccCcDxah.s:706    .text:0000000000000378 .L0 
     /tmp/ccCcDxah.s:708    .text:000000000000037c .L0 
     /tmp/ccCcDxah.s:710    .text:0000000000000380 .L0 
     /tmp/ccCcDxah.s:714    .text:0000000000000384 .L0 
     /tmp/ccCcDxah.s:720    .text:0000000000000384 .L0 
     /tmp/ccCcDxah.s:721    .text:0000000000000384 .L0 
     /tmp/ccCcDxah.s:722    .text:0000000000000384 .L0 
     /tmp/ccCcDxah.s:728    .text:0000000000000398 .L0 
     /tmp/ccCcDxah.s:731    .text:000000000000039c .L0 
     /tmp/ccCcDxah.s:735    .text:00000000000003a0 .L0 
     /tmp/ccCcDxah.s:736    .text:00000000000003a0 .L0 
     /tmp/ccCcDxah.s:737    .text:00000000000003a0 .L0 
     /tmp/ccCcDxah.s:744    .text:00000000000003b0 .L0 
     /tmp/ccCcDxah.s:745    .text:00000000000003b0 .L0 
     /tmp/ccCcDxah.s:749    .text:00000000000003b4 .L0 
     /tmp/ccCcDxah.s:753    .text:00000000000003b8 .L0 
     /tmp/ccCcDxah.s:754    .text:00000000000003b8 .L0 
     /tmp/ccCcDxah.s:755    .text:00000000000003b8 .L0 
     /tmp/ccCcDxah.s:762    .text:00000000000003c8 .L0 
     /tmp/ccCcDxah.s:763    .text:00000000000003c8 .L0 
     /tmp/ccCcDxah.s:767    .text:00000000000003cc .L0 
GAS LISTING /tmp/ccCcDxah.s 			page 44


     /tmp/ccCcDxah.s:771    .text:00000000000003d0 .L0 
     /tmp/ccCcDxah.s:773    .text:00000000000003d0 .L0 
     /tmp/ccCcDxah.s:774    .text:00000000000003d0 .L0 
     /tmp/ccCcDxah.s:775    .text:00000000000003d0 .L0 
     /tmp/ccCcDxah.s:776    .text:00000000000003d0 .L0 
     /tmp/ccCcDxah.s:779    .text:00000000000003d8 .L0 
     /tmp/ccCcDxah.s:781    .text:00000000000003dc .L0 
     /tmp/ccCcDxah.s:786    .text:00000000000003e0 .L0 
     /tmp/ccCcDxah.s:793    .text:00000000000003e8 .L0 
     /tmp/ccCcDxah.s:795    .text:00000000000003e8 .L0 
     /tmp/ccCcDxah.s:796    .text:00000000000003e8 .L0 
     /tmp/ccCcDxah.s:797    .text:00000000000003e8 .L0 
     /tmp/ccCcDxah.s:800    .text:00000000000003f0 .L0 
     /tmp/ccCcDxah.s:801    .text:00000000000003f0 .L0 
     /tmp/ccCcDxah.s:802    .text:00000000000003f0 .L0 
     /tmp/ccCcDxah.s:804    .text:00000000000003f4 .L0 
     /tmp/ccCcDxah.s:812    .text:0000000000000418 .L0 
     /tmp/ccCcDxah.s:813    .text:0000000000000418 .L0 
     /tmp/ccCcDxah.s:816    .text:000000000000041c .L0 
     /tmp/ccCcDxah.s:822    .text:0000000000000420 .L0 
     /tmp/ccCcDxah.s:823    .text:0000000000000420 .L0 
     /tmp/ccCcDxah.s:825    .text:0000000000000424 .L0 
     /tmp/ccCcDxah.s:827    .text:0000000000000428 .L0 
     /tmp/ccCcDxah.s:833    .text:0000000000000430 .L0 
     /tmp/ccCcDxah.s:840    .text:000000000000043c .L0 
     /tmp/ccCcDxah.s:849    .text:0000000000000444 .L0 
     /tmp/ccCcDxah.s:850    .text:0000000000000444 .L0 
     /tmp/ccCcDxah.s:851    .text:0000000000000444 .L0 
     /tmp/ccCcDxah.s:856    .text:000000000000044c .L0 
     /tmp/ccCcDxah.s:857    .text:000000000000044c .L0 
     /tmp/ccCcDxah.s:861    .text:0000000000000450 .L0 
     /tmp/ccCcDxah.s:865    .text:0000000000000454 .L0 
     /tmp/ccCcDxah.s:867    .text:0000000000000454 .L0 
     /tmp/ccCcDxah.s:868    .text:0000000000000454 .L0 
     /tmp/ccCcDxah.s:869    .text:0000000000000454 .L0 
     /tmp/ccCcDxah.s:870    .text:0000000000000454 .L0 
     /tmp/ccCcDxah.s:875    .text:0000000000000460 .L0 
     /tmp/ccCcDxah.s:877    .text:0000000000000464 .L0 
     /tmp/ccCcDxah.s:882    .text:0000000000000468 .L0 
     /tmp/ccCcDxah.s:889    .text:000000000000046c .L0 
     /tmp/ccCcDxah.s:890    .text:000000000000046c .L0 
     /tmp/ccCcDxah.s:894    .text:000000000000047c .L0 
     /tmp/ccCcDxah.s:895    .text:000000000000047c .L0 
     /tmp/ccCcDxah.s:899    .text:0000000000000488 .L0 
     /tmp/ccCcDxah.s:900    .text:0000000000000488 .L0 
     /tmp/ccCcDxah.s:904    .text:0000000000000498 .L0 
     /tmp/ccCcDxah.s:905    .text:0000000000000498 .L0 
     /tmp/ccCcDxah.s:909    .text:00000000000004a8 .L0 
     /tmp/ccCcDxah.s:910    .text:00000000000004a8 .L0 
     /tmp/ccCcDxah.s:914    .text:00000000000004b4 .L0 
     /tmp/ccCcDxah.s:915    .text:00000000000004b4 .L0 
     /tmp/ccCcDxah.s:920    .text:00000000000004c4 .L0 
     /tmp/ccCcDxah.s:925    .text:00000000000004c8 .L0 
     /tmp/ccCcDxah.s:931    .text:00000000000004d0 .L0 
     /tmp/ccCcDxah.s:933    .text:00000000000004d0 .L0 
     /tmp/ccCcDxah.s:934    .text:00000000000004d0 .L0 
     /tmp/ccCcDxah.s:935    .text:00000000000004d0 .L0 
GAS LISTING /tmp/ccCcDxah.s 			page 45


     /tmp/ccCcDxah.s:936    .text:00000000000004d0 .L0 
     /tmp/ccCcDxah.s:941    .text:00000000000004dc .L0 
     /tmp/ccCcDxah.s:942    .text:00000000000004dc .L0 
     /tmp/ccCcDxah.s:949    .text:00000000000004e8 .L0 
     /tmp/ccCcDxah.s:950    .text:00000000000004e8 .L0 
     /tmp/ccCcDxah.s:954    .text:00000000000004ec .L0 
     /tmp/ccCcDxah.s:958    .text:00000000000004f0 .L0 
     /tmp/ccCcDxah.s:960    .text:00000000000004f0 .L0 
     /tmp/ccCcDxah.s:961    .text:00000000000004f0 .L0 
     /tmp/ccCcDxah.s:962    .text:00000000000004f0 .L0 
     /tmp/ccCcDxah.s:963    .text:00000000000004f0 .L0 
     /tmp/ccCcDxah.s:968    .text:00000000000004fc .L0 
     /tmp/ccCcDxah.s:972    .text:0000000000000500 .L0 
     /tmp/ccCcDxah.s:976    .text:0000000000000504 .L0 
     /tmp/ccCcDxah.s:978    .text:0000000000000504 .L0 
     /tmp/ccCcDxah.s:979    .text:0000000000000504 .L0 
     /tmp/ccCcDxah.s:980    .text:0000000000000504 .L0 
     /tmp/ccCcDxah.s:981    .text:0000000000000504 .L0 
     /tmp/ccCcDxah.s:989    .text:0000000000000510 .L0 
     /tmp/ccCcDxah.s:990    .text:0000000000000510 .L0 
     /tmp/ccCcDxah.s:994    .text:0000000000000514 .L0 
     /tmp/ccCcDxah.s:998    .text:0000000000000518 .L0 
     /tmp/ccCcDxah.s:1000   .text:0000000000000518 .L0 
     /tmp/ccCcDxah.s:1001   .text:0000000000000518 .L0 
     /tmp/ccCcDxah.s:1002   .text:0000000000000518 .L0 
     /tmp/ccCcDxah.s:1003   .text:0000000000000518 .L0 
     /tmp/ccCcDxah.s:1004   .text:0000000000000518 .L0 
     /tmp/ccCcDxah.s:1012   .text:0000000000000524 .L0 
     /tmp/ccCcDxah.s:1013   .text:0000000000000524 .L0 
     /tmp/ccCcDxah.s:1017   .text:0000000000000528 .L0 
     /tmp/ccCcDxah.s:1021   .text:000000000000052c .L0 
     /tmp/ccCcDxah.s:1024   .text:000000000000052c .L0 
     /tmp/ccCcDxah.s:1025   .text:000000000000052c .L0 
     /tmp/ccCcDxah.s:1026   .text:000000000000052c .L0 
     /tmp/ccCcDxah.s:1032   .text:0000000000000538 .L0 
     /tmp/ccCcDxah.s:1037   .text:0000000000000544 .L0 
     /tmp/ccCcDxah.s:1041   .text:0000000000000550 .L0 
     /tmp/ccCcDxah.s:1043   .text:0000000000000554 .L0 
     /tmp/ccCcDxah.s:1045   .text:0000000000000558 .L0 
     /tmp/ccCcDxah.s:1047   .text:000000000000055c .L0 
     /tmp/ccCcDxah.s:1050   .text:0000000000000560 .L0 
     /tmp/ccCcDxah.s:1052   .text:0000000000000564 .L0 
     /tmp/ccCcDxah.s:1054   .text:0000000000000568 .L0 
     /tmp/ccCcDxah.s:1056   .text:000000000000056c .L0 
     /tmp/ccCcDxah.s:1058   .text:0000000000000570 .L0 
     /tmp/ccCcDxah.s:1062   .text:000000000000057c .L0 
     /tmp/ccCcDxah.s:1070   .text:0000000000000588 .L0 
     /tmp/ccCcDxah.s:1074   .text:000000000000058c .L0 
     /tmp/ccCcDxah.s:1075   .text:000000000000058c .L0 
     /tmp/ccCcDxah.s:1076   .text:000000000000058c .L0 
     /tmp/ccCcDxah.s:1081   .text:0000000000000590 .L0 
     /tmp/ccCcDxah.s:1082   .text:0000000000000590 .L0 
     /tmp/ccCcDxah.s:1088   .text:000000000000059c .L0 
     /tmp/ccCcDxah.s:1093   .text:00000000000005a8 .L0 
     /tmp/ccCcDxah.s:1097   .text:00000000000005b4 .L0 
     /tmp/ccCcDxah.s:1099   .text:00000000000005b8 .L0 
     /tmp/ccCcDxah.s:1101   .text:00000000000005bc .L0 
GAS LISTING /tmp/ccCcDxah.s 			page 46


     /tmp/ccCcDxah.s:1103   .text:00000000000005c0 .L0 
     /tmp/ccCcDxah.s:1105   .text:00000000000005c4 .L0 
     /tmp/ccCcDxah.s:1107   .text:00000000000005c8 .L0 
     /tmp/ccCcDxah.s:1109   .text:00000000000005cc .L0 
     /tmp/ccCcDxah.s:1111   .text:00000000000005d0 .L0 
     /tmp/ccCcDxah.s:1113   .text:00000000000005d4 .L0 
     /tmp/ccCcDxah.s:1115   .text:00000000000005d8 .L0 
     /tmp/ccCcDxah.s:1119   .text:00000000000005e4 .L0 
     /tmp/ccCcDxah.s:1129   .text:00000000000005f0 .L0 
     /tmp/ccCcDxah.s:1142   .text:0000000000000600 .L0 
     /tmp/ccCcDxah.s:1150   .text:0000000000000608 .L0 
     /tmp/ccCcDxah.s:1160   .text:0000000000000610 .L0 
     /tmp/ccCcDxah.s:1161   .text:0000000000000610 .L0 
     /tmp/ccCcDxah.s:1162   .text:0000000000000610 .L0 
     /tmp/ccCcDxah.s:1172   .text:0000000000000618 .L0 
     /tmp/ccCcDxah.s:1173   .text:0000000000000618 .L0 
     /tmp/ccCcDxah.s:1179   .text:000000000000062c .L0 
     /tmp/ccCcDxah.s:1180   .text:000000000000062c .L0 
     /tmp/ccCcDxah.s:1184   .text:0000000000000634 .L0 
     /tmp/ccCcDxah.s:1185   .text:0000000000000634 .L0 
     /tmp/ccCcDxah.s:1191   .text:0000000000000640 .L0 
     /tmp/ccCcDxah.s:1192   .text:0000000000000640 .L0 
     /tmp/ccCcDxah.s:1197   .text:0000000000000644 .L0 
     /tmp/ccCcDxah.s:1199   .text:0000000000000648 .L0 
     /tmp/ccCcDxah.s:1204   .text:000000000000064c .L0 
     /tmp/ccCcDxah.s:1205   .text:000000000000064c .L0 
     /tmp/ccCcDxah.s:1206   .text:000000000000064c .L0 
  src/../h/riscv.hpp:109    .text:000000000000064c .L0 
     /tmp/ccCcDxah.s:1214   .text:0000000000000654 .L0 
     /tmp/ccCcDxah.s:1215   .text:0000000000000654 .L0 
     /tmp/ccCcDxah.s:1219   .text:0000000000000658 .L0 
     /tmp/ccCcDxah.s:1223   .text:000000000000065c .L0 
     /tmp/ccCcDxah.s:1224   .text:000000000000065c .L0 
     /tmp/ccCcDxah.s:1225   .text:000000000000065c .L0 
  src/../h/riscv.hpp:177    .text:000000000000065c .L0 
     /tmp/ccCcDxah.s:1233   .text:0000000000000664 .L0 
     /tmp/ccCcDxah.s:1234   .text:0000000000000664 .L0 
     /tmp/ccCcDxah.s:1238   .text:0000000000000668 .L0 
     /tmp/ccCcDxah.s:1240   .text:000000000000066c .L0 
     /tmp/ccCcDxah.s:1241   .text:000000000000066c .L0 
     /tmp/ccCcDxah.s:1243   .text:0000000000000674 .L0 
     /tmp/ccCcDxah.s:1244   .text:0000000000000674 .L0 
     /tmp/ccCcDxah.s:1247   .text:000000000000067c .L0 
     /tmp/ccCcDxah.s:1248   .text:000000000000067c .L0 
     /tmp/ccCcDxah.s:1253   .text:0000000000000680 .L0 
  src/../h/riscv.hpp:183    .text:0000000000000680 .L0 
     /tmp/ccCcDxah.s:1263   .text:0000000000000684 .L0 
     /tmp/ccCcDxah.s:1264   .text:0000000000000684 .L0 
     /tmp/ccCcDxah.s:1269   .text:0000000000000688 .L0 
  src/../h/riscv.hpp:115    .text:0000000000000688 .L0 
     /tmp/ccCcDxah.s:1283   .text:0000000000000690 .L0 
     /tmp/ccCcDxah.s:1314   .text:0000000000000690 .L0 
     /tmp/ccCcDxah.s:81     .text:0000000000000058 .L0 
     /tmp/ccCcDxah.s:1288   .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccCcDxah.s:91     .text:000000000000006c .L0 
     /tmp/ccCcDxah.s:1291   .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccCcDxah.s:102    .text:0000000000000088 .L0 
GAS LISTING /tmp/ccCcDxah.s 			page 47


     /tmp/ccCcDxah.s:135    .text:00000000000000c0 .L0 
     /tmp/ccCcDxah.s:144    .text:00000000000000d0 .L0 
     /tmp/ccCcDxah.s:154    .text:00000000000000e0 .L0 
     /tmp/ccCcDxah.s:211    .text:000000000000014c .L0 
     /tmp/ccCcDxah.s:264    .text:0000000000000194 .L0 
     /tmp/ccCcDxah.s:308    .text:00000000000001f0 .L0 
     /tmp/ccCcDxah.s:327    .text:000000000000020c .L0 
     /tmp/ccCcDxah.s:1303   .rodata.str1.8:0000000000000090 .LC5
     /tmp/ccCcDxah.s:493    .text:00000000000002d8 .L0 
     /tmp/ccCcDxah.s:566    .rodata:0000000000000000 .L21
     /tmp/ccCcDxah.s:558    .text:0000000000000324 .L0 
     /tmp/ccCcDxah.s:804    .text:00000000000003f4 .L0 
     /tmp/ccCcDxah.s:1294   .rodata.str1.8:0000000000000020 .LC2
     /tmp/ccCcDxah.s:807    .text:0000000000000404 .L0 
     /tmp/ccCcDxah.s:1297   .rodata.str1.8:0000000000000058 .LC3
     /tmp/ccCcDxah.s:890    .text:000000000000046c .L0 
     /tmp/ccCcDxah.s:900    .text:0000000000000488 .L0 
     /tmp/ccCcDxah.s:1300   .rodata.str1.8:0000000000000078 .LC4
     /tmp/ccCcDxah.s:905    .text:0000000000000498 .L0 
     /tmp/ccCcDxah.s:915    .text:00000000000004b4 .L0 
     /tmp/ccCcDxah.s:1026   .text:000000000000052c .L0 
     /tmp/ccCcDxah.s:1082   .text:0000000000000590 .L0 
     /tmp/ccCcDxah.s:1173   .text:0000000000000618 .L0 
     /tmp/ccCcDxah.s:1185   .text:0000000000000634 .L0 
     /tmp/ccCcDxah.s:1241   .text:000000000000066c .L0 
     /tmp/ccCcDxah.s:88     .text:000000000000006c .L16
     /tmp/ccCcDxah.s:201    .text:0000000000000144 .L9
     /tmp/ccCcDxah.s:357    .text:0000000000000244 .L3
     /tmp/ccCcDxah.s:316    .text:0000000000000204 .L14
     /tmp/ccCcDxah.s:113    .text:00000000000000a8 .L7
     /tmp/ccCcDxah.s:126    .text:00000000000000b4 .L8
     /tmp/ccCcDxah.s:347    .text:0000000000000238 .L10
     /tmp/ccCcDxah.s:231    .text:0000000000000178 .L11
     /tmp/ccCcDxah.s:247    .text:0000000000000184 .L12
     /tmp/ccCcDxah.s:506    .text:00000000000002f4 .L44
     /tmp/ccCcDxah.s:1153   .text:0000000000000610 .L45
     /tmp/ccCcDxah.s:693    .text:000000000000036c .L17
     /tmp/ccCcDxah.s:1133   .text:00000000000005f8 .L39
     /tmp/ccCcDxah.s:648    .text:0000000000000354 .L19
     /tmp/ccCcDxah.s:1137   .text:0000000000000600 .L40
     /tmp/ccCcDxah.s:1145   .text:0000000000000608 .L41
     /tmp/ccCcDxah.s:829    .text:0000000000000430 .L35
     /tmp/ccCcDxah.s:922    .text:00000000000004c8 .L42
     /tmp/ccCcDxah.s:883    .text:000000000000046c .L36
     /tmp/ccCcDxah.s:635    .text:000000000000033c .L34
     /tmp/ccCcDxah.s:713    .text:0000000000000384 .L33
     /tmp/ccCcDxah.s:733    .text:00000000000003a0 .L32
     /tmp/ccCcDxah.s:751    .text:00000000000003b8 .L31
     /tmp/ccCcDxah.s:769    .text:00000000000003d0 .L30
     /tmp/ccCcDxah.s:789    .text:00000000000003e8 .L29
     /tmp/ccCcDxah.s:846    .text:0000000000000444 .L28
     /tmp/ccCcDxah.s:863    .text:0000000000000454 .L27
     /tmp/ccCcDxah.s:928    .text:00000000000004d0 .L26
     /tmp/ccCcDxah.s:956    .text:00000000000004f0 .L25
     /tmp/ccCcDxah.s:974    .text:0000000000000504 .L24
     /tmp/ccCcDxah.s:996    .text:0000000000000518 .L23
     /tmp/ccCcDxah.s:1019   .text:000000000000052c .L22
GAS LISTING /tmp/ccCcDxah.s 			page 48


     /tmp/ccCcDxah.s:1072   .text:000000000000058c .L20
     /tmp/ccCcDxah.s:4071   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccCcDxah.s:6382   .debug_str:000000000000063b .LASF250
     /tmp/ccCcDxah.s:6680   .debug_str:0000000000000fc4 .LASF251
     /tmp/ccCcDxah.s:6326   .debug_str:0000000000000473 .LASF252
     /tmp/ccCcDxah.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccCcDxah.s:1306   .text:0000000000000690 .Letext0
     /tmp/ccCcDxah.s:6188   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccCcDxah.s:6360   .debug_str:0000000000000592 .LASF0
     /tmp/ccCcDxah.s:6396   .debug_str:0000000000000771 .LASF1
     /tmp/ccCcDxah.s:6534   .debug_str:0000000000000b94 .LASF2
     /tmp/ccCcDxah.s:6298   .debug_str:00000000000003ae .LASF3
     /tmp/ccCcDxah.s:6544   .debug_str:0000000000000bde .LASF4
     /tmp/ccCcDxah.s:6372   .debug_str:00000000000005dd .LASF5
     /tmp/ccCcDxah.s:6212   .debug_str:00000000000000ea .LASF6
     /tmp/ccCcDxah.s:6498   .debug_str:0000000000000a9d .LASF7
     /tmp/ccCcDxah.s:6482   .debug_str:0000000000000a2e .LASF8
     /tmp/ccCcDxah.s:6386   .debug_str:000000000000071b .LASF9
     /tmp/ccCcDxah.s:6322   .debug_str:000000000000045d .LASF10
     /tmp/ccCcDxah.s:6336   .debug_str:0000000000000500 .LASF11
     /tmp/ccCcDxah.s:6250   .debug_str:0000000000000237 .LASF12
     /tmp/ccCcDxah.s:6310   .debug_str:000000000000040d .LASF13
     /tmp/ccCcDxah.s:6264   .debug_str:000000000000029b .LASF14
     /tmp/ccCcDxah.s:6248   .debug_str:0000000000000227 .LASF15
     /tmp/ccCcDxah.s:6580   .debug_str:0000000000000cbf .LASF16
     /tmp/ccCcDxah.s:6294   .debug_str:000000000000037c .LASF17
     /tmp/ccCcDxah.s:6566   .debug_str:0000000000000c69 .LASF18
     /tmp/ccCcDxah.s:6664   .debug_str:0000000000000f4d .LASF63
     /tmp/ccCcDxah.s:6514   .debug_str:0000000000000b15 .LASF253
     /tmp/ccCcDxah.s:6400   .debug_str:000000000000078a .LASF19
     /tmp/ccCcDxah.s:6218   .debug_str:000000000000011d .LASF20
     /tmp/ccCcDxah.s:6684   .debug_str:0000000000000fde .LASF21
     /tmp/ccCcDxah.s:6348   .debug_str:000000000000053e .LASF54
     /tmp/ccCcDxah.s:6356   .debug_str:0000000000000574 .LASF56
     /tmp/ccCcDxah.s:6640   .debug_str:0000000000000e64 .LASF22
     /tmp/ccCcDxah.s:6630   .debug_str:0000000000000e1a .LASF24
     /tmp/ccCcDxah.s:6528   .debug_str:0000000000000b6c .LASF26
     /tmp/ccCcDxah.s:6468   .debug_str:00000000000009c6 .LASF28
     /tmp/ccCcDxah.s:6506   .debug_str:0000000000000ae0 .LASF23
     /tmp/ccCcDxah.s:6510   .debug_str:0000000000000aee .LASF25
     /tmp/ccCcDxah.s:6452   .debug_str:0000000000000925 .LASF27
     /tmp/ccCcDxah.s:6388   .debug_str:000000000000072e .LASF29
     /tmp/ccCcDxah.s:6678   .debug_str:0000000000000fbc .LASF30
     /tmp/ccCcDxah.s:6610   .debug_str:0000000000000d72 .LASF31
     /tmp/ccCcDxah.s:6446   .debug_str:0000000000000907 .LASF32
     /tmp/ccCcDxah.s:6466   .debug_str:00000000000009b2 .LASF33
     /tmp/ccCcDxah.s:6406   .debug_str:00000000000007b2 .LASF34
     /tmp/ccCcDxah.s:6512   .debug_str:0000000000000b01 .LASF35
     /tmp/ccCcDxah.s:6708   .debug_str:00000000000010ad .LASF36
     /tmp/ccCcDxah.s:6366   .debug_str:00000000000005b4 .LASF37
     /tmp/ccCcDxah.s:6576   .debug_str:0000000000000cab .LASF38
     /tmp/ccCcDxah.s:6548   .debug_str:0000000000000bea .LASF39
     /tmp/ccCcDxah.s:6550   .debug_str:0000000000000bfd .LASF40
     /tmp/ccCcDxah.s:6256   .debug_str:0000000000000264 .LASF41
     /tmp/ccCcDxah.s:6292   .debug_str:0000000000000376 .LASF42
     /tmp/ccCcDxah.s:6352   .debug_str:0000000000000559 .LASF43
     /tmp/ccCcDxah.s:6364   .debug_str:00000000000005ae .LASF44
GAS LISTING /tmp/ccCcDxah.s 			page 49


     /tmp/ccCcDxah.s:6282   .debug_str:000000000000032e .LASF45
     /tmp/ccCcDxah.s:6214   .debug_str:00000000000000f1 .LASF46
     /tmp/ccCcDxah.s:6538   .debug_str:0000000000000bac .LASF47
     /tmp/ccCcDxah.s:6532   .debug_str:0000000000000b89 .LASF48
     /tmp/ccCcDxah.s:6702   .debug_str:000000000000107c .LASF49
     /tmp/ccCcDxah.s:6668   .debug_str:0000000000000f59 .LASF50
     /tmp/ccCcDxah.s:6688   .debug_str:0000000000000ff2 .LASF51
     /tmp/ccCcDxah.s:6660   .debug_str:0000000000000f25 .LASF52
     /tmp/ccCcDxah.s:6424   .debug_str:0000000000000844 .LASF53
     /tmp/ccCcDxah.s:6674   .debug_str:0000000000000fa2 .LASF55
     /tmp/ccCcDxah.s:6334   .debug_str:00000000000004e4 .LASF57
     /tmp/ccCcDxah.s:6488   .debug_str:0000000000000a5c .LASF58
     /tmp/ccCcDxah.s:6380   .debug_str:0000000000000619 .LASF60
     /tmp/ccCcDxah.s:6362   .debug_str:000000000000059f .LASF59
     /tmp/ccCcDxah.s:6642   .debug_str:0000000000000e6d .LASF61
     /tmp/ccCcDxah.s:6606   .debug_str:0000000000000d64 .LASF62
     /tmp/ccCcDxah.s:6586   .debug_str:0000000000000ce6 .LASF254
     /tmp/ccCcDxah.s:6546   .debug_str:0000000000000be5 .LASF64
     /tmp/ccCcDxah.s:6206   .debug_str:0000000000000099 .LASF66
     /tmp/ccCcDxah.s:6588   .debug_str:0000000000000cee .LASF72
     /tmp/ccCcDxah.s:6442   .debug_str:00000000000008e7 .LASF74
     /tmp/ccCcDxah.s:6236   .debug_str:00000000000001c4 .LASF65
     /tmp/ccCcDxah.s:6632   .debug_str:0000000000000e2f .LASF67
     /tmp/ccCcDxah.s:6358   .debug_str:000000000000058c .LASF68
     /tmp/ccCcDxah.s:6350   .debug_str:0000000000000549 .LASF69
     /tmp/ccCcDxah.s:6200   .debug_str:000000000000004f .LASF70
     /tmp/ccCcDxah.s:6470   .debug_str:00000000000009db .LASF71
     /tmp/ccCcDxah.s:6536   .debug_str:0000000000000ba2 .LASF73
     /tmp/ccCcDxah.s:6582   .debug_str:0000000000000ccb .LASF75
     /tmp/ccCcDxah.s:6624   .debug_str:0000000000000dea .LASF76
     /tmp/ccCcDxah.s:6458   .debug_str:0000000000000952 .LASF77
     /tmp/ccCcDxah.s:6438   .debug_str:00000000000008d5 .LASF78
     /tmp/ccCcDxah.s:6410   .debug_str:00000000000007c2 .LASF79
     /tmp/ccCcDxah.s:6418   .debug_str:0000000000000801 .LASF80
     /tmp/ccCcDxah.s:6644   .debug_str:0000000000000e89 .LASF81
     /tmp/ccCcDxah.s:6578   .debug_str:0000000000000cb2 .LASF82
     /tmp/ccCcDxah.s:6646   .debug_str:0000000000000ea2 .LASF83
     /tmp/ccCcDxah.s:6472   .debug_str:00000000000009ed .LASF255
     /tmp/ccCcDxah.s:6398   .debug_str:0000000000000784 .LASF84
     /tmp/ccCcDxah.s:6526   .debug_str:0000000000000b5c .LASF85
     /tmp/ccCcDxah.s:6604   .debug_str:0000000000000d5c .LASF179
     /tmp/ccCcDxah.s:6502   .debug_str:0000000000000abf .LASF107
     /tmp/ccCcDxah.s:6196   .debug_str:000000000000003a .LASF86
     /tmp/ccCcDxah.s:6602   .debug_str:0000000000000d57 .LASF87
     /tmp/ccCcDxah.s:6700   .debug_str:0000000000001076 .LASF88
     /tmp/ccCcDxah.s:6628   .debug_str:0000000000000e12 .LASF89
     /tmp/ccCcDxah.s:6614   .debug_str:0000000000000d90 .LASF90
     /tmp/ccCcDxah.s:6572   .debug_str:0000000000000c9c .LASF91
     /tmp/ccCcDxah.s:6242   .debug_str:00000000000001f0 .LASF92
     /tmp/ccCcDxah.s:6612   .debug_str:0000000000000d86 .LASF93
     /tmp/ccCcDxah.s:6492   .debug_str:0000000000000a7f .LASF94
     /tmp/ccCcDxah.s:6402   .debug_str:0000000000000793 .LASF95
     /tmp/ccCcDxah.s:6276   .debug_str:0000000000000306 .LASF184
     /tmp/ccCcDxah.s:6204   .debug_str:0000000000000071 .LASF186
     /tmp/ccCcDxah.s:6288   .debug_str:0000000000000368 .LASF96
     /tmp/ccCcDxah.s:6258   .debug_str:0000000000000277 .LASF97
     /tmp/ccCcDxah.s:6562   .debug_str:0000000000000c56 .LASF98
GAS LISTING /tmp/ccCcDxah.s 			page 50


     /tmp/ccCcDxah.s:6480   .debug_str:0000000000000a1f .LASF99
     /tmp/ccCcDxah.s:6554   .debug_str:0000000000000c10 .LASF104
     /tmp/ccCcDxah.s:6540   .debug_str:0000000000000bc4 .LASF100
     /tmp/ccCcDxah.s:6686   .debug_str:0000000000000fe7 .LASF101
     /tmp/ccCcDxah.s:6414   .debug_str:00000000000007e3 .LASF102
     /tmp/ccCcDxah.s:6320   .debug_str:0000000000000453 .LASF103
     /tmp/ccCcDxah.s:6592   .debug_str:0000000000000cfe .LASF105
     /tmp/ccCcDxah.s:6530   .debug_str:0000000000000b75 .LASF106
     /tmp/ccCcDxah.s:6694   .debug_str:0000000000001034 .LASF256
     /tmp/ccCcDxah.s:6328   .debug_str:0000000000000486 .LASF108
     /tmp/ccCcDxah.s:6658   .debug_str:0000000000000f1a .LASF109
     /tmp/ccCcDxah.s:6384   .debug_str:00000000000006ff .LASF110
     /tmp/ccCcDxah.s:6246   .debug_str:0000000000000216 .LASF111
     /tmp/ccCcDxah.s:6286   .debug_str:0000000000000346 .LASF112
     /tmp/ccCcDxah.s:6484   .debug_str:0000000000000a41 .LASF113
     /tmp/ccCcDxah.s:6274   .debug_str:0000000000000301 .LASF257
     /tmp/ccCcDxah.s:6574   .debug_str:0000000000000ca6 .LASF114
     /tmp/ccCcDxah.s:6448   .debug_str:000000000000090f .LASF115
     /tmp/ccCcDxah.s:6436   .debug_str:00000000000008d0 .LASF116
     /tmp/ccCcDxah.s:6568   .debug_str:0000000000000c7f .LASF117
     /tmp/ccCcDxah.s:6306   .debug_str:00000000000003d5 .LASF118
     /tmp/ccCcDxah.s:6278   .debug_str:0000000000000314 .LASF143
     /tmp/ccCcDxah.s:6520   .debug_str:0000000000000b2d .LASF144
     /tmp/ccCcDxah.s:6392   .debug_str:000000000000075c .LASF119
     /tmp/ccCcDxah.s:6244   .debug_str:00000000000001f9 .LASF120
     /tmp/ccCcDxah.s:6408   .debug_str:00000000000007ba .LASF121
     /tmp/ccCcDxah.s:6296   .debug_str:0000000000000392 .LASF122
     /tmp/ccCcDxah.s:6478   .debug_str:0000000000000a13 .LASF123
     /tmp/ccCcDxah.s:6662   .debug_str:0000000000000f2f .LASF124
     /tmp/ccCcDxah.s:6712   .debug_str:00000000000010bf .LASF125
     /tmp/ccCcDxah.s:6266   .debug_str:00000000000002ab .LASF126
     /tmp/ccCcDxah.s:6560   .debug_str:0000000000000c4b .LASF127
     /tmp/ccCcDxah.s:6428   .debug_str:0000000000000873 .LASF128
     /tmp/ccCcDxah.s:6494   .debug_str:0000000000000a8d .LASF129
     /tmp/ccCcDxah.s:6202   .debug_str:0000000000000057 .LASF130
     /tmp/ccCcDxah.s:6570   .debug_str:0000000000000c92 .LASF131
     /tmp/ccCcDxah.s:6332   .debug_str:00000000000004b9 .LASF132
     /tmp/ccCcDxah.s:6238   .debug_str:00000000000001d0 .LASF258
     /tmp/ccCcDxah.s:6648   .debug_str:0000000000000ec2 .LASF133
     /tmp/ccCcDxah.s:6456   .debug_str:000000000000094d .LASF134
     /tmp/ccCcDxah.s:6432   .debug_str:00000000000008b4 .LASF135
     /tmp/ccCcDxah.s:6224   .debug_str:0000000000000161 .LASF136
     /tmp/ccCcDxah.s:6422   .debug_str:000000000000082c .LASF137
     /tmp/ccCcDxah.s:6290   .debug_str:0000000000000371 .LASF138
     /tmp/ccCcDxah.s:6190   .debug_str:0000000000000000 .LASF139
     /tmp/ccCcDxah.s:6584   .debug_str:0000000000000cdf .LASF140
     /tmp/ccCcDxah.s:6426   .debug_str:000000000000085a .LASF141
     /tmp/ccCcDxah.s:6696   .debug_str:0000000000001048 .LASF142
     /tmp/ccCcDxah.s:6698   .debug_str:000000000000105f .LASF145
     /tmp/ccCcDxah.s:6318   .debug_str:000000000000043f .LASF146
     /tmp/ccCcDxah.s:6232   .debug_str:00000000000001a1 .LASF147
     /tmp/ccCcDxah.s:6300   .debug_str:00000000000003b4 .LASF148
     /tmp/ccCcDxah.s:6324   .debug_str:000000000000046d .LASF149
     /tmp/ccCcDxah.s:6338   .debug_str:000000000000050e .LASF259
     /tmp/ccCcDxah.s:6710   .debug_str:00000000000010b5 .LASF150
     /tmp/ccCcDxah.s:6316   .debug_str:0000000000000436 .LASF151
     /tmp/ccCcDxah.s:6268   .debug_str:00000000000002c6 .LASF152
GAS LISTING /tmp/ccCcDxah.s 			page 51


     /tmp/ccCcDxah.s:6500   .debug_str:0000000000000aa4 .LASF153
     /tmp/ccCcDxah.s:6564   .debug_str:0000000000000c5b .LASF154
     /tmp/ccCcDxah.s:6504   .debug_str:0000000000000ad4 .LASF155
     /tmp/ccCcDxah.s:6280   .debug_str:000000000000031e .LASF156
     /tmp/ccCcDxah.s:6254   .debug_str:000000000000025b .LASF157
     /tmp/ccCcDxah.s:6260   .debug_str:000000000000028a .LASF158
     /tmp/ccCcDxah.s:6444   .debug_str:00000000000008fe .LASF159
     /tmp/ccCcDxah.s:6596   .debug_str:0000000000000d3a .LASF160
     /tmp/ccCcDxah.s:6690   .debug_str:0000000000001008 .LASF161
     /tmp/ccCcDxah.s:6378   .debug_str:0000000000000614 .LASF162
     /tmp/ccCcDxah.s:6434   .debug_str:00000000000008cb .LASF163
     /tmp/ccCcDxah.s:6476   .debug_str:0000000000000a03 .LASF164
     /tmp/ccCcDxah.s:6622   .debug_str:0000000000000de0 .LASF260
     /tmp/ccCcDxah.s:6302   .debug_str:00000000000003bc .LASF165
     /tmp/ccCcDxah.s:6666   .debug_str:0000000000000f53 .LASF166
     /tmp/ccCcDxah.s:6682   .debug_str:0000000000000fd2 .LASF167
     /tmp/ccCcDxah.s:6430   .debug_str:0000000000000890 .LASF168
     /tmp/ccCcDxah.s:6616   .debug_str:0000000000000d9a .LASF169
     /tmp/ccCcDxah.s:6216   .debug_str:00000000000000fc .LASF170
     /tmp/ccCcDxah.s:6354   .debug_str:000000000000056b .LASF171
     /tmp/ccCcDxah.s:6308   .debug_str:00000000000003ec .LASF172
     /tmp/ccCcDxah.s:6558   .debug_str:0000000000000c38 .LASF173
     /tmp/ccCcDxah.s:6594   .debug_str:0000000000000d0f .LASF174
     /tmp/ccCcDxah.s:6390   .debug_str:0000000000000741 .LASF175
     /tmp/ccCcDxah.s:6672   .debug_str:0000000000000f6f .LASF176
     /tmp/ccCcDxah.s:6342   .debug_str:0000000000000521 .LASF177
     /tmp/ccCcDxah.s:6230   .debug_str:0000000000000191 .LASF178
     /tmp/ccCcDxah.s:6556   .debug_str:0000000000000c21 .LASF180
     /tmp/ccCcDxah.s:6228   .debug_str:0000000000000178 .LASF181
     /tmp/ccCcDxah.s:6374   .debug_str:00000000000005ef .LASF182
     /tmp/ccCcDxah.s:6626   .debug_str:0000000000000df6 .LASF183
     /tmp/ccCcDxah.s:6460   .debug_str:0000000000000969 .LASF185
     /tmp/ccCcDxah.s:6208   .debug_str:00000000000000a5 .LASF187
     /tmp/ccCcDxah.s:6376   .debug_str:000000000000060b .LASF188
     /tmp/ccCcDxah.s:6634   .debug_str:0000000000000e46 .LASF189
     /tmp/ccCcDxah.s:6420   .debug_str:000000000000080e .LASF190
     /tmp/ccCcDxah.s:6226   .debug_str:0000000000000167 .LASF191
     /tmp/ccCcDxah.s:6692   .debug_str:0000000000001013 .LASF192
     /tmp/ccCcDxah.s:6404   .debug_str:00000000000007ac .LASF193
     /tmp/ccCcDxah.s:6192   .debug_str:0000000000000017 .LASF194
     /tmp/ccCcDxah.s:6284   .debug_str:0000000000000340 .LASF195
     /tmp/ccCcDxah.s:6252   .debug_str:0000000000000246 .LASF196
     /tmp/ccCcDxah.s:6552   .debug_str:0000000000000c04 .LASF197
     /tmp/ccCcDxah.s:6234   .debug_str:00000000000001a8 .LASF198
     /tmp/ccCcDxah.s:6636   .debug_str:0000000000000e54 .LASF199
     /tmp/ccCcDxah.s:6654   .debug_str:0000000000000ef8 .LASF200
     /tmp/ccCcDxah.s:6486   .debug_str:0000000000000a4b .LASF201
     /tmp/ccCcDxah.s:6272   .debug_str:00000000000002e0 .LASF202
     /tmp/ccCcDxah.s:6600   .debug_str:0000000000000d4c .LASF203
     /tmp/ccCcDxah.s:6462   .debug_str:000000000000097b .LASF204
     /tmp/ccCcDxah.s:6676   .debug_str:0000000000000fb1 .LASF205
     /tmp/ccCcDxah.s:6370   .debug_str:00000000000005d1 .LASF206
     /tmp/ccCcDxah.s:6590   .debug_str:0000000000000cf9 .LASF207
     /tmp/ccCcDxah.s:6312   .debug_str:000000000000041c .LASF208
     /tmp/ccCcDxah.s:6704   .debug_str:0000000000001094 .LASF209
     /tmp/ccCcDxah.s:6620   .debug_str:0000000000000db7 .LASF210
     /tmp/ccCcDxah.s:6542   .debug_str:0000000000000bcf .LASF211
GAS LISTING /tmp/ccCcDxah.s 			page 52


     /tmp/ccCcDxah.s:6330   .debug_str:000000000000049e .LASF212
     /tmp/ccCcDxah.s:6524   .debug_str:0000000000000b4c .LASF213
     /tmp/ccCcDxah.s:6220   .debug_str:0000000000000126 .LASF214
     /tmp/ccCcDxah.s:6650   .debug_str:0000000000000ecd .LASF215
     /tmp/ccCcDxah.s:6454   .debug_str:000000000000092c .LASF216
     /tmp/ccCcDxah.s:6518   .debug_str:0000000000000b26 .LASF217
     /tmp/ccCcDxah.s:6222   .debug_str:0000000000000141 .LASF218
     /tmp/ccCcDxah.s:6516   .debug_str:0000000000000b20 .LASF219
     /tmp/ccCcDxah.s:6340   .debug_str:000000000000051a .LASF220
     /tmp/ccCcDxah.s:6262   .debug_str:0000000000000294 .LASF221
     /tmp/ccCcDxah.s:6240   .debug_str:00000000000001e5 .LASF222
     /tmp/ccCcDxah.s:6706   .debug_str:00000000000010a3 .LASF223
     /tmp/ccCcDxah.s:6522   .debug_str:0000000000000b44 .LASF224
     /tmp/ccCcDxah.s:6314   .debug_str:0000000000000431 .LASF225
     /tmp/ccCcDxah.s:385    .text:0000000000000268 .LFB59
     /tmp/ccCcDxah.s:1284   .text:0000000000000690 .LFE59
     /tmp/ccCcDxah.s:5474   .debug_loc:0000000000000000 .LLST14
     /tmp/ccCcDxah.s:5485   .debug_loc:0000000000000036 .LLST15
     /tmp/ccCcDxah.s:5512   .debug_loc:00000000000000b8 .LLST16
     /tmp/ccCcDxah.s:5583   .debug_loc:000000000000020b .LLST17
     /tmp/ccCcDxah.s:6270   .debug_str:00000000000002d9 .LASF226
     /tmp/ccCcDxah.s:5654   .debug_loc:000000000000035e .LLST18
     /tmp/ccCcDxah.s:6136   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccCcDxah.s:6608   .debug_str:0000000000000d6d .LASF227
     /tmp/ccCcDxah.s:6346   .debug_str:0000000000000536 .LASF228
     /tmp/ccCcDxah.s:5759   .debug_loc:00000000000004e2 .LLST22
     /tmp/ccCcDxah.s:6598   .debug_str:0000000000000d45 .LASF229
     /tmp/ccCcDxah.s:5812   .debug_loc:00000000000005c9 .LLST23
     /tmp/ccCcDxah.s:777    .text:00000000000003d8 .LVL74
     /tmp/ccCcDxah.s:5823   .debug_loc:00000000000005ff .LLST24
     /tmp/ccCcDxah.s:818    .text:0000000000000420 .LBB175
     /tmp/ccCcDxah.s:831    .text:0000000000000430 .LBE175
     /tmp/ccCcDxah.s:5830   .debug_loc:0000000000000622 .LLST25
     /tmp/ccCcDxah.s:828    .text:0000000000000430 .LVL80
     /tmp/ccCcDxah.s:798    .text:00000000000003f0 .LVL76
     /tmp/ccCcDxah.s:810    .text:0000000000000418 .LVL77
     /tmp/ccCcDxah.s:835    .text:000000000000043c .LVL81
     /tmp/ccCcDxah.s:5837   .debug_loc:0000000000000645 .LLST26
     /tmp/ccCcDxah.s:873    .text:0000000000000460 .LVL86
     /tmp/ccCcDxah.s:892    .text:000000000000047c .LVL88
     /tmp/ccCcDxah.s:897    .text:0000000000000488 .LVL89
     /tmp/ccCcDxah.s:902    .text:0000000000000498 .LVL90
     /tmp/ccCcDxah.s:907    .text:00000000000004a8 .LVL91
     /tmp/ccCcDxah.s:912    .text:00000000000004b4 .LVL92
     /tmp/ccCcDxah.s:917    .text:00000000000004c4 .LVL93
     /tmp/ccCcDxah.s:932    .text:00000000000004d0 .LBB181
     /tmp/ccCcDxah.s:945    .text:00000000000004e8 .LBE181
     /tmp/ccCcDxah.s:5844   .debug_loc:0000000000000668 .LLST27
     /tmp/ccCcDxah.s:939    .text:00000000000004dc .LVL97
     /tmp/ccCcDxah.s:944    .text:00000000000004e8 .LVL98
     /tmp/ccCcDxah.s:959    .text:00000000000004f0 .LBB182
     /tmp/ccCcDxah.s:970    .text:0000000000000500 .LBE182
     /tmp/ccCcDxah.s:5851   .debug_loc:000000000000068b .LLST28
     /tmp/ccCcDxah.s:966    .text:00000000000004fc .LVL101
     /tmp/ccCcDxah.s:977    .text:0000000000000504 .LBB183
     /tmp/ccCcDxah.s:985    .text:0000000000000510 .LBE183
     /tmp/ccCcDxah.s:5858   .debug_loc:00000000000006ae .LLST29
GAS LISTING /tmp/ccCcDxah.s 			page 53


     /tmp/ccCcDxah.s:984    .text:0000000000000510 .LVL105
     /tmp/ccCcDxah.s:999    .text:0000000000000518 .LBB184
     /tmp/ccCcDxah.s:1008   .text:0000000000000524 .LBE184
     /tmp/ccCcDxah.s:6638   .debug_str:0000000000000e5f .LASF230
     /tmp/ccCcDxah.s:5865   .debug_loc:00000000000006d1 .LLST30
     /tmp/ccCcDxah.s:6474   .debug_str:00000000000009f2 .LASF231
     /tmp/ccCcDxah.s:5872   .debug_loc:00000000000006f4 .LLST31
     /tmp/ccCcDxah.s:1007   .text:0000000000000524 .LVL108
     /tmp/ccCcDxah.s:510    .text:00000000000002f4 .LBB167
     /tmp/ccCcDxah.s:526    .text:0000000000000300 .LBE167
     /tmp/ccCcDxah.s:511    .text:00000000000002f4 .LBB168
     /tmp/ccCcDxah.s:525    .text:0000000000000300 .LBE168
     /tmp/ccCcDxah.s:532    .text:0000000000000308 .LBB169
     /tmp/ccCcDxah.s:547    .text:0000000000000314 .LBE169
     /tmp/ccCcDxah.s:533    .text:0000000000000308 .LBB170
     /tmp/ccCcDxah.s:546    .text:0000000000000314 .LBE170
     /tmp/ccCcDxah.s:1022   .text:000000000000052c .LBB185
     /tmp/ccCcDxah.s:1068   .text:0000000000000588 .LBE185
     /tmp/ccCcDxah.s:1029   .text:0000000000000538 .LBB187
     /tmp/ccCcDxah.s:1066   .text:0000000000000588 .LBE187
     /tmp/ccCcDxah.s:5895   .debug_loc:0000000000000745 .LLST32
     /tmp/ccCcDxah.s:1030   .text:0000000000000538 .LBB188
     /tmp/ccCcDxah.s:1065   .text:0000000000000588 .LBE188
     /tmp/ccCcDxah.s:5902   .debug_loc:0000000000000768 .LLST33
     /tmp/ccCcDxah.s:1035   .text:0000000000000544 .LVL112
     /tmp/ccCcDxah.s:1039   .text:0000000000000550 .LVL113
     /tmp/ccCcDxah.s:1060   .text:000000000000057c .LVL115
     /tmp/ccCcDxah.s:1064   .text:0000000000000588 .LVL116
     /tmp/ccCcDxah.s:1078   .text:0000000000000590 .LBB189
     /tmp/ccCcDxah.s:1125   .text:00000000000005f0 .LBE189
     /tmp/ccCcDxah.s:5909   .debug_loc:000000000000078b .LLST34
     /tmp/ccCcDxah.s:1085   .text:000000000000059c .LBB191
     /tmp/ccCcDxah.s:1123   .text:00000000000005f0 .LBE191
     /tmp/ccCcDxah.s:5916   .debug_loc:00000000000007ae .LLST35
     /tmp/ccCcDxah.s:5923   .debug_loc:00000000000007d1 .LLST36
     /tmp/ccCcDxah.s:1091   .text:00000000000005a8 .LVL121
     /tmp/ccCcDxah.s:1095   .text:00000000000005b4 .LVL122
     /tmp/ccCcDxah.s:1117   .text:00000000000005e4 .LVL123
     /tmp/ccCcDxah.s:1121   .text:00000000000005f0 .LVL124
     /tmp/ccCcDxah.s:667    .text:0000000000000360 .LBB205
     /tmp/ccCcDxah.s:678    .text:0000000000000364 .LBE205
     /tmp/ccCcDxah.s:5930   .debug_loc:00000000000007f4 .LLST37
     /tmp/ccCcDxah.s:683    .text:0000000000000368 .LBB207
     /tmp/ccCcDxah.s:695    .text:000000000000036c .LBE207
     /tmp/ccCcDxah.s:5937   .debug_loc:0000000000000817 .LLST38
     /tmp/ccCcDxah.s:641    .text:0000000000000344 .LVL56
     /tmp/ccCcDxah.s:644    .text:0000000000000350 .LVL57
     /tmp/ccCcDxah.s:723    .text:000000000000038c .LVL64
     /tmp/ccCcDxah.s:726    .text:0000000000000398 .LVL65
     /tmp/ccCcDxah.s:738    .text:00000000000003a8 .LVL68
     /tmp/ccCcDxah.s:740    .text:00000000000003b0 .LVL69
     /tmp/ccCcDxah.s:756    .text:00000000000003c0 .LVL71
     /tmp/ccCcDxah.s:758    .text:00000000000003c8 .LVL72
     /tmp/ccCcDxah.s:852    .text:000000000000044c .LVL83
     /tmp/ccCcDxah.s:1200   .text:000000000000064c .LBB157
     /tmp/ccCcDxah.s:1278   .text:0000000000000690 .LBE157
     /tmp/ccCcDxah.s:1202   .text:000000000000064c .LBB158
GAS LISTING /tmp/ccCcDxah.s 			page 54


     /tmp/ccCcDxah.s:1217   .text:0000000000000658 .LBE158
     /tmp/ccCcDxah.s:1203   .text:000000000000064c .LBB159
     /tmp/ccCcDxah.s:1216   .text:0000000000000658 .LBE159
     /tmp/ccCcDxah.s:1221   .text:000000000000065c .LBB160
     /tmp/ccCcDxah.s:1236   .text:0000000000000668 .LBE160
     /tmp/ccCcDxah.s:1222   .text:000000000000065c .LBB161
     /tmp/ccCcDxah.s:1235   .text:0000000000000668 .LBE161
     /tmp/ccCcDxah.s:1250   .text:0000000000000680 .LBB162
     /tmp/ccCcDxah.s:1261   .text:0000000000000684 .LBE162
     /tmp/ccCcDxah.s:5944   .debug_loc:000000000000083a .LLST21
     /tmp/ccCcDxah.s:1266   .text:0000000000000688 .LBB164
     /tmp/ccCcDxah.s:1277   .text:0000000000000690 .LBE164
     /tmp/ccCcDxah.s:1245   .text:000000000000067c .LVL135
     /tmp/ccCcDxah.s:452    .text:00000000000002a0 .LBB147
     /tmp/ccCcDxah.s:469    .text:00000000000002ac .LBE147
     /tmp/ccCcDxah.s:453    .text:00000000000002a0 .LBB148
     /tmp/ccCcDxah.s:468    .text:00000000000002ac .LBE148
     /tmp/ccCcDxah.s:1158   .text:0000000000000610 .LBB152
     /tmp/ccCcDxah.s:1170   .text:0000000000000618 .LBE152
     /tmp/ccCcDxah.s:5951   .debug_loc:000000000000085d .LLST19
     /tmp/ccCcDxah.s:1188   .text:0000000000000640 .LBB155
     /tmp/ccCcDxah.s:1195   .text:0000000000000644 .LBE155
     /tmp/ccCcDxah.s:5959   .debug_loc:0000000000000881 .LLST20
     /tmp/ccCcDxah.s:496    .text:00000000000002e8 .LVL50
     /tmp/ccCcDxah.s:500    .text:00000000000002f0 .LVL51
     /tmp/ccCcDxah.s:1181   .text:0000000000000634 .LVL132
     /tmp/ccCcDxah.s:49     .text:0000000000000020 .LFB58
     /tmp/ccCcDxah.s:379    .text:0000000000000268 .LFE58
     /tmp/ccCcDxah.s:5966   .debug_loc:00000000000008a4 .LLST0
     /tmp/ccCcDxah.s:6508   .debug_str:0000000000000ae7 .LASF232
     /tmp/ccCcDxah.s:5977   .debug_loc:00000000000008da .LLST1
     /tmp/ccCcDxah.s:141    .text:00000000000000d0 .LBB81
     /tmp/ccCcDxah.s:202    .text:0000000000000144 .LBE81
     /tmp/ccCcDxah.s:5996   .debug_loc:0000000000000936 .LLST4
     /tmp/ccCcDxah.s:150    .text:00000000000000e0 .LBB82
     /tmp/ccCcDxah.s:196    .text:0000000000000140 .LBE82
     /tmp/ccCcDxah.s:6003   .debug_loc:0000000000000959 .LLST5
     /tmp/ccCcDxah.s:157    .text:00000000000000ec .LBB84
     /tmp/ccCcDxah.s:194    .text:0000000000000140 .LBE84
     /tmp/ccCcDxah.s:6010   .debug_loc:000000000000097c .LLST6
     /tmp/ccCcDxah.s:6017   .debug_loc:000000000000099f .LLST7
     /tmp/ccCcDxah.s:162    .text:00000000000000f8 .LVL14
     /tmp/ccCcDxah.s:166    .text:0000000000000104 .LVL15
     /tmp/ccCcDxah.s:188    .text:0000000000000134 .LVL16
     /tmp/ccCcDxah.s:192    .text:0000000000000140 .LVL17
     /tmp/ccCcDxah.s:258    .text:0000000000000194 .LBB94
     /tmp/ccCcDxah.s:317    .text:0000000000000204 .LBE94
     /tmp/ccCcDxah.s:6024   .debug_loc:00000000000009c2 .LLST10
     /tmp/ccCcDxah.s:260    .text:0000000000000194 .LBB95
     /tmp/ccCcDxah.s:306    .text:00000000000001f0 .LBE95
     /tmp/ccCcDxah.s:261    .text:0000000000000194 .LBB96
     /tmp/ccCcDxah.s:305    .text:00000000000001f0 .LBE96
     /tmp/ccCcDxah.s:267    .text:00000000000001a0 .LBB97
     /tmp/ccCcDxah.s:303    .text:00000000000001f0 .LBE97
     /tmp/ccCcDxah.s:6031   .debug_loc:00000000000009e5 .LLST12
     /tmp/ccCcDxah.s:268    .text:00000000000001a0 .LBB98
     /tmp/ccCcDxah.s:302    .text:00000000000001f0 .LBE98
GAS LISTING /tmp/ccCcDxah.s 			page 55


     /tmp/ccCcDxah.s:6038   .debug_loc:0000000000000a08 .LLST13
     /tmp/ccCcDxah.s:272    .text:00000000000001ac .LVL26
     /tmp/ccCcDxah.s:276    .text:00000000000001b8 .LVL27
     /tmp/ccCcDxah.s:297    .text:00000000000001e4 .LVL29
     /tmp/ccCcDxah.s:301    .text:00000000000001f0 .LVL30
     /tmp/ccCcDxah.s:114    .text:00000000000000a8 .LBB74
     /tmp/ccCcDxah.s:116    .text:00000000000000a8 .LBB76
     /tmp/ccCcDxah.s:6045   .debug_loc:0000000000000a2b .LLST2
     /tmp/ccCcDxah.s:6056   .debug_loc:0000000000000a61 .LLST3
     /tmp/ccCcDxah.s:130    .text:00000000000000c0 .LVL11
     /tmp/ccCcDxah.s:219    .text:0000000000000164 .LVL20
     /tmp/ccCcDxah.s:236    .text:0000000000000178 .LBB87
     /tmp/ccCcDxah.s:238    .text:0000000000000178 .LBB89
     /tmp/ccCcDxah.s:6084   .debug_loc:0000000000000ac6 .LLST8
     /tmp/ccCcDxah.s:6095   .debug_loc:0000000000000afc .LLST9
     /tmp/ccCcDxah.s:251    .text:0000000000000190 .LVL24
     /tmp/ccCcDxah.s:335    .text:0000000000000224 .LVL34
     /tmp/ccCcDxah.s:73     .text:000000000000004c .LVL0
     /tmp/ccCcDxah.s:94     .text:000000000000007c .LVL5
     /tmp/ccCcDxah.s:99     .text:0000000000000088 .LVL6
     /tmp/ccCcDxah.s:104    .text:0000000000000098 .LVL7
     /tmp/ccCcDxah.s:109    .text:00000000000000a4 .LVL8
     /tmp/ccCcDxah.s:356    .text:0000000000000244 .LVL37
     /tmp/ccCcDxah.s:13     .text:0000000000000000 .LFB57
     /tmp/ccCcDxah.s:43     .text:0000000000000020 .LFE57
     /tmp/ccCcDxah.s:6210   .debug_str:00000000000000e0 .LASF233
     /tmp/ccCcDxah.s:6394   .debug_str:0000000000000765 .LASF261
     /tmp/ccCcDxah.s:6652   .debug_str:0000000000000ef3 .LASF234
     /tmp/ccCcDxah.s:6440   .debug_str:00000000000008e0 .LASF235
     /tmp/ccCcDxah.s:6304   .debug_str:00000000000003c2 .LASF237
     /tmp/ccCcDxah.s:6194   .debug_str:000000000000002c .LASF239
     /tmp/ccCcDxah.s:6496   .debug_str:0000000000000a96 .LASF241
     /tmp/ccCcDxah.s:6656   .debug_str:0000000000000f13 .LASF236
     /tmp/ccCcDxah.s:6198   .debug_str:000000000000003f .LASF238
     /tmp/ccCcDxah.s:6618   .debug_str:0000000000000da4 .LASF240
     /tmp/ccCcDxah.s:6670   .debug_str:0000000000000f63 .LASF242
     /tmp/ccCcDxah.s:6450   .debug_str:0000000000000914 .LASF243
     /tmp/ccCcDxah.s:6416   .debug_str:00000000000007e8 .LASF244
     /tmp/ccCcDxah.s:6368   .debug_str:00000000000005c8 .LASF245
     /tmp/ccCcDxah.s:6464   .debug_str:0000000000000996 .LASF246
     /tmp/ccCcDxah.s:6344   .debug_str:000000000000052b .LASF247
     /tmp/ccCcDxah.s:6412   .debug_str:00000000000007d8 .LASF248
     /tmp/ccCcDxah.s:6490   .debug_str:0000000000000a71 .LASF249
     /tmp/ccCcDxah.s:407    .text:0000000000000284 .LVL39
     /tmp/ccCcDxah.s:482    .text:00000000000002bc .LVL48
     /tmp/ccCcDxah.s:505    .text:00000000000002f4 .LVL52
     /tmp/ccCcDxah.s:557    .text:0000000000000324 .LVL55
     /tmp/ccCcDxah.s:413    .text:0000000000000288 .LVL40
     /tmp/ccCcDxah.s:646    .text:0000000000000354 .LVL58
     /tmp/ccCcDxah.s:712    .text:0000000000000384 .LVL63
     /tmp/ccCcDxah.s:814    .text:000000000000041c .LVL78
     /tmp/ccCcDxah.s:845    .text:0000000000000444 .LVL82
     /tmp/ccCcDxah.s:1028   .text:0000000000000538 .LVL110
     /tmp/ccCcDxah.s:1071   .text:000000000000058c .LVL117
     /tmp/ccCcDxah.s:1077   .text:0000000000000590 .LVL118
     /tmp/ccCcDxah.s:1132   .text:00000000000005f8 .LVL126
     /tmp/ccCcDxah.s:1144   .text:0000000000000608 .LVL128
GAS LISTING /tmp/ccCcDxah.s 			page 56


     /tmp/ccCcDxah.s:1152   .text:0000000000000610 .LVL129
     /tmp/ccCcDxah.s:1174   .text:0000000000000620 .LVL131
     /tmp/ccCcDxah.s:419    .text:000000000000028c .LVL41
     /tmp/ccCcDxah.s:494    .text:00000000000002e0 .LVL49
     /tmp/ccCcDxah.s:732    .text:00000000000003a0 .LVL67
     /tmp/ccCcDxah.s:750    .text:00000000000003b8 .LVL70
     /tmp/ccCcDxah.s:768    .text:00000000000003d0 .LVL73
     /tmp/ccCcDxah.s:788    .text:00000000000003e8 .LVL75
     /tmp/ccCcDxah.s:862    .text:0000000000000454 .LVL84
     /tmp/ccCcDxah.s:871    .text:0000000000000458 .LVL85
     /tmp/ccCcDxah.s:927    .text:00000000000004d0 .LVL95
     /tmp/ccCcDxah.s:937    .text:00000000000004d4 .LVL96
     /tmp/ccCcDxah.s:955    .text:00000000000004f0 .LVL99
     /tmp/ccCcDxah.s:964    .text:00000000000004f4 .LVL100
     /tmp/ccCcDxah.s:973    .text:0000000000000504 .LVL103
     /tmp/ccCcDxah.s:982    .text:0000000000000508 .LVL104
     /tmp/ccCcDxah.s:995    .text:0000000000000518 .LVL106
     /tmp/ccCcDxah.s:1005   .text:000000000000051c .LVL107
     /tmp/ccCcDxah.s:1018   .text:000000000000052c .LVL109
     /tmp/ccCcDxah.s:1033   .text:000000000000053c .LVL111
     /tmp/ccCcDxah.s:1089   .text:00000000000005a0 .LVL120
     /tmp/ccCcDxah.s:1136   .text:0000000000000600 .LVL127
     /tmp/ccCcDxah.s:425    .text:0000000000000290 .LVL42
     /tmp/ccCcDxah.s:467    .text:00000000000002ac .LVL47
     /tmp/ccCcDxah.s:519    .text:00000000000002f8 .LVL53
     /tmp/ccCcDxah.s:551    .text:0000000000000318 .LVL54
     /tmp/ccCcDxah.s:691    .text:000000000000036c .LVL62
     /tmp/ccCcDxah.s:729    .text:000000000000039c .LVL66
     /tmp/ccCcDxah.s:884    .text:000000000000046c .LVL87
     /tmp/ccCcDxah.s:921    .text:00000000000004c8 .LVL94
     /tmp/ccCcDxah.s:969    .text:0000000000000500 .LVL102
     /tmp/ccCcDxah.s:817    .text:0000000000000420 .LVL79
     /tmp/ccCcDxah.s:1048   .text:0000000000000560 .LVL114
     /tmp/ccCcDxah.s:1084   .text:000000000000059c .LVL119
     /tmp/ccCcDxah.s:1130   .text:00000000000005f4 .LVL125
     /tmp/ccCcDxah.s:666    .text:0000000000000360 .LVL59
     /tmp/ccCcDxah.s:675    .text:0000000000000364 .LVL60
     /tmp/ccCcDxah.s:682    .text:0000000000000368 .LVL61
     /tmp/ccCcDxah.s:1249   .text:0000000000000680 .LVL136
     /tmp/ccCcDxah.s:1258   .text:0000000000000684 .LVL137
     /tmp/ccCcDxah.s:1167   .text:0000000000000618 .LVL130
     /tmp/ccCcDxah.s:1187   .text:0000000000000640 .LVL133
     /tmp/ccCcDxah.s:1193   .text:0000000000000644 .LVL134
     /tmp/ccCcDxah.s:75     .text:0000000000000050 .LVL1
     /tmp/ccCcDxah.s:92     .text:0000000000000074 .LVL4
     /tmp/ccCcDxah.s:370    .text:0000000000000258 .LVL38
     /tmp/ccCcDxah.s:85     .text:0000000000000068 .LVL2
     /tmp/ccCcDxah.s:87     .text:000000000000006c .LVL3
     /tmp/ccCcDxah.s:112    .text:00000000000000a8 .LVL9
     /tmp/ccCcDxah.s:156    .text:00000000000000ec .LVL13
     /tmp/ccCcDxah.s:200    .text:0000000000000144 .LVL18
     /tmp/ccCcDxah.s:230    .text:0000000000000178 .LVL22
     /tmp/ccCcDxah.s:315    .text:0000000000000204 .LVL31
     /tmp/ccCcDxah.s:321    .text:0000000000000208 .LVL32
     /tmp/ccCcDxah.s:148    .text:00000000000000e0 .LVL12
     /tmp/ccCcDxah.s:266    .text:00000000000001a0 .LVL25
     /tmp/ccCcDxah.s:285    .text:00000000000001c8 .LVL28
GAS LISTING /tmp/ccCcDxah.s 			page 57


     /tmp/ccCcDxah.s:213    .text:0000000000000158 .LVL19
     /tmp/ccCcDxah.s:125    .text:00000000000000b4 .LVL10
     /tmp/ccCcDxah.s:228    .text:0000000000000174 .LVL21
     /tmp/ccCcDxah.s:329    .text:0000000000000218 .LVL33
     /tmp/ccCcDxah.s:346    .text:0000000000000238 .LVL36
     /tmp/ccCcDxah.s:246    .text:0000000000000184 .LVL23
     /tmp/ccCcDxah.s:344    .text:0000000000000234 .LVL35
     /tmp/ccCcDxah.s:1315   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccCcDxah.s:138    .text:00000000000000cc .LBE74
     /tmp/ccCcDxah.s:207    .text:000000000000014c .LBB86
     /tmp/ccCcDxah.s:235    .text:0000000000000178 .LBE86
     /tmp/ccCcDxah.s:132    .text:00000000000000c0 .LBE76
     /tmp/ccCcDxah.s:214    .text:0000000000000158 .LBB79
     /tmp/ccCcDxah.s:233    .text:0000000000000178 .LBE79
     /tmp/ccCcDxah.s:255    .text:0000000000000190 .LBE87
     /tmp/ccCcDxah.s:323    .text:000000000000020c .LBB99
     /tmp/ccCcDxah.s:351    .text:0000000000000238 .LBE99
     /tmp/ccCcDxah.s:253    .text:0000000000000190 .LBE89
     /tmp/ccCcDxah.s:330    .text:0000000000000218 .LBB92
     /tmp/ccCcDxah.s:349    .text:0000000000000238 .LBE92
     /tmp/ccCcDxah.s:508    .text:00000000000002f4 .LBB166
     /tmp/ccCcDxah.s:696    .text:000000000000036c .LBE166
     /tmp/ccCcDxah.s:716    .text:0000000000000384 .LBB220
     /tmp/ccCcDxah.s:1154   .text:0000000000000610 .LBE220
     /tmp/ccCcDxah.s:772    .text:00000000000003d0 .LBB173
     /tmp/ccCcDxah.s:782    .text:00000000000003e0 .LBE173
     /tmp/ccCcDxah.s:1140   .text:0000000000000600 .LBB193
     /tmp/ccCcDxah.s:1146   .text:0000000000000608 .LBE193
     /tmp/ccCcDxah.s:794    .text:00000000000003e8 .LBB174
     /tmp/ccCcDxah.s:836    .text:000000000000043c .LBE174
     /tmp/ccCcDxah.s:843    .text:0000000000000440 .LBB177
     /tmp/ccCcDxah.s:847    .text:0000000000000444 .LBE177
     /tmp/ccCcDxah.s:866    .text:0000000000000454 .LBB178
     /tmp/ccCcDxah.s:878    .text:0000000000000468 .LBE178
     /tmp/ccCcDxah.s:887    .text:000000000000046c .LBB179
     /tmp/ccCcDxah.s:918    .text:00000000000004c4 .LBE179
     /tmp/ccCcDxah.s:923    .text:00000000000004c8 .LBB180
     /tmp/ccCcDxah.s:929    .text:00000000000004d0 .LBE180

UNDEFINED SYMBOLS
plic_claim
CONSOLE_STATUS
_Z11debug_printPKc
_Z11debug_printm
plic_complete
_Z10sem_signalP10_semaphore
_ZN8_console5size_E
CONSOLE_RX_DATA
_ZN8_console10buffer_in_E
_Z8sem_waitP10_semaphore
_ZN8_console11buffer_out_E
CONSOLE_TX_DATA
_ZN15MemoryAllocator11getInstanceEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
GAS LISTING /tmp/ccCcDxah.s 			page 58


_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB4exitEv
_ZN3TCB7runningE
_Z6assertbPKc
_ZdaPv
_ZdlPv
_ZN3TCB8dispatchEv
_ZN10_semaphore4openEj
_ZN10_semaphore5closeEv
_ZN10_semaphore4waitEv
_ZN10_semaphore6signalEv
_ZN9Scheduler10putToSleepEm
_ZN3TCB16timeSliceCounterE
_ZN9Scheduler16maybeWakeThreadsEv
