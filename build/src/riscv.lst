GAS LISTING /tmp/ccS15VAs.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB43:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/syscall_c.h"
   9:src/riscv.cpp **** #include "../h/mem.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  15              		.loc 1 12 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  23              		.loc 1 13 5
  24              		.loc 1 13 38 is_stmt 0
  25              	 #APP
  26              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 14 5 is_stmt 1
  30              		.loc 1 14 29 is_stmt 0
  31              	# 14 "src/riscv.cpp" 1
  15              	}
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 15 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
  43              	.LFE43:
GAS LISTING /tmp/ccS15VAs.s 			page 2


  45              		.align	2
  46              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  48              	_ZN5Riscv20handleSupervisorTrapEv:
  49              	.LFB44:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  18:src/riscv.cpp **** {
  50              		.loc 1 18 1 is_stmt 1
  51              		.cfi_startproc
  52 0020 130101F9 		addi	sp,sp,-112
  53              		.cfi_def_cfa_offset 112
  54 0024 23341106 		sd	ra,104(sp)
  55 0028 23308106 		sd	s0,96(sp)
  56 002c 233C9104 		sd	s1,88(sp)
  57 0030 23382105 		sd	s2,80(sp)
  58              		.cfi_offset 1, -8
  59              		.cfi_offset 8, -16
  60              		.cfi_offset 9, -24
  61              		.cfi_offset 18, -32
  62 0034 13040107 		addi	s0,sp,112
  63              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp ****     uint64 a0, a1, a2, a3, a4, a5, a6, a7;
  64              		.loc 1 19 5
  20:src/riscv.cpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  65              		.loc 1 20 5
  66              		.loc 1 20 46 is_stmt 0
  67              	 #APP
  68              	# 20 "src/riscv.cpp" 1
  21              	    __asm__ volatile ("mv %0, a1" : "=r"(a1));
  69              		mv a5, a0
  70              	# 0 "" 2
  71              	.LVL0:
  72              		.loc 1 21 5 is_stmt 1
  73              		.loc 1 21 46 is_stmt 0
  74              	# 21 "src/riscv.cpp" 1
  22              	    __asm__ volatile ("mv %0, a2" : "=r"(a2));
  75              		mv s1, a1
  76              	# 0 "" 2
  77              	.LVL1:
  78              		.loc 1 22 5 is_stmt 1
  79              		.loc 1 22 46 is_stmt 0
  80              	# 22 "src/riscv.cpp" 1
  23              	    __asm__ volatile ("mv %0, a3" : "=r"(a3));
  81              		mv a0, a2
  82              	# 0 "" 2
  83              	.LVL2:
  84              		.loc 1 23 5 is_stmt 1
  85              		.loc 1 23 46 is_stmt 0
  86              	# 23 "src/riscv.cpp" 1
  24              	    __asm__ volatile ("mv %0, a4" : "=r"(a4));
  87              		mv a1, a3
  88              	# 0 "" 2
  89              	.LVL3:
  90              		.loc 1 24 5 is_stmt 1
  91              		.loc 1 24 46 is_stmt 0
  92              	# 24 "src/riscv.cpp" 1
  25              	    __asm__ volatile ("mv %0, a5" : "=r"(a5));
GAS LISTING /tmp/ccS15VAs.s 			page 3


  93              		mv a4, a4
  94              	# 0 "" 2
  95              	.LVL4:
  96              		.loc 1 25 5 is_stmt 1
  97              		.loc 1 25 46 is_stmt 0
  98              	# 25 "src/riscv.cpp" 1
  26              	    __asm__ volatile ("mv %0, a6" : "=r"(a6));
  99              		mv a4, a5
 100              	# 0 "" 2
 101              	.LVL5:
 102              		.loc 1 26 5 is_stmt 1
 103              		.loc 1 26 46 is_stmt 0
 104              	# 26 "src/riscv.cpp" 1
  27              	    __asm__ volatile ("mv %0, a7" : "=r"(a7));
 105              		mv a4, a6
 106              	# 0 "" 2
 107              	.LVL6:
 108              		.loc 1 27 5 is_stmt 1
 109              		.loc 1 27 46 is_stmt 0
 110              	# 27 "src/riscv.cpp" 1
  28              	
 111              		mv a4, a7
 112              	# 0 "" 2
 113              	.LVL7:
  29:src/riscv.cpp ****     uint64 scause = r_scause();
 114              		.loc 1 29 5 is_stmt 1
 115              	 #NO_APP
 116              	.LBB42:
 117              	.LBB43:
 118              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** extern const size_t DEFAULT_STACK_SIZE;
  11:src/../h/riscv.hpp **** extern const time_t DEFAULT_TIME_SLICE;
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register scause
  21:src/../h/riscv.hpp ****     static uint64 r_scause();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register scause
  24:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register sepc
  27:src/../h/riscv.hpp ****     static uint64 r_sepc();
GAS LISTING /tmp/ccS15VAs.s 			page 4


  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register sepc
  30:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stvec
  33:src/../h/riscv.hpp ****     static uint64 r_stvec();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stvec
  36:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // read register stval
  39:src/../h/riscv.hpp ****     static uint64 r_stval();
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // write register stval
  42:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     enum BitMaskSip
  45:src/../h/riscv.hpp ****     {
  46:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  47:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  48:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  49:src/../h/riscv.hpp ****     };
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask set register sip
  52:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // mask clear register sip
  55:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // read register sip
  58:src/../h/riscv.hpp ****     static uint64 r_sip();
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // write register sip
  61:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     enum BitMaskSstatus
  64:src/../h/riscv.hpp ****     {
  65:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  66:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  67:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  68:src/../h/riscv.hpp ****     };
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask set register sstatus
  71:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // mask clear register sstatus
  74:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // read register sstatus
  77:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // write register sstatus
  80:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // supervisor trap
  83:src/../h/riscv.hpp ****     static void supervisorTrap();
  84:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccS15VAs.s 			page 5


  85:src/../h/riscv.hpp **** private:
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     // supervisor trap handler
  88:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp **** };
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/riscv.hpp **** {
  94:src/../h/riscv.hpp ****     uint64 volatile scause;
 119              		.loc 2 94 5
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 120              		.loc 2 95 5
 121              		.loc 2 95 72 is_stmt 0
 122              	 #APP
 123              	# 95 "src/../h/riscv.hpp" 1
  96              	    return scause;
 124              		csrr a4, scause
 125              	# 0 "" 2
 126              	 #NO_APP
 127 005c 233CE4FA 		sd	a4,-72(s0)
 128              		.loc 2 96 5 is_stmt 1
 129              		.loc 2 96 12 is_stmt 0
 130 0060 033784FB 		ld	a4,-72(s0)
 131              	.LVL8:
 132              	.LBE43:
 133              	.LBE42:
  30:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 134              		.loc 1 30 5 is_stmt 1
 135              	.LBB44:
 136              		.loc 1 30 40 is_stmt 0
 137 0064 130687FF 		addi	a2,a4,-8
 138              		.loc 1 30 5
 139 0068 93061000 		li	a3,1
 140 006c 63F8C602 		bleu	a2,a3,.L30
 141              	.LBE44:
  31:src/riscv.cpp ****     {
  32:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  33:src/riscv.cpp ****         // Should be triggered on syscall.
  34:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  35:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  36:src/riscv.cpp ****         // debug_print("Supervisor trap handler called\n");
  37:src/riscv.cpp **** 
  38:src/riscv.cpp ****         uint64 res = 0;
  39:src/riscv.cpp ****         switch (a0) {
  40:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
  42:src/riscv.cpp ****                 break;
  43:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
  45:src/riscv.cpp ****                 break;
  46:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
  48:src/riscv.cpp ****                 break;
  49:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
  51:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccS15VAs.s 			page 6


  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
  53:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
  55:src/riscv.cpp ****                 // debug_print("Thread created with handle: ");
  56:src/riscv.cpp ****                 // debug_print((uint64)*handle);
  57:src/riscv.cpp ****                 // debug_print("\n");
  58:src/riscv.cpp ****                 // debug_print("Thread body: ");
  59:src/riscv.cpp ****                 // debug_print((uint64)a2);
  60:src/riscv.cpp ****                 // debug_print("\n");
  61:src/riscv.cpp ****                 // debug_print("Thread arg: ");
  62:src/riscv.cpp ****                 // debug_print((uint64)a3);
  63:src/riscv.cpp ****                 // debug_print("\n");
  64:src/riscv.cpp ****                 if (!(*handle))
  65:src/riscv.cpp ****                     res = -1;
  66:src/riscv.cpp ****                 }
  67:src/riscv.cpp ****                 break;
  68:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
  69:src/riscv.cpp ****                 TCB::exit();
  70:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
  71:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
  72:src/riscv.cpp ****                 delete *handle;
  73:src/riscv.cpp ****                 }
  74:src/riscv.cpp ****                 break;
  75:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
  76:src/riscv.cpp ****                 TCB::dispatch();
  77:src/riscv.cpp ****                 break;
  78:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
  79:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
  80:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
  81:src/riscv.cpp ****                 if (!(*handle))
  82:src/riscv.cpp ****                     res = -1;
  83:src/riscv.cpp ****                 debug_print("Semaphore open: Handle: ");
  84:src/riscv.cpp ****                 debug_print((uint64)*handle);
  85:src/riscv.cpp ****                 debug_print("\n");
  86:src/riscv.cpp ****                 debug_print("On handle addr: ");
  87:src/riscv.cpp ****                 debug_print((uint64)handle);
  88:src/riscv.cpp ****                 debug_print("\n");
  89:src/riscv.cpp ****                 }
  90:src/riscv.cpp ****                 break;
  91:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
  92:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
  93:src/riscv.cpp ****                 handle->close();
  94:src/riscv.cpp ****                 delete handle;
  95:src/riscv.cpp ****                 }
  96:src/riscv.cpp ****                 break;
  97:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
  98:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
  99:src/riscv.cpp ****                 res = handle->wait();
 100:src/riscv.cpp ****             }
 101:src/riscv.cpp ****                 break;
 102:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 103:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 104:src/riscv.cpp ****                 handle->signal();
 105:src/riscv.cpp ****             }
 106:src/riscv.cpp ****                 break;
 107:src/riscv.cpp ****             case SyscallCode::TIME_SLEEP: {
 108:src/riscv.cpp ****                 time_t time = (time_t)a1;
GAS LISTING /tmp/ccS15VAs.s 			page 7


 109:src/riscv.cpp ****                 // TODO: Enchance rounding.
 110:src/riscv.cpp ****                 uint64 time_slices_left = time / TCB::TIME_SLICE;
 111:src/riscv.cpp ****                 Scheduler::putToSleep(time_slices_left);
 112:src/riscv.cpp ****             }
 113:src/riscv.cpp ****                 break;
 114:src/riscv.cpp ****             case SyscallCode::GETC:
 115:src/riscv.cpp ****                 res = __getc();
 116:src/riscv.cpp ****                 break;
 117:src/riscv.cpp ****             case SyscallCode::PUTC:
 118:src/riscv.cpp ****                 __putc((char)a1);
 119:src/riscv.cpp ****                 break;
 120:src/riscv.cpp ****         }
 121:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 122:src/riscv.cpp **** 
 123:src/riscv.cpp ****         // Overwrite a0 with the result from the syscall.
 124:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 125:src/riscv.cpp **** 
 126:src/riscv.cpp ****         w_sstatus(sstatus);
 127:src/riscv.cpp ****         w_sepc(sepc);
 128:src/riscv.cpp ****     }
 129:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 142              		.loc 1 129 10 is_stmt 1
 143              	.LBB111:
 144              	.LBB45:
 145 0070 9307F0FF 		li	a5,-1
 146              	.LVL9:
 147 0074 9397F703 		slli	a5,a5,63
 148 0078 93871700 		addi	a5,a5,1
 149 007c 630AF728 		beq	a4,a5,.L31
 130:src/riscv.cpp ****     {
 131:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 132:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 133:src/riscv.cpp ****         TCB::timeSliceCounter++;
 134:src/riscv.cpp ****         Scheduler::maybeWakeThreads();
 135:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 136:src/riscv.cpp ****         {
 137:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 138:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 139:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 140:src/riscv.cpp ****             TCB::dispatch();
 141:src/riscv.cpp ****             w_sstatus(sstatus);
 142:src/riscv.cpp ****             w_sepc(sepc);
 143:src/riscv.cpp ****         }
 144:src/riscv.cpp ****     }
 145:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 150              		.loc 1 145 10
 151 0080 9307F0FF 		li	a5,-1
 152 0084 9397F703 		slli	a5,a5,63
 153 0088 93879700 		addi	a5,a5,9
 154 008c 6314F708 		bne	a4,a5,.L3
 146:src/riscv.cpp ****     {
 147:src/riscv.cpp ****         // debug_print("Console handler called\n");
 148:src/riscv.cpp ****         console_handler();
 155              		.loc 1 148 9
 156              		.loc 1 148 24 is_stmt 0
 157 0090 97000000 		call	console_handler
 157      E7800000 
GAS LISTING /tmp/ccS15VAs.s 			page 8


 158              	.LVL10:
 159              	.LBE45:
 160              	.LBE111:
 149:src/riscv.cpp ****     }
 150:src/riscv.cpp ****     else
 151:src/riscv.cpp ****     {
 152:src/riscv.cpp ****         // unexpected trap cause
 153:src/riscv.cpp ****     }
 154:src/riscv.cpp **** }...
 161              		.loc 1 154 1
 162 0098 6F00C007 		j	.L3
 163              	.LVL11:
 164              	.L30:
 165              	.LBB112:
 166              	.LBB61:
  34:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 167              		.loc 1 34 9 is_stmt 1
 168              	.LBB62:
 169              	.LBB63:
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile sepc;
 170              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 171              		.loc 2 107 5
 172              		.loc 2 107 64 is_stmt 0
 173              	 #APP
 174              	# 107 "src/../h/riscv.hpp" 1
 108              	    return sepc;
 175              		csrr a4, sepc
 176              	# 0 "" 2
 177              	.LVL12:
 178              	 #NO_APP
 179 00a0 2334E4FC 		sd	a4,-56(s0)
 180              		.loc 2 108 5 is_stmt 1
 181              		.loc 2 108 12 is_stmt 0
 182 00a4 033784FC 		ld	a4,-56(s0)
 183              	.LBE63:
 184              	.LBE62:
  34:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 185              		.loc 1 34 41
 186 00a8 13074700 		addi	a4,a4,4
  34:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 187              		.loc 1 34 43
 188 00ac 233CE4F8 		sd	a4,-104(s0)
  35:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 189              		.loc 1 35 9 is_stmt 1
 190              	.LBB64:
 191              	.LBB65:
 109:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccS15VAs.s 			page 9


 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/riscv.hpp ****     return stvec;
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stval;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/riscv.hpp ****     return stval;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/riscv.hpp **** }
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     uint64 volatile sip;
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/riscv.hpp ****     return sip;
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccS15VAs.s 			page 10


 167:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 192              		.loc 2 174 5
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 193              		.loc 2 175 5
 194              		.loc 2 175 76 is_stmt 0
 195              	 #APP
 196              	# 175 "src/../h/riscv.hpp" 1
 176              	    return sstatus;
 197              		csrr a4, sstatus
 198              	# 0 "" 2
 199              	 #NO_APP
 200 00b4 2330E4FC 		sd	a4,-64(s0)
 201              		.loc 2 176 5 is_stmt 1
 202              		.loc 2 176 12 is_stmt 0
 203 00b8 033704FC 		ld	a4,-64(s0)
 204              	.LBE65:
 205              	.LBE64:
  35:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 206              		.loc 1 35 45
 207 00bc 2330E4FA 		sd	a4,-96(s0)
  38:src/riscv.cpp ****         uint64 res = 0;
 208              		.loc 1 38 9 is_stmt 1
 209              	.LVL13:
  39:src/riscv.cpp ****         switch (a0) {
 210              		.loc 1 39 9
 211              	.LBB66:
 212 00c0 13072004 		li	a4,66
 213 00c4 636AF722 		bgtu	a5,a4,.L25
 214 00c8 93972700 		slli	a5,a5,2
 215              	.LVL14:
 216 00cc 17070000 		lla	a4,.L7
 216      13070700 
 217 00d4 B387E700 		add	a5,a5,a4
 218 00d8 83A70700 		lw	a5,0(a5)
 219 00dc B387E700 		add	a5,a5,a4
 220 00e0 67800700 		jr	a5
 221              		.section	.rodata
 222              		.align	2
 223              		.align	2
 224              	.L7:
 225 0000 00000000 		.word	.L25-.L7
 226 0004 00000000 		.word	.L20-.L7
 227 0008 00000000 		.word	.L19-.L7
 228 000c 00000000 		.word	.L18-.L7
 229 0010 00000000 		.word	.L17-.L7
 230 0014 00000000 		.word	.L25-.L7
 231 0018 00000000 		.word	.L25-.L7
 232 001c 00000000 		.word	.L25-.L7
 233 0020 00000000 		.word	.L25-.L7
 234 0024 00000000 		.word	.L25-.L7
GAS LISTING /tmp/ccS15VAs.s 			page 11


 235 0028 00000000 		.word	.L25-.L7
 236 002c 00000000 		.word	.L25-.L7
 237 0030 00000000 		.word	.L25-.L7
 238 0034 00000000 		.word	.L25-.L7
 239 0038 00000000 		.word	.L25-.L7
 240 003c 00000000 		.word	.L25-.L7
 241 0040 00000000 		.word	.L25-.L7
 242 0044 00000000 		.word	.L16-.L7
 243 0048 00000000 		.word	.L15-.L7
 244 004c 00000000 		.word	.L14-.L7
 245 0050 00000000 		.word	.L25-.L7
 246 0054 00000000 		.word	.L25-.L7
 247 0058 00000000 		.word	.L25-.L7
 248 005c 00000000 		.word	.L25-.L7
 249 0060 00000000 		.word	.L25-.L7
 250 0064 00000000 		.word	.L25-.L7
 251 0068 00000000 		.word	.L25-.L7
 252 006c 00000000 		.word	.L25-.L7
 253 0070 00000000 		.word	.L25-.L7
 254 0074 00000000 		.word	.L25-.L7
 255 0078 00000000 		.word	.L25-.L7
 256 007c 00000000 		.word	.L25-.L7
 257 0080 00000000 		.word	.L25-.L7
 258 0084 00000000 		.word	.L13-.L7
 259 0088 00000000 		.word	.L12-.L7
 260 008c 00000000 		.word	.L11-.L7
 261 0090 00000000 		.word	.L10-.L7
 262 0094 00000000 		.word	.L25-.L7
 263 0098 00000000 		.word	.L25-.L7
 264 009c 00000000 		.word	.L25-.L7
 265 00a0 00000000 		.word	.L25-.L7
 266 00a4 00000000 		.word	.L25-.L7
 267 00a8 00000000 		.word	.L25-.L7
 268 00ac 00000000 		.word	.L25-.L7
 269 00b0 00000000 		.word	.L25-.L7
 270 00b4 00000000 		.word	.L25-.L7
 271 00b8 00000000 		.word	.L25-.L7
 272 00bc 00000000 		.word	.L25-.L7
 273 00c0 00000000 		.word	.L25-.L7
 274 00c4 00000000 		.word	.L9-.L7
 275 00c8 00000000 		.word	.L25-.L7
 276 00cc 00000000 		.word	.L25-.L7
 277 00d0 00000000 		.word	.L25-.L7
 278 00d4 00000000 		.word	.L25-.L7
 279 00d8 00000000 		.word	.L25-.L7
 280 00dc 00000000 		.word	.L25-.L7
 281 00e0 00000000 		.word	.L25-.L7
 282 00e4 00000000 		.word	.L25-.L7
 283 00e8 00000000 		.word	.L25-.L7
 284 00ec 00000000 		.word	.L25-.L7
 285 00f0 00000000 		.word	.L25-.L7
 286 00f4 00000000 		.word	.L25-.L7
 287 00f8 00000000 		.word	.L25-.L7
 288 00fc 00000000 		.word	.L25-.L7
 289 0100 00000000 		.word	.L25-.L7
 290 0104 00000000 		.word	.L8-.L7
 291 0108 00000000 		.word	.L6-.L7
GAS LISTING /tmp/ccS15VAs.s 			page 12


 292              		.text
 293              	.L20:
 294              	.LBB67:
  40:src/riscv.cpp ****             case SyscallCode::MEM_ALLOC:
 295              		.loc 1 40 13
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 296              		.loc 1 41 17
  41:src/riscv.cpp ****                 res = (uint64)MemoryAllocator::getInstance()->mem_alloc(a1);
 297              		.loc 1 41 72 is_stmt 0
 298 00e4 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 298      E7800000 
 299              	.LVL15:
 300 00ec 93850400 		mv	a1,s1
 301 00f0 97000000 		call	_ZN15MemoryAllocator9mem_allocEm
 301      E7800000 
 302              	.LVL16:
 303 00f8 13090500 		mv	s2,a0
 304              	.LVL17:
  42:src/riscv.cpp ****                 break;
 305              		.loc 1 42 17 is_stmt 1
 306              	.L5:
 307              	.LBE67:
 308              	.LBE66:
 121:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 309              		.loc 1 121 9
 121:src/riscv.cpp ****         __asm__ volatile ("mv a0, %0" : : "r"(res));
 310              		.loc 1 121 52 is_stmt 0
 311              	 #APP
 312              	# 121 "src/riscv.cpp" 1
 124:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 313              		mv a0, s2
 314              	# 0 "" 2
 315              		.loc 1 124 9 is_stmt 1
 124:src/riscv.cpp ****         __asm__ volatile ("sd %0, 10*8(x8)" : : "r"(res));
 316              		.loc 1 124 58 is_stmt 0
 317              	# 124 "src/riscv.cpp" 1
 126:src/riscv.cpp ****         w_sstatus(sstatus);
 318              		sd s2, 10*8(x8)
 319              	# 0 "" 2
 320              		.loc 1 126 9 is_stmt 1
 126:src/riscv.cpp ****         w_sstatus(sstatus);
 321              		.loc 1 126 18 is_stmt 0
 322              	 #NO_APP
 323 0104 833704FA 		ld	a5,-96(s0)
 324              	.LVL18:
 325              	.LBB93:
 326              	.LBB94:
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 327              		.loc 2 181 5 is_stmt 1
 328              		.loc 2 181 77 is_stmt 0
 329              	 #APP
 330              	# 181 "src/../h/riscv.hpp" 1
 182              	}
GAS LISTING /tmp/ccS15VAs.s 			page 13


 331              		csrw sstatus, a5
 332              	# 0 "" 2
 333              	.LVL19:
 334              	 #NO_APP
 335              	.LBE94:
 336              	.LBE93:
 127:src/riscv.cpp ****         w_sepc(sepc);
 337              		.loc 1 127 9 is_stmt 1
 127:src/riscv.cpp ****         w_sepc(sepc);
 338              		.loc 1 127 15 is_stmt 0
 339 010c 833784F9 		ld	a5,-104(s0)
 340              	.LVL20:
 341              	.LBB95:
 342              	.LBB96:
 113:src/../h/riscv.hpp **** }
 343              		.loc 2 113 5 is_stmt 1
 113:src/../h/riscv.hpp **** }
 344              		.loc 2 113 65 is_stmt 0
 345              	 #APP
 346              	# 113 "src/../h/riscv.hpp" 1
 347              		csrw sepc, a5
 348              	# 0 "" 2
 349              	.LVL21:
 350              	 #NO_APP
 351              	.L3:
 352              	.LBE96:
 353              	.LBE95:
 354              	.LBE61:
 355              	.LBE112:
 356              		.loc 1 154 1
 357 0114 83308106 		ld	ra,104(sp)
 358              		.cfi_remember_state
 359              		.cfi_restore 1
 360 0118 03340106 		ld	s0,96(sp)
 361              		.cfi_restore 8
 362              		.cfi_def_cfa 2, 112
 363 011c 83348105 		ld	s1,88(sp)
 364              		.cfi_restore 9
 365 0120 03390105 		ld	s2,80(sp)
 366              		.cfi_restore 18
 367 0124 13010107 		addi	sp,sp,112
 368              		.cfi_def_cfa_offset 0
 369 0128 67800000 		jr	ra
 370              	.LVL22:
 371              	.L19:
 372              		.cfi_restore_state
 373              	.LBB113:
 374              	.LBB109:
 375              	.LBB97:
 376              	.LBB81:
  43:src/riscv.cpp ****             case SyscallCode::MEM_FREE:
 377              		.loc 1 43 13 is_stmt 1
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 378              		.loc 1 44 17
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 379              		.loc 1 44 63 is_stmt 0
 380 012c 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
GAS LISTING /tmp/ccS15VAs.s 			page 14


 380      E7800000 
 381              	.LVL23:
 382 0134 93850400 		mv	a1,s1
 383 0138 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv
 383      E7800000 
 384              	.LVL24:
  44:src/riscv.cpp ****                 res = MemoryAllocator::getInstance()->mem_free((void*)a1);
 385              		.loc 1 44 21
 386 0140 13090500 		mv	s2,a0
 387              	.LVL25:
  45:src/riscv.cpp ****                 break;
 388              		.loc 1 45 17 is_stmt 1
 389 0144 6FF09FFB 		j	.L5
 390              	.LVL26:
 391              	.L18:
  46:src/riscv.cpp ****             case SyscallCode::MEM_GET_FREE_SPACE:
 392              		.loc 1 46 13
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 393              		.loc 1 47 17
  47:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_free_space();
 394              		.loc 1 47 67 is_stmt 0
 395 0148 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 395      E7800000 
 396              	.LVL27:
 397 0150 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv
 397      E7800000 
 398              	.LVL28:
  48:src/riscv.cpp ****                 break;
 399              		.loc 1 48 17 is_stmt 1
 400              	.LBE81:
 401              	.LBE97:
  38:src/riscv.cpp ****         uint64 res = 0;
 402              		.loc 1 38 16 is_stmt 0
 403 0158 13090000 		li	s2,0
 404              	.LBB98:
 405              	.LBB82:
  48:src/riscv.cpp ****                 break;
 406              		.loc 1 48 17
 407 015c 6FF01FFA 		j	.L5
 408              	.LVL29:
 409              	.L17:
  49:src/riscv.cpp ****             case SyscallCode::MEM_GET_LARGEST_FREE_BLOCK:
 410              		.loc 1 49 13 is_stmt 1
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 411              		.loc 1 50 17
  50:src/riscv.cpp ****                 MemoryAllocator::getInstance()->mem_get_largest_free_block();
 412              		.loc 1 50 75 is_stmt 0
 413 0160 97000000 		call	_ZN15MemoryAllocator11getInstanceEv
 413      E7800000 
 414              	.LVL30:
 415 0168 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv
 415      E7800000 
 416              	.LVL31:
  51:src/riscv.cpp ****                 break;
 417              		.loc 1 51 17 is_stmt 1
 418              	.LBE82:
 419              	.LBE98:
GAS LISTING /tmp/ccS15VAs.s 			page 15


  38:src/riscv.cpp ****         uint64 res = 0;
 420              		.loc 1 38 16 is_stmt 0
 421 0170 13090000 		li	s2,0
 422              	.LBB99:
 423              	.LBB83:
  51:src/riscv.cpp ****                 break;
 424              		.loc 1 51 17
 425 0174 6FF09FF8 		j	.L5
 426              	.LVL32:
 427              	.L16:
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 428              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp ****             case SyscallCode::THREAD_CREATE: {
 429              		.loc 1 52 46
 430              	.LBB68:
  53:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 431              		.loc 1 53 17
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
 432              		.loc 1 54 17
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
 433              		.loc 1 54 54 is_stmt 0
 434 0178 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_
 434      E7800000 
 435              	.LVL33:
  54:src/riscv.cpp ****                 *handle = (thread_t)TCB::createThread((void(*)(void*))a2, (void*)a3);
 436              		.loc 1 54 25
 437 0180 23B0A400 		sd	a0,0(s1)
  64:src/riscv.cpp ****                 if (!(*handle))
 438              		.loc 1 64 17 is_stmt 1
 439 0184 630E0516 		beq	a0,zero,.L26
 440              	.LBE68:
 441              	.LBE83:
 442              	.LBE99:
  38:src/riscv.cpp ****         uint64 res = 0;
 443              		.loc 1 38 16 is_stmt 0
 444 0188 13090000 		li	s2,0
 445 018c 6FF01FF7 		j	.L5
 446              	.LVL34:
 447              	.L15:
 448              	.LBB100:
 449              	.LBB84:
  68:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
 450              		.loc 1 68 13 is_stmt 1
  68:src/riscv.cpp ****             case SyscallCode::THREAD_EXIT: {
 451              		.loc 1 68 44
 452              	.LBB69:
  69:src/riscv.cpp ****                 TCB::exit();
 453              		.loc 1 69 17
  69:src/riscv.cpp ****                 TCB::exit();
 454              		.loc 1 69 26 is_stmt 0
 455 0190 97000000 		call	_ZN3TCB4exitEv
 455      E7800000 
 456              	.LVL35:
  70:src/riscv.cpp ****                 thread_t* handle = (thread_t*)a1;
 457              		.loc 1 70 17 is_stmt 1
  71:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 458              		.loc 1 71 17
GAS LISTING /tmp/ccS15VAs.s 			page 16


  71:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 459              		.loc 1 71 24 is_stmt 0
 460 0198 83B70400 		ld	a5,0(s1)
  71:src/riscv.cpp ****                 assert(*handle == TCB::running, "Thread exit should be called by the running thread
 461              		.loc 1 71 23
 462 019c 17070000 		lla	a4,_ZN3TCB7runningE
 462      13070700 
 463 01a4 03350700 		ld	a0,0(a4)
 464 01a8 3305F540 		sub	a0,a0,a5
 465 01ac 97050000 		lla	a1,.LC0
 465      93850500 
 466 01b4 13351500 		seqz	a0,a0
 467 01b8 97000000 		call	_Z6assertbPKc
 467      E7800000 
 468              	.LVL36:
  72:src/riscv.cpp ****                 delete *handle;
 469              		.loc 1 72 17 is_stmt 1
  72:src/riscv.cpp ****                 delete *handle;
 470              		.loc 1 72 24 is_stmt 0
 471 01c0 83B40400 		ld	s1,0(s1)
 472              	.LVL37:
  72:src/riscv.cpp ****                 delete *handle;
 473              		.loc 1 72 31
 474 01c4 63820414 		beq	s1,zero,.L27
 475              	.LVL38:
 476              	.LBB70:
 477              	.LBB71:
 478              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
 479              		.loc 3 15 14 is_stmt 1
 480              		.loc 3 15 23 is_stmt 0
 481 01c8 03B50401 		ld	a0,16(s1)
 482              		.loc 3 15 28
 483 01cc 63060500 		beq	a0,zero,.L21
 484              		.loc 3 15 23
 485 01d0 97000000 		call	_ZdaPv
 485      E7800000 
 486              	.LVL39:
 487              	.L21:
 488              	.LBE71:
 489              	.LBE70:
  72:src/riscv.cpp ****                 delete *handle;
 490              		.loc 1 72 25
GAS LISTING /tmp/ccS15VAs.s 			page 17


 491 01d8 13850400 		mv	a0,s1
 492 01dc 97000000 		call	_ZdlPv
 492      E7800000 
 493              	.LVL40:
 494              	.LBE69:
 495              	.LBE84:
 496              	.LBE100:
  38:src/riscv.cpp ****         uint64 res = 0;
 497              		.loc 1 38 16
 498 01e4 13090000 		li	s2,0
 499              	.LBB101:
 500              	.LBB85:
 501              	.LBB72:
 502 01e8 6FF05FF1 		j	.L5
 503              	.LVL41:
 504              	.L14:
 505              	.LBE72:
  75:src/riscv.cpp ****             case SyscallCode::THREAD_DISPATCH:
 506              		.loc 1 75 13 is_stmt 1
  76:src/riscv.cpp ****                 TCB::dispatch();
 507              		.loc 1 76 17
  76:src/riscv.cpp ****                 TCB::dispatch();
 508              		.loc 1 76 30 is_stmt 0
 509 01ec 97000000 		call	_ZN3TCB8dispatchEv
 509      E7800000 
 510              	.LVL42:
  77:src/riscv.cpp ****                 break;
 511              		.loc 1 77 17 is_stmt 1
 512              	.LBE85:
 513              	.LBE101:
  38:src/riscv.cpp ****         uint64 res = 0;
 514              		.loc 1 38 16 is_stmt 0
 515 01f4 13090000 		li	s2,0
 516              	.LBB102:
 517              	.LBB86:
  77:src/riscv.cpp ****                 break;
 518              		.loc 1 77 17
 519 01f8 6FF05FF0 		j	.L5
 520              	.LVL43:
 521              	.L13:
  78:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
 522              		.loc 1 78 13 is_stmt 1
  78:src/riscv.cpp ****             case SyscallCode::SEM_OPEN: {
 523              		.loc 1 78 41
 524              	.LBB73:
  79:src/riscv.cpp ****                 sem_t* handle = (sem_t*)a1;
 525              		.loc 1 79 17
  80:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
 526              		.loc 1 80 17
  80:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
 527              		.loc 1 80 50 is_stmt 0
 528 01fc 1B050500 		sext.w	a0,a0
 529              	.LVL44:
 530 0200 97000000 		call	_ZN10_semaphore4openEj
 530      E7800000 
 531              	.LVL45:
  80:src/riscv.cpp ****                 *handle = (sem_t)_semaphore::open(a2);
GAS LISTING /tmp/ccS15VAs.s 			page 18


 532              		.loc 1 80 25
 533 0208 23B0A400 		sd	a0,0(s1)
  81:src/riscv.cpp ****                 if (!(*handle))
 534              		.loc 1 81 17 is_stmt 1
 535 020c 63020506 		beq	a0,zero,.L28
 536              	.LBE73:
 537              	.LBE86:
 538              	.LBE102:
  38:src/riscv.cpp ****         uint64 res = 0;
 539              		.loc 1 38 16 is_stmt 0
 540 0210 13090000 		li	s2,0
 541              	.L22:
 542              	.LVL46:
 543              	.LBB103:
 544              	.LBB87:
 545              	.LBB74:
  83:src/riscv.cpp ****                 debug_print("Semaphore open: Handle: ");
 546              		.loc 1 83 17 is_stmt 1
  83:src/riscv.cpp ****                 debug_print("Semaphore open: Handle: ");
 547              		.loc 1 83 28 is_stmt 0
 548 0214 17050000 		lla	a0,.LC1
 548      13050500 
 549 021c 97000000 		call	_Z11debug_printPKc
 549      E7800000 
 550              	.LVL47:
  84:src/riscv.cpp ****                 debug_print((uint64)*handle);
 551              		.loc 1 84 17 is_stmt 1
  84:src/riscv.cpp ****                 debug_print((uint64)*handle);
 552              		.loc 1 84 28 is_stmt 0
 553 0224 03B50400 		ld	a0,0(s1)
 554 0228 97000000 		call	_Z11debug_printm
 554      E7800000 
 555              	.LVL48:
  85:src/riscv.cpp ****                 debug_print("\n");
 556              		.loc 1 85 17 is_stmt 1
  85:src/riscv.cpp ****                 debug_print("\n");
 557              		.loc 1 85 28 is_stmt 0
 558 0230 17050000 		lla	a0,.LC2
 558      13050500 
 559 0238 97000000 		call	_Z11debug_printPKc
 559      E7800000 
 560              	.LVL49:
  86:src/riscv.cpp ****                 debug_print("On handle addr: ");
 561              		.loc 1 86 17 is_stmt 1
  86:src/riscv.cpp ****                 debug_print("On handle addr: ");
 562              		.loc 1 86 28 is_stmt 0
 563 0240 17050000 		lla	a0,.LC3
 563      13050500 
 564 0248 97000000 		call	_Z11debug_printPKc
 564      E7800000 
 565              	.LVL50:
  87:src/riscv.cpp ****                 debug_print((uint64)handle);
 566              		.loc 1 87 17 is_stmt 1
  87:src/riscv.cpp ****                 debug_print((uint64)handle);
 567              		.loc 1 87 28 is_stmt 0
 568 0250 13850400 		mv	a0,s1
 569 0254 97000000 		call	_Z11debug_printm
GAS LISTING /tmp/ccS15VAs.s 			page 19


 569      E7800000 
 570              	.LVL51:
  88:src/riscv.cpp ****                 debug_print("\n");
 571              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 debug_print("\n");
 572              		.loc 1 88 28 is_stmt 0
 573 025c 17050000 		lla	a0,.LC2
 573      13050500 
 574 0264 97000000 		call	_Z11debug_printPKc
 574      E7800000 
 575              	.LVL52:
 576              	.LBE74:
  90:src/riscv.cpp ****                 break;
 577              		.loc 1 90 17 is_stmt 1
 578 026c 6FF01FE9 		j	.L5
 579              	.LVL53:
 580              	.L28:
 581              	.LBB75:
  82:src/riscv.cpp ****                     res = -1;
 582              		.loc 1 82 25 is_stmt 0
 583 0270 1309F0FF 		li	s2,-1
 584 0274 6FF01FFA 		j	.L22
 585              	.LVL54:
 586              	.L12:
 587              	.LBE75:
  91:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
 588              		.loc 1 91 13 is_stmt 1
  91:src/riscv.cpp ****             case SyscallCode::SEM_CLOSE: {
 589              		.loc 1 91 42
 590              	.LBB76:
  92:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 591              		.loc 1 92 17
  93:src/riscv.cpp ****                 handle->close();
 592              		.loc 1 93 17
  93:src/riscv.cpp ****                 handle->close();
 593              		.loc 1 93 30 is_stmt 0
 594 0278 13850400 		mv	a0,s1
 595              	.LVL55:
 596 027c 97000000 		call	_ZN10_semaphore5closeEv
 596      E7800000 
 597              	.LVL56:
  94:src/riscv.cpp ****                 delete handle;
 598              		.loc 1 94 17 is_stmt 1
  94:src/riscv.cpp ****                 delete handle;
 599              		.loc 1 94 24 is_stmt 0
 600 0284 13850400 		mv	a0,s1
 601 0288 97000000 		call	_ZdlPv
 601      E7800000 
 602              	.LVL57:
 603              	.LBE76:
  96:src/riscv.cpp ****                 break;
 604              		.loc 1 96 17 is_stmt 1
 605              	.LBE87:
 606              	.LBE103:
  38:src/riscv.cpp ****         uint64 res = 0;
 607              		.loc 1 38 16 is_stmt 0
 608 0290 13090000 		li	s2,0
GAS LISTING /tmp/ccS15VAs.s 			page 20


 609              	.LBB104:
 610              	.LBB88:
  96:src/riscv.cpp ****                 break;
 611              		.loc 1 96 17
 612 0294 6FF09FE6 		j	.L5
 613              	.LVL58:
 614              	.L11:
  97:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
 615              		.loc 1 97 13 is_stmt 1
  97:src/riscv.cpp ****             case SyscallCode::SEM_WAIT: {
 616              		.loc 1 97 41
 617              	.LBB77:
  98:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 618              		.loc 1 98 17
  99:src/riscv.cpp ****                 res = handle->wait();
 619              		.loc 1 99 17
  99:src/riscv.cpp ****                 res = handle->wait();
 620              		.loc 1 99 35 is_stmt 0
 621 0298 13850400 		mv	a0,s1
 622              	.LVL59:
 623 029c 97000000 		call	_ZN10_semaphore4waitEv
 623      E7800000 
 624              	.LVL60:
  99:src/riscv.cpp ****                 res = handle->wait();
 625              		.loc 1 99 21
 626 02a4 13090500 		mv	s2,a0
 627              	.LVL61:
 628              	.LBE77:
 101:src/riscv.cpp ****                 break;
 629              		.loc 1 101 17 is_stmt 1
 630 02a8 6FF05FE5 		j	.L5
 631              	.LVL62:
 632              	.L10:
 102:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 633              		.loc 1 102 13
 102:src/riscv.cpp ****             case SyscallCode::SEM_SIGNAL: {
 634              		.loc 1 102 43
 635              	.LBB78:
 103:src/riscv.cpp ****                 sem_t handle = (sem_t)a1;
 636              		.loc 1 103 17
 104:src/riscv.cpp ****                 handle->signal();
 637              		.loc 1 104 17
 104:src/riscv.cpp ****                 handle->signal();
 638              		.loc 1 104 31 is_stmt 0
 639 02ac 13850400 		mv	a0,s1
 640              	.LVL63:
 641 02b0 97000000 		call	_ZN10_semaphore6signalEv
 641      E7800000 
 642              	.LVL64:
 643              	.LBE78:
 106:src/riscv.cpp ****                 break;
 644              		.loc 1 106 17 is_stmt 1
 645              	.LBE88:
 646              	.LBE104:
  38:src/riscv.cpp ****         uint64 res = 0;
 647              		.loc 1 38 16 is_stmt 0
 648 02b8 13090000 		li	s2,0
GAS LISTING /tmp/ccS15VAs.s 			page 21


 649              	.LBB105:
 650              	.LBB89:
 106:src/riscv.cpp ****                 break;
 651              		.loc 1 106 17
 652 02bc 6FF01FE4 		j	.L5
 653              	.LVL65:
 654              	.L9:
 107:src/riscv.cpp ****             case SyscallCode::TIME_SLEEP: {
 655              		.loc 1 107 13 is_stmt 1
 107:src/riscv.cpp ****             case SyscallCode::TIME_SLEEP: {
 656              		.loc 1 107 43
 657              	.LBB79:
 108:src/riscv.cpp ****                 time_t time = (time_t)a1;
 658              		.loc 1 108 17
 110:src/riscv.cpp ****                 uint64 time_slices_left = time / TCB::TIME_SLICE;
 659              		.loc 1 110 17
 111:src/riscv.cpp ****                 Scheduler::putToSleep(time_slices_left);
 660              		.loc 1 111 17
 111:src/riscv.cpp ****                 Scheduler::putToSleep(time_slices_left);
 661              		.loc 1 111 38 is_stmt 0
 662 02c0 13D51400 		srli	a0,s1,1
 663              	.LVL66:
 664 02c4 97000000 		call	_ZN9Scheduler10putToSleepEm
 664      E7800000 
 665              	.LVL67:
 666              	.LBE79:
 113:src/riscv.cpp ****                 break;
 667              		.loc 1 113 17 is_stmt 1
 668              	.LBE89:
 669              	.LBE105:
  38:src/riscv.cpp ****         uint64 res = 0;
 670              		.loc 1 38 16 is_stmt 0
 671 02cc 13090000 		li	s2,0
 672              	.LBB106:
 673              	.LBB90:
 113:src/riscv.cpp ****                 break;
 674              		.loc 1 113 17
 675 02d0 6FF0DFE2 		j	.L5
 676              	.LVL68:
 677              	.L8:
 114:src/riscv.cpp ****             case SyscallCode::GETC:
 678              		.loc 1 114 13 is_stmt 1
 115:src/riscv.cpp ****                 res = __getc();
 679              		.loc 1 115 17
 115:src/riscv.cpp ****                 res = __getc();
 680              		.loc 1 115 29 is_stmt 0
 681 02d4 97000000 		call	__getc
 681      E7800000 
 682              	.LVL69:
 115:src/riscv.cpp ****                 res = __getc();
 683              		.loc 1 115 21
 684 02dc 13090500 		mv	s2,a0
 685              	.LVL70:
 116:src/riscv.cpp ****                 break;
 686              		.loc 1 116 17 is_stmt 1
 687 02e0 6FF0DFE1 		j	.L5
 688              	.LVL71:
GAS LISTING /tmp/ccS15VAs.s 			page 22


 689              	.L6:
 117:src/riscv.cpp ****             case SyscallCode::PUTC:
 690              		.loc 1 117 13
 118:src/riscv.cpp ****                 __putc((char)a1);
 691              		.loc 1 118 17
 118:src/riscv.cpp ****                 __putc((char)a1);
 692              		.loc 1 118 23 is_stmt 0
 693 02e4 13F5F40F 		andi	a0,s1,0xff
 694              	.LVL72:
 695 02e8 97000000 		call	__putc
 695      E7800000 
 696              	.LVL73:
 119:src/riscv.cpp ****                 break;
 697              		.loc 1 119 17 is_stmt 1
 698              	.LBE90:
 699              	.LBE106:
  38:src/riscv.cpp ****         uint64 res = 0;
 700              		.loc 1 38 16 is_stmt 0
 701 02f0 13090000 		li	s2,0
 702              	.LBB107:
 703              	.LBB91:
 119:src/riscv.cpp ****                 break;
 704              		.loc 1 119 17
 705 02f4 6FF09FE0 		j	.L5
 706              	.LVL74:
 707              	.L25:
 708              	.LBE91:
 709              	.LBE107:
  38:src/riscv.cpp ****         uint64 res = 0;
 710              		.loc 1 38 16
 711 02f8 13090000 		li	s2,0
 712 02fc 6FF01FE0 		j	.L5
 713              	.LVL75:
 714              	.L26:
 715              	.LBB108:
 716              	.LBB92:
 717              	.LBB80:
  65:src/riscv.cpp ****                     res = -1;
 718              		.loc 1 65 25
 719 0300 1309F0FF 		li	s2,-1
 720 0304 6FF09FDF 		j	.L5
 721              	.LVL76:
 722              	.L27:
 723              	.LBE80:
 724              	.LBE92:
 725              	.LBE108:
  38:src/riscv.cpp ****         uint64 res = 0;
 726              		.loc 1 38 16
 727 0308 13090000 		li	s2,0
 728 030c 6FF01FDF 		j	.L5
 729              	.LVL77:
 730              	.L31:
 731              	.LBE109:
 732              	.LBB110:
 733              	.LBB46:
 132:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 734              		.loc 1 132 9 is_stmt 1
GAS LISTING /tmp/ccS15VAs.s 			page 23


 735              	.LBB47:
 736              	.LBB48:
 147:src/../h/riscv.hpp **** }
 737              		.loc 2 147 5
 147:src/../h/riscv.hpp **** }
 738              		.loc 2 147 64 is_stmt 0
 739 0310 93072000 		li	a5,2
 740              	 #APP
 741              	# 147 "src/../h/riscv.hpp" 1
 742              		csrc sip, a5
 743              	# 0 "" 2
 744              	.LVL78:
 745              	 #NO_APP
 746              	.LBE48:
 747              	.LBE47:
 133:src/riscv.cpp ****         TCB::timeSliceCounter++;
 748              		.loc 1 133 9 is_stmt 1
 133:src/riscv.cpp ****         TCB::timeSliceCounter++;
 749              		.loc 1 133 30 is_stmt 0
 750 0318 97040000 		lla	s1,_ZN3TCB16timeSliceCounterE
 750      93840400 
 751              	.LVL79:
 752 0320 83B70400 		ld	a5,0(s1)
 753 0324 93871700 		addi	a5,a5,1
 754 0328 23B0F400 		sd	a5,0(s1)
 134:src/riscv.cpp ****         Scheduler::maybeWakeThreads();
 755              		.loc 1 134 9 is_stmt 1
 134:src/riscv.cpp ****         Scheduler::maybeWakeThreads();
 756              		.loc 1 134 36 is_stmt 0
 757 032c 97000000 		call	_ZN9Scheduler16maybeWakeThreadsEv
 757      E7800000 
 758              	.LVL80:
 135:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 759              		.loc 1 135 9 is_stmt 1
 760              	.LBB49:
 135:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 761              		.loc 1 135 64 is_stmt 0
 762 0334 97070000 		lla	a5,_ZN3TCB7runningE
 762      93870700 
 763 033c 83B70700 		ld	a5,0(a5)
 764              	.LVL81:
 765              	.LBB50:
 766              	.LBB51:
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished_; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished_ = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void block() { blocked_ = true; }
  22:src/../h/tcb.hpp **** 
  23:src/../h/tcb.hpp ****     void unblock() { blocked_ = false; }
  24:src/../h/tcb.hpp **** 
  25:src/../h/tcb.hpp ****     bool isBlocked() { return blocked_; }
  26:src/../h/tcb.hpp **** 
  27:src/../h/tcb.hpp ****     void setSleeping(bool value) { sleeping_ = value; }
  28:src/../h/tcb.hpp **** 
  29:src/../h/tcb.hpp ****     bool isSleeping() { return sleeping_; }
GAS LISTING /tmp/ccS15VAs.s 			page 24


  30:src/../h/tcb.hpp **** 
  31:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 767              		.loc 3 31 35 is_stmt 1
 768              		.loc 3 31 42 is_stmt 0
 769 0340 83B78702 		ld	a5,40(a5)
 770              	.LVL82:
 771              	.LBE51:
 772              	.LBE50:
 135:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 773              		.loc 1 135 35
 774 0344 03B70400 		ld	a4,0(s1)
 135:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 775              		.loc 1 135 9
 776 0348 E366F7DC 		bltu	a4,a5,.L3
 777              	.LBB52:
 137:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 778              		.loc 1 137 13 is_stmt 1
 779              	.LBB53:
 780              	.LBB54:
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 781              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     return sepc;
 782              		.loc 2 107 5
 107:src/../h/riscv.hpp ****     return sepc;
 783              		.loc 2 107 64 is_stmt 0
 784              	 #APP
 785              	# 107 "src/../h/riscv.hpp" 1
 786              		csrr a5, sepc
 787              	# 0 "" 2
 788              	 #NO_APP
 789 0350 233CF4FC 		sd	a5,-40(s0)
 108:src/../h/riscv.hpp **** }
 790              		.loc 2 108 5 is_stmt 1
 108:src/../h/riscv.hpp **** }
 791              		.loc 2 108 12 is_stmt 0
 792 0354 833784FD 		ld	a5,-40(s0)
 793              	.LBE54:
 794              	.LBE53:
 137:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 795              		.loc 1 137 43
 796 0358 2334F4FA 		sd	a5,-88(s0)
 138:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 797              		.loc 1 138 13 is_stmt 1
 798              	.LBB55:
 799              	.LBB56:
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 800              		.loc 2 174 5
 175:src/../h/riscv.hpp ****     return sstatus;
 801              		.loc 2 175 5
 175:src/../h/riscv.hpp ****     return sstatus;
 802              		.loc 2 175 76 is_stmt 0
 803              	 #APP
 804              	# 175 "src/../h/riscv.hpp" 1
 805              		csrr a5, sstatus
 806              	# 0 "" 2
 807              	 #NO_APP
 808 0360 2338F4FC 		sd	a5,-48(s0)
GAS LISTING /tmp/ccS15VAs.s 			page 25


 176:src/../h/riscv.hpp **** }
 809              		.loc 2 176 5 is_stmt 1
 176:src/../h/riscv.hpp **** }
 810              		.loc 2 176 12 is_stmt 0
 811 0364 833704FD 		ld	a5,-48(s0)
 812              	.LBE56:
 813              	.LBE55:
 138:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 814              		.loc 1 138 49
 815 0368 2338F4FA 		sd	a5,-80(s0)
 139:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 816              		.loc 1 139 13 is_stmt 1
 139:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 817              		.loc 1 139 35 is_stmt 0
 818 036c 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 818      23B00700 
 140:src/riscv.cpp ****             TCB::dispatch();
 819              		.loc 1 140 13 is_stmt 1
 140:src/riscv.cpp ****             TCB::dispatch();
 820              		.loc 1 140 26 is_stmt 0
 821 0374 97000000 		call	_ZN3TCB8dispatchEv
 821      E7800000 
 822              	.LVL83:
 141:src/riscv.cpp ****             w_sstatus(sstatus);
 823              		.loc 1 141 13 is_stmt 1
 141:src/riscv.cpp ****             w_sstatus(sstatus);
 824              		.loc 1 141 22 is_stmt 0
 825 037c 833704FB 		ld	a5,-80(s0)
 826              	.LVL84:
 827              	.LBB57:
 828              	.LBB58:
 181:src/../h/riscv.hpp **** }
 829              		.loc 2 181 5 is_stmt 1
 181:src/../h/riscv.hpp **** }
 830              		.loc 2 181 77 is_stmt 0
 831              	 #APP
 832              	# 181 "src/../h/riscv.hpp" 1
 833              		csrw sstatus, a5
 834              	# 0 "" 2
 835              	.LVL85:
 836              	 #NO_APP
 837              	.LBE58:
 838              	.LBE57:
 142:src/riscv.cpp ****             w_sepc(sepc);
 839              		.loc 1 142 13 is_stmt 1
 142:src/riscv.cpp ****             w_sepc(sepc);
 840              		.loc 1 142 19 is_stmt 0
 841 0384 833784FA 		ld	a5,-88(s0)
 842              	.LVL86:
 843              	.LBB59:
 844              	.LBB60:
 113:src/../h/riscv.hpp **** }
 845              		.loc 2 113 5 is_stmt 1
 113:src/../h/riscv.hpp **** }
 846              		.loc 2 113 65 is_stmt 0
 847              	 #APP
 848              	# 113 "src/../h/riscv.hpp" 1
GAS LISTING /tmp/ccS15VAs.s 			page 26


 849              		csrw sepc, a5
 850              	# 0 "" 2
 851              	 #NO_APP
 852 038c 6FF09FD8 		j	.L3
 853              	.LBE60:
 854              	.LBE59:
 855              	.LBE52:
 856              	.LBE49:
 857              	.LBE46:
 858              	.LBE110:
 859              	.LBE113:
 860              		.cfi_endproc
 861              	.LFE44:
 863              		.section	.rodata.str1.8,"aMS",@progbits,1
 864              		.align	3
 865              	.LC0:
 866 0000 54687265 		.string	"Thread exit should be called by the running thread"
 866      61642065 
 866      78697420 
 866      73686F75 
 866      6C642062 
 867 0033 00000000 		.zero	5
 867      00
 868              	.LC1:
 869 0038 53656D61 		.string	"Semaphore open: Handle: "
 869      70686F72 
 869      65206F70 
 869      656E3A20 
 869      48616E64 
 870 0051 00000000 		.zero	7
 870      000000
 871              	.LC2:
 872 0058 0A00     		.string	"\n"
 873 005a 00000000 		.zero	6
 873      0000
 874              	.LC3:
 875 0060 4F6E2068 		.string	"On handle addr: "
 875      616E646C 
 875      65206164 
 875      64723A20 
 875      00
 876              		.text
 877              	.Letext0:
 878              		.file 4 "src/../h/../lib/hw.h"
 879              		.file 5 "src/../h/scheduler.hpp"
 880              		.file 6 "src/../h/list.hpp"
 881              		.file 7 "src/../h/semaphore.hpp"
 882              		.file 8 "src/../h/syscall_c.h"
 883              		.file 9 "src/../h/mem.hpp"
 884              		.file 10 "src/../h/print.hpp"
 885              		.file 11 "src/../lib/console.h"
GAS LISTING /tmp/ccS15VAs.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccS15VAs.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccS15VAs.s:16     .text:0000000000000000 .L0 
     /tmp/ccS15VAs.s:17     .text:0000000000000000 .L0 
     /tmp/ccS15VAs.s:18     .text:0000000000000004 .L0 
     /tmp/ccS15VAs.s:20     .text:0000000000000008 .L0 
     /tmp/ccS15VAs.s:22     .text:000000000000000c .L0 
     /tmp/ccS15VAs.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccS15VAs.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccS15VAs.s:36     .text:0000000000000014 .L0 
     /tmp/ccS15VAs.s:37     .text:0000000000000018 .L0 
     /tmp/ccS15VAs.s:38     .text:0000000000000018 .L0 
     /tmp/ccS15VAs.s:40     .text:000000000000001c .L0 
     /tmp/ccS15VAs.s:42     .text:0000000000000020 .L0 
     /tmp/ccS15VAs.s:48     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccS15VAs.s:51     .text:0000000000000020 .L0 
     /tmp/ccS15VAs.s:52     .text:0000000000000020 .L0 
     /tmp/ccS15VAs.s:53     .text:0000000000000024 .L0 
     /tmp/ccS15VAs.s:58     .text:0000000000000034 .L0 
     /tmp/ccS15VAs.s:59     .text:0000000000000034 .L0 
     /tmp/ccS15VAs.s:60     .text:0000000000000034 .L0 
     /tmp/ccS15VAs.s:61     .text:0000000000000034 .L0 
     /tmp/ccS15VAs.s:63     .text:0000000000000038 .L0 
     /tmp/ccS15VAs.s:65     .text:0000000000000038 .L0 
     /tmp/ccS15VAs.s:66     .text:0000000000000038 .L0 
       src/riscv.cpp:20     .text:0000000000000038 .L0 
     /tmp/ccS15VAs.s:73     .text:000000000000003c .L0 
       src/riscv.cpp:21     .text:000000000000003c .L0 
     /tmp/ccS15VAs.s:79     .text:0000000000000040 .L0 
       src/riscv.cpp:22     .text:0000000000000040 .L0 
     /tmp/ccS15VAs.s:85     .text:0000000000000044 .L0 
       src/riscv.cpp:23     .text:0000000000000044 .L0 
     /tmp/ccS15VAs.s:91     .text:0000000000000048 .L0 
       src/riscv.cpp:24     .text:0000000000000048 .L0 
     /tmp/ccS15VAs.s:97     .text:000000000000004c .L0 
       src/riscv.cpp:25     .text:000000000000004c .L0 
     /tmp/ccS15VAs.s:103    .text:0000000000000050 .L0 
       src/riscv.cpp:26     .text:0000000000000050 .L0 
     /tmp/ccS15VAs.s:109    .text:0000000000000054 .L0 
       src/riscv.cpp:27     .text:0000000000000054 .L0 
     /tmp/ccS15VAs.s:119    .text:0000000000000058 .L0 
     /tmp/ccS15VAs.s:120    .text:0000000000000058 .L0 
     /tmp/ccS15VAs.s:121    .text:0000000000000058 .L0 
  src/../h/riscv.hpp:95     .text:0000000000000058 .L0 
     /tmp/ccS15VAs.s:129    .text:0000000000000060 .L0 
     /tmp/ccS15VAs.s:130    .text:0000000000000060 .L0 
     /tmp/ccS15VAs.s:136    .text:0000000000000064 .L0 
     /tmp/ccS15VAs.s:137    .text:0000000000000064 .L0 
     /tmp/ccS15VAs.s:139    .text:0000000000000068 .L0 
     /tmp/ccS15VAs.s:145    .text:0000000000000070 .L0 
     /tmp/ccS15VAs.s:151    .text:0000000000000080 .L0 
     /tmp/ccS15VAs.s:156    .text:0000000000000090 .L0 
     /tmp/ccS15VAs.s:157    .text:0000000000000090 .L0 
     /tmp/ccS15VAs.s:162    .text:0000000000000098 .L0 
GAS LISTING /tmp/ccS15VAs.s 			page 28


     /tmp/ccS15VAs.s:170    .text:000000000000009c .L0 
     /tmp/ccS15VAs.s:171    .text:000000000000009c .L0 
     /tmp/ccS15VAs.s:172    .text:000000000000009c .L0 
  src/../h/riscv.hpp:107    .text:000000000000009c .L0 
     /tmp/ccS15VAs.s:181    .text:00000000000000a4 .L0 
     /tmp/ccS15VAs.s:182    .text:00000000000000a4 .L0 
     /tmp/ccS15VAs.s:186    .text:00000000000000a8 .L0 
     /tmp/ccS15VAs.s:188    .text:00000000000000ac .L0 
     /tmp/ccS15VAs.s:192    .text:00000000000000b0 .L0 
     /tmp/ccS15VAs.s:193    .text:00000000000000b0 .L0 
     /tmp/ccS15VAs.s:194    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:175    .text:00000000000000b0 .L0 
     /tmp/ccS15VAs.s:202    .text:00000000000000b8 .L0 
     /tmp/ccS15VAs.s:203    .text:00000000000000b8 .L0 
     /tmp/ccS15VAs.s:207    .text:00000000000000bc .L0 
     /tmp/ccS15VAs.s:210    .text:00000000000000c0 .L0 
     /tmp/ccS15VAs.s:212    .text:00000000000000c0 .L0 
     /tmp/ccS15VAs.s:296    .text:00000000000000e4 .L0 
     /tmp/ccS15VAs.s:297    .text:00000000000000e4 .L0 
     /tmp/ccS15VAs.s:298    .text:00000000000000e4 .L0 
     /tmp/ccS15VAs.s:309    .text:00000000000000fc .L0 
     /tmp/ccS15VAs.s:310    .text:00000000000000fc .L0 
       src/riscv.cpp:121    .text:00000000000000fc .L0 
     /tmp/ccS15VAs.s:316    .text:0000000000000100 .L0 
       src/riscv.cpp:124    .text:0000000000000100 .L0 
     /tmp/ccS15VAs.s:321    .text:0000000000000104 .L0 
     /tmp/ccS15VAs.s:323    .text:0000000000000104 .L0 
     /tmp/ccS15VAs.s:328    .text:0000000000000108 .L0 
  src/../h/riscv.hpp:181    .text:0000000000000108 .L0 
     /tmp/ccS15VAs.s:338    .text:000000000000010c .L0 
     /tmp/ccS15VAs.s:339    .text:000000000000010c .L0 
     /tmp/ccS15VAs.s:344    .text:0000000000000110 .L0 
  src/../h/riscv.hpp:113    .text:0000000000000110 .L0 
     /tmp/ccS15VAs.s:357    .text:0000000000000114 .L0 
     /tmp/ccS15VAs.s:358    .text:0000000000000118 .L0 
     /tmp/ccS15VAs.s:359    .text:0000000000000118 .L0 
     /tmp/ccS15VAs.s:361    .text:000000000000011c .L0 
     /tmp/ccS15VAs.s:362    .text:000000000000011c .L0 
     /tmp/ccS15VAs.s:364    .text:0000000000000120 .L0 
     /tmp/ccS15VAs.s:366    .text:0000000000000124 .L0 
     /tmp/ccS15VAs.s:368    .text:0000000000000128 .L0 
     /tmp/ccS15VAs.s:372    .text:000000000000012c .L0 
     /tmp/ccS15VAs.s:378    .text:000000000000012c .L0 
     /tmp/ccS15VAs.s:379    .text:000000000000012c .L0 
     /tmp/ccS15VAs.s:380    .text:000000000000012c .L0 
     /tmp/ccS15VAs.s:386    .text:0000000000000140 .L0 
     /tmp/ccS15VAs.s:389    .text:0000000000000144 .L0 
     /tmp/ccS15VAs.s:393    .text:0000000000000148 .L0 
     /tmp/ccS15VAs.s:394    .text:0000000000000148 .L0 
     /tmp/ccS15VAs.s:395    .text:0000000000000148 .L0 
     /tmp/ccS15VAs.s:402    .text:0000000000000158 .L0 
     /tmp/ccS15VAs.s:403    .text:0000000000000158 .L0 
     /tmp/ccS15VAs.s:407    .text:000000000000015c .L0 
     /tmp/ccS15VAs.s:411    .text:0000000000000160 .L0 
     /tmp/ccS15VAs.s:412    .text:0000000000000160 .L0 
     /tmp/ccS15VAs.s:413    .text:0000000000000160 .L0 
     /tmp/ccS15VAs.s:420    .text:0000000000000170 .L0 
GAS LISTING /tmp/ccS15VAs.s 			page 29


     /tmp/ccS15VAs.s:421    .text:0000000000000170 .L0 
     /tmp/ccS15VAs.s:425    .text:0000000000000174 .L0 
     /tmp/ccS15VAs.s:429    .text:0000000000000178 .L0 
     /tmp/ccS15VAs.s:431    .text:0000000000000178 .L0 
     /tmp/ccS15VAs.s:432    .text:0000000000000178 .L0 
     /tmp/ccS15VAs.s:433    .text:0000000000000178 .L0 
     /tmp/ccS15VAs.s:434    .text:0000000000000178 .L0 
     /tmp/ccS15VAs.s:437    .text:0000000000000180 .L0 
     /tmp/ccS15VAs.s:439    .text:0000000000000184 .L0 
     /tmp/ccS15VAs.s:444    .text:0000000000000188 .L0 
     /tmp/ccS15VAs.s:451    .text:0000000000000190 .L0 
     /tmp/ccS15VAs.s:453    .text:0000000000000190 .L0 
     /tmp/ccS15VAs.s:454    .text:0000000000000190 .L0 
     /tmp/ccS15VAs.s:455    .text:0000000000000190 .L0 
     /tmp/ccS15VAs.s:458    .text:0000000000000198 .L0 
     /tmp/ccS15VAs.s:459    .text:0000000000000198 .L0 
     /tmp/ccS15VAs.s:460    .text:0000000000000198 .L0 
     /tmp/ccS15VAs.s:462    .text:000000000000019c .L0 
     /tmp/ccS15VAs.s:470    .text:00000000000001c0 .L0 
     /tmp/ccS15VAs.s:471    .text:00000000000001c0 .L0 
     /tmp/ccS15VAs.s:474    .text:00000000000001c4 .L0 
     /tmp/ccS15VAs.s:480    .text:00000000000001c8 .L0 
     /tmp/ccS15VAs.s:481    .text:00000000000001c8 .L0 
     /tmp/ccS15VAs.s:483    .text:00000000000001cc .L0 
     /tmp/ccS15VAs.s:485    .text:00000000000001d0 .L0 
     /tmp/ccS15VAs.s:491    .text:00000000000001d8 .L0 
     /tmp/ccS15VAs.s:498    .text:00000000000001e4 .L0 
     /tmp/ccS15VAs.s:507    .text:00000000000001ec .L0 
     /tmp/ccS15VAs.s:508    .text:00000000000001ec .L0 
     /tmp/ccS15VAs.s:509    .text:00000000000001ec .L0 
     /tmp/ccS15VAs.s:514    .text:00000000000001f4 .L0 
     /tmp/ccS15VAs.s:515    .text:00000000000001f4 .L0 
     /tmp/ccS15VAs.s:519    .text:00000000000001f8 .L0 
     /tmp/ccS15VAs.s:523    .text:00000000000001fc .L0 
     /tmp/ccS15VAs.s:525    .text:00000000000001fc .L0 
     /tmp/ccS15VAs.s:526    .text:00000000000001fc .L0 
     /tmp/ccS15VAs.s:527    .text:00000000000001fc .L0 
     /tmp/ccS15VAs.s:528    .text:00000000000001fc .L0 
     /tmp/ccS15VAs.s:533    .text:0000000000000208 .L0 
     /tmp/ccS15VAs.s:535    .text:000000000000020c .L0 
     /tmp/ccS15VAs.s:540    .text:0000000000000210 .L0 
     /tmp/ccS15VAs.s:547    .text:0000000000000214 .L0 
     /tmp/ccS15VAs.s:548    .text:0000000000000214 .L0 
     /tmp/ccS15VAs.s:552    .text:0000000000000224 .L0 
     /tmp/ccS15VAs.s:553    .text:0000000000000224 .L0 
     /tmp/ccS15VAs.s:557    .text:0000000000000230 .L0 
     /tmp/ccS15VAs.s:558    .text:0000000000000230 .L0 
     /tmp/ccS15VAs.s:562    .text:0000000000000240 .L0 
     /tmp/ccS15VAs.s:563    .text:0000000000000240 .L0 
     /tmp/ccS15VAs.s:567    .text:0000000000000250 .L0 
     /tmp/ccS15VAs.s:568    .text:0000000000000250 .L0 
     /tmp/ccS15VAs.s:572    .text:000000000000025c .L0 
     /tmp/ccS15VAs.s:573    .text:000000000000025c .L0 
     /tmp/ccS15VAs.s:578    .text:000000000000026c .L0 
     /tmp/ccS15VAs.s:583    .text:0000000000000270 .L0 
     /tmp/ccS15VAs.s:589    .text:0000000000000278 .L0 
     /tmp/ccS15VAs.s:591    .text:0000000000000278 .L0 
GAS LISTING /tmp/ccS15VAs.s 			page 30


     /tmp/ccS15VAs.s:592    .text:0000000000000278 .L0 
     /tmp/ccS15VAs.s:593    .text:0000000000000278 .L0 
     /tmp/ccS15VAs.s:594    .text:0000000000000278 .L0 
     /tmp/ccS15VAs.s:599    .text:0000000000000284 .L0 
     /tmp/ccS15VAs.s:600    .text:0000000000000284 .L0 
     /tmp/ccS15VAs.s:607    .text:0000000000000290 .L0 
     /tmp/ccS15VAs.s:608    .text:0000000000000290 .L0 
     /tmp/ccS15VAs.s:612    .text:0000000000000294 .L0 
     /tmp/ccS15VAs.s:616    .text:0000000000000298 .L0 
     /tmp/ccS15VAs.s:618    .text:0000000000000298 .L0 
     /tmp/ccS15VAs.s:619    .text:0000000000000298 .L0 
     /tmp/ccS15VAs.s:620    .text:0000000000000298 .L0 
     /tmp/ccS15VAs.s:621    .text:0000000000000298 .L0 
     /tmp/ccS15VAs.s:626    .text:00000000000002a4 .L0 
     /tmp/ccS15VAs.s:630    .text:00000000000002a8 .L0 
     /tmp/ccS15VAs.s:634    .text:00000000000002ac .L0 
     /tmp/ccS15VAs.s:636    .text:00000000000002ac .L0 
     /tmp/ccS15VAs.s:637    .text:00000000000002ac .L0 
     /tmp/ccS15VAs.s:638    .text:00000000000002ac .L0 
     /tmp/ccS15VAs.s:639    .text:00000000000002ac .L0 
     /tmp/ccS15VAs.s:647    .text:00000000000002b8 .L0 
     /tmp/ccS15VAs.s:648    .text:00000000000002b8 .L0 
     /tmp/ccS15VAs.s:652    .text:00000000000002bc .L0 
     /tmp/ccS15VAs.s:656    .text:00000000000002c0 .L0 
     /tmp/ccS15VAs.s:658    .text:00000000000002c0 .L0 
     /tmp/ccS15VAs.s:659    .text:00000000000002c0 .L0 
     /tmp/ccS15VAs.s:660    .text:00000000000002c0 .L0 
     /tmp/ccS15VAs.s:661    .text:00000000000002c0 .L0 
     /tmp/ccS15VAs.s:662    .text:00000000000002c0 .L0 
     /tmp/ccS15VAs.s:670    .text:00000000000002cc .L0 
     /tmp/ccS15VAs.s:671    .text:00000000000002cc .L0 
     /tmp/ccS15VAs.s:675    .text:00000000000002d0 .L0 
     /tmp/ccS15VAs.s:679    .text:00000000000002d4 .L0 
     /tmp/ccS15VAs.s:680    .text:00000000000002d4 .L0 
     /tmp/ccS15VAs.s:681    .text:00000000000002d4 .L0 
     /tmp/ccS15VAs.s:684    .text:00000000000002dc .L0 
     /tmp/ccS15VAs.s:687    .text:00000000000002e0 .L0 
     /tmp/ccS15VAs.s:691    .text:00000000000002e4 .L0 
     /tmp/ccS15VAs.s:692    .text:00000000000002e4 .L0 
     /tmp/ccS15VAs.s:693    .text:00000000000002e4 .L0 
     /tmp/ccS15VAs.s:700    .text:00000000000002f0 .L0 
     /tmp/ccS15VAs.s:701    .text:00000000000002f0 .L0 
     /tmp/ccS15VAs.s:705    .text:00000000000002f4 .L0 
     /tmp/ccS15VAs.s:711    .text:00000000000002f8 .L0 
     /tmp/ccS15VAs.s:719    .text:0000000000000300 .L0 
     /tmp/ccS15VAs.s:727    .text:0000000000000308 .L0 
     /tmp/ccS15VAs.s:737    .text:0000000000000310 .L0 
     /tmp/ccS15VAs.s:738    .text:0000000000000310 .L0 
     /tmp/ccS15VAs.s:739    .text:0000000000000310 .L0 
     /tmp/ccS15VAs.s:749    .text:0000000000000318 .L0 
     /tmp/ccS15VAs.s:750    .text:0000000000000318 .L0 
     /tmp/ccS15VAs.s:756    .text:000000000000032c .L0 
     /tmp/ccS15VAs.s:757    .text:000000000000032c .L0 
     /tmp/ccS15VAs.s:761    .text:0000000000000334 .L0 
     /tmp/ccS15VAs.s:762    .text:0000000000000334 .L0 
     /tmp/ccS15VAs.s:768    .text:0000000000000340 .L0 
     /tmp/ccS15VAs.s:769    .text:0000000000000340 .L0 
GAS LISTING /tmp/ccS15VAs.s 			page 31


     /tmp/ccS15VAs.s:774    .text:0000000000000344 .L0 
     /tmp/ccS15VAs.s:776    .text:0000000000000348 .L0 
     /tmp/ccS15VAs.s:781    .text:000000000000034c .L0 
     /tmp/ccS15VAs.s:782    .text:000000000000034c .L0 
     /tmp/ccS15VAs.s:783    .text:000000000000034c .L0 
  src/../h/riscv.hpp:107    .text:000000000000034c .L0 
     /tmp/ccS15VAs.s:791    .text:0000000000000354 .L0 
     /tmp/ccS15VAs.s:792    .text:0000000000000354 .L0 
     /tmp/ccS15VAs.s:796    .text:0000000000000358 .L0 
     /tmp/ccS15VAs.s:800    .text:000000000000035c .L0 
     /tmp/ccS15VAs.s:801    .text:000000000000035c .L0 
     /tmp/ccS15VAs.s:802    .text:000000000000035c .L0 
  src/../h/riscv.hpp:175    .text:000000000000035c .L0 
     /tmp/ccS15VAs.s:810    .text:0000000000000364 .L0 
     /tmp/ccS15VAs.s:811    .text:0000000000000364 .L0 
     /tmp/ccS15VAs.s:815    .text:0000000000000368 .L0 
     /tmp/ccS15VAs.s:817    .text:000000000000036c .L0 
     /tmp/ccS15VAs.s:818    .text:000000000000036c .L0 
     /tmp/ccS15VAs.s:820    .text:0000000000000374 .L0 
     /tmp/ccS15VAs.s:821    .text:0000000000000374 .L0 
     /tmp/ccS15VAs.s:824    .text:000000000000037c .L0 
     /tmp/ccS15VAs.s:825    .text:000000000000037c .L0 
     /tmp/ccS15VAs.s:830    .text:0000000000000380 .L0 
  src/../h/riscv.hpp:181    .text:0000000000000380 .L0 
     /tmp/ccS15VAs.s:840    .text:0000000000000384 .L0 
     /tmp/ccS15VAs.s:841    .text:0000000000000384 .L0 
     /tmp/ccS15VAs.s:846    .text:0000000000000388 .L0 
  src/../h/riscv.hpp:113    .text:0000000000000388 .L0 
     /tmp/ccS15VAs.s:860    .text:0000000000000390 .L0 
     /tmp/ccS15VAs.s:886    .text:0000000000000390 .L0 
     /tmp/ccS15VAs.s:224    .rodata:0000000000000000 .L7
     /tmp/ccS15VAs.s:216    .text:00000000000000cc .L0 
     /tmp/ccS15VAs.s:462    .text:000000000000019c .L0 
     /tmp/ccS15VAs.s:865    .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccS15VAs.s:465    .text:00000000000001ac .L0 
     /tmp/ccS15VAs.s:868    .rodata.str1.8:0000000000000038 .LC1
     /tmp/ccS15VAs.s:548    .text:0000000000000214 .L0 
     /tmp/ccS15VAs.s:871    .rodata.str1.8:0000000000000058 .LC2
     /tmp/ccS15VAs.s:558    .text:0000000000000230 .L0 
     /tmp/ccS15VAs.s:874    .rodata.str1.8:0000000000000060 .LC3
     /tmp/ccS15VAs.s:563    .text:0000000000000240 .L0 
     /tmp/ccS15VAs.s:573    .text:000000000000025c .L0 
     /tmp/ccS15VAs.s:750    .text:0000000000000318 .L0 
     /tmp/ccS15VAs.s:762    .text:0000000000000334 .L0 
     /tmp/ccS15VAs.s:818    .text:000000000000036c .L0 
     /tmp/ccS15VAs.s:164    .text:000000000000009c .L30
     /tmp/ccS15VAs.s:730    .text:0000000000000310 .L31
     /tmp/ccS15VAs.s:351    .text:0000000000000114 .L3
     /tmp/ccS15VAs.s:707    .text:00000000000002f8 .L25
     /tmp/ccS15VAs.s:306    .text:00000000000000fc .L5
     /tmp/ccS15VAs.s:714    .text:0000000000000300 .L26
     /tmp/ccS15VAs.s:722    .text:0000000000000308 .L27
     /tmp/ccS15VAs.s:487    .text:00000000000001d8 .L21
     /tmp/ccS15VAs.s:580    .text:0000000000000270 .L28
     /tmp/ccS15VAs.s:541    .text:0000000000000214 .L22
     /tmp/ccS15VAs.s:293    .text:00000000000000e4 .L20
     /tmp/ccS15VAs.s:371    .text:000000000000012c .L19
GAS LISTING /tmp/ccS15VAs.s 			page 32


     /tmp/ccS15VAs.s:391    .text:0000000000000148 .L18
     /tmp/ccS15VAs.s:409    .text:0000000000000160 .L17
     /tmp/ccS15VAs.s:427    .text:0000000000000178 .L16
     /tmp/ccS15VAs.s:447    .text:0000000000000190 .L15
     /tmp/ccS15VAs.s:504    .text:00000000000001ec .L14
     /tmp/ccS15VAs.s:521    .text:00000000000001fc .L13
     /tmp/ccS15VAs.s:586    .text:0000000000000278 .L12
     /tmp/ccS15VAs.s:614    .text:0000000000000298 .L11
     /tmp/ccS15VAs.s:632    .text:00000000000002ac .L10
     /tmp/ccS15VAs.s:654    .text:00000000000002c0 .L9
     /tmp/ccS15VAs.s:677    .text:00000000000002d4 .L8
     /tmp/ccS15VAs.s:689    .text:00000000000002e4 .L6
     /tmp/ccS15VAs.s:2964   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccS15VAs.s:4913   .debug_str:0000000000000520 .LASF206
     /tmp/ccS15VAs.s:5163   .debug_str:0000000000000ce2 .LASF207
     /tmp/ccS15VAs.s:4869   .debug_str:00000000000003ab .LASF208
     /tmp/ccS15VAs.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccS15VAs.s:877    .text:0000000000000390 .Letext0
     /tmp/ccS15VAs.s:4753   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccS15VAs.s:4899   .debug_str:00000000000004a4 .LASF0
     /tmp/ccS15VAs.s:4927   .debug_str:0000000000000656 .LASF1
     /tmp/ccS15VAs.s:5041   .debug_str:000000000000099a .LASF2
     /tmp/ccS15VAs.s:5049   .debug_str:00000000000009d5 .LASF4
     /tmp/ccS15VAs.s:4905   .debug_str:00000000000004cb .LASF3
     /tmp/ccS15VAs.s:4775   .debug_str:00000000000000d5 .LASF5
     /tmp/ccS15VAs.s:5015   .debug_str:00000000000008cf .LASF6
     /tmp/ccS15VAs.s:5001   .debug_str:000000000000087a .LASF7
     /tmp/ccS15VAs.s:4917   .debug_str:0000000000000600 .LASF8
     /tmp/ccS15VAs.s:4865   .debug_str:0000000000000395 .LASF9
     /tmp/ccS15VAs.s:4877   .debug_str:000000000000041d .LASF10
     /tmp/ccS15VAs.s:4803   .debug_str:00000000000001b9 .LASF11
     /tmp/ccS15VAs.s:4855   .debug_str:000000000000035a .LASF12
     /tmp/ccS15VAs.s:4813   .debug_str:0000000000000201 .LASF13
     /tmp/ccS15VAs.s:4801   .debug_str:00000000000001a9 .LASF14
     /tmp/ccS15VAs.s:5083   .debug_str:0000000000000aaa .LASF15
     /tmp/ccS15VAs.s:4839   .debug_str:00000000000002c6 .LASF16
     /tmp/ccS15VAs.s:5069   .debug_str:0000000000000a54 .LASF17
     /tmp/ccS15VAs.s:5149   .debug_str:0000000000000c76 .LASF58
     /tmp/ccS15VAs.s:5029   .debug_str:0000000000000940 .LASF209
     /tmp/ccS15VAs.s:4931   .debug_str:000000000000066f .LASF18
     /tmp/ccS15VAs.s:4843   .debug_str:00000000000002f8 .LASF19
     /tmp/ccS15VAs.s:5167   .debug_str:0000000000000cfc .LASF20
     /tmp/ccS15VAs.s:4885   .debug_str:0000000000000449 .LASF53
     /tmp/ccS15VAs.s:4895   .debug_str:0000000000000486 .LASF55
     /tmp/ccS15VAs.s:5129   .debug_str:0000000000000be5 .LASF21
     /tmp/ccS15VAs.s:5125   .debug_str:0000000000000bb9 .LASF23
     /tmp/ccS15VAs.s:5035   .debug_str:0000000000000972 .LASF25
     /tmp/ccS15VAs.s:4987   .debug_str:0000000000000812 .LASF27
     /tmp/ccS15VAs.s:5023   .debug_str:0000000000000912 .LASF22
     /tmp/ccS15VAs.s:5025   .debug_str:0000000000000919 .LASF24
     /tmp/ccS15VAs.s:4975   .debug_str:00000000000007c2 .LASF26
     /tmp/ccS15VAs.s:4919   .debug_str:0000000000000613 .LASF28
     /tmp/ccS15VAs.s:5161   .debug_str:0000000000000cda .LASF29
     /tmp/ccS15VAs.s:5109   .debug_str:0000000000000b4d .LASF30
     /tmp/ccS15VAs.s:4971   .debug_str:00000000000007b5 .LASF31
     /tmp/ccS15VAs.s:4985   .debug_str:00000000000007fe .LASF32
     /tmp/ccS15VAs.s:4935   .debug_str:0000000000000691 .LASF33
GAS LISTING /tmp/ccS15VAs.s 			page 33


     /tmp/ccS15VAs.s:5027   .debug_str:000000000000092c .LASF34
     /tmp/ccS15VAs.s:5185   .debug_str:0000000000000d91 .LASF35
     /tmp/ccS15VAs.s:4903   .debug_str:00000000000004b7 .LASF36
     /tmp/ccS15VAs.s:5079   .debug_str:0000000000000a96 .LASF37
     /tmp/ccS15VAs.s:5053   .debug_str:00000000000009e1 .LASF38
     /tmp/ccS15VAs.s:5055   .debug_str:00000000000009f4 .LASF39
     /tmp/ccS15VAs.s:4807   .debug_str:00000000000001d1 .LASF40
     /tmp/ccS15VAs.s:4837   .debug_str:00000000000002c0 .LASF41
     /tmp/ccS15VAs.s:4891   .debug_str:000000000000046b .LASF42
     /tmp/ccS15VAs.s:4901   .debug_str:00000000000004b1 .LASF43
     /tmp/ccS15VAs.s:4829   .debug_str:000000000000027e .LASF44
     /tmp/ccS15VAs.s:4777   .debug_str:00000000000000dc .LASF45
     /tmp/ccS15VAs.s:5045   .debug_str:00000000000009b2 .LASF46
     /tmp/ccS15VAs.s:5039   .debug_str:000000000000098f .LASF47
     /tmp/ccS15VAs.s:5183   .debug_str:0000000000000d79 .LASF48
     /tmp/ccS15VAs.s:5153   .debug_str:0000000000000c82 .LASF49
     /tmp/ccS15VAs.s:5171   .debug_str:0000000000000d10 .LASF50
     /tmp/ccS15VAs.s:5145   .debug_str:0000000000000c4e .LASF51
     /tmp/ccS15VAs.s:4951   .debug_str:00000000000006f9 .LASF52
     /tmp/ccS15VAs.s:5159   .debug_str:0000000000000ccb .LASF54
     /tmp/ccS15VAs.s:4875   .debug_str:0000000000000401 .LASF56
     /tmp/ccS15VAs.s:5007   .debug_str:000000000000089c .LASF89
     /tmp/ccS15VAs.s:4911   .debug_str:00000000000004fe .LASF91
     /tmp/ccS15VAs.s:5105   .debug_str:0000000000000b3f .LASF57
     /tmp/ccS15VAs.s:5089   .debug_str:0000000000000ad1 .LASF210
     /tmp/ccS15VAs.s:5051   .debug_str:00000000000009dc .LASF59
     /tmp/ccS15VAs.s:4769   .debug_str:0000000000000084 .LASF61
     /tmp/ccS15VAs.s:5091   .debug_str:0000000000000ad9 .LASF67
     /tmp/ccS15VAs.s:4967   .debug_str:0000000000000795 .LASF69
     /tmp/ccS15VAs.s:4791   .debug_str:0000000000000151 .LASF60
     /tmp/ccS15VAs.s:5127   .debug_str:0000000000000bce .LASF62
     /tmp/ccS15VAs.s:4897   .debug_str:000000000000049e .LASF63
     /tmp/ccS15VAs.s:4889   .debug_str:000000000000045b .LASF64
     /tmp/ccS15VAs.s:4763   .debug_str:000000000000003a .LASF65
     /tmp/ccS15VAs.s:4989   .debug_str:0000000000000827 .LASF66
     /tmp/ccS15VAs.s:5043   .debug_str:00000000000009a8 .LASF68
     /tmp/ccS15VAs.s:5085   .debug_str:0000000000000ab6 .LASF70
     /tmp/ccS15VAs.s:5119   .debug_str:0000000000000b89 .LASF71
     /tmp/ccS15VAs.s:4979   .debug_str:00000000000007ce .LASF72
     /tmp/ccS15VAs.s:4965   .debug_str:000000000000078a .LASF73
     /tmp/ccS15VAs.s:4939   .debug_str:00000000000006a1 .LASF74
     /tmp/ccS15VAs.s:4945   .debug_str:00000000000006c3 .LASF75
     /tmp/ccS15VAs.s:5133   .debug_str:0000000000000bf3 .LASF76
     /tmp/ccS15VAs.s:5081   .debug_str:0000000000000a9d .LASF77
     /tmp/ccS15VAs.s:5135   .debug_str:0000000000000c0c .LASF78
     /tmp/ccS15VAs.s:4991   .debug_str:0000000000000839 .LASF211
     /tmp/ccS15VAs.s:4929   .debug_str:0000000000000669 .LASF79
     /tmp/ccS15VAs.s:5033   .debug_str:0000000000000962 .LASF80
     /tmp/ccS15VAs.s:5103   .debug_str:0000000000000b37 .LASF176
     /tmp/ccS15VAs.s:5019   .debug_str:00000000000008f1 .LASF104
     /tmp/ccS15VAs.s:4759   .debug_str:0000000000000025 .LASF81
     /tmp/ccS15VAs.s:5101   .debug_str:0000000000000b32 .LASF82
     /tmp/ccS15VAs.s:5181   .debug_str:0000000000000d73 .LASF83
     /tmp/ccS15VAs.s:5123   .debug_str:0000000000000bb1 .LASF84
     /tmp/ccS15VAs.s:5113   .debug_str:0000000000000b6b .LASF85
     /tmp/ccS15VAs.s:5075   .debug_str:0000000000000a87 .LASF86
     /tmp/ccS15VAs.s:4795   .debug_str:0000000000000172 .LASF87
GAS LISTING /tmp/ccS15VAs.s 			page 34


     /tmp/ccS15VAs.s:5111   .debug_str:0000000000000b61 .LASF88
     /tmp/ccS15VAs.s:5009   .debug_str:00000000000008b1 .LASF90
     /tmp/ccS15VAs.s:4933   .debug_str:0000000000000678 .LASF92
     /tmp/ccS15VAs.s:4823   .debug_str:0000000000000256 .LASF181
     /tmp/ccS15VAs.s:4767   .debug_str:000000000000005c .LASF183
     /tmp/ccS15VAs.s:4833   .debug_str:00000000000002b2 .LASF93
     /tmp/ccS15VAs.s:4809   .debug_str:00000000000001e4 .LASF94
     /tmp/ccS15VAs.s:5065   .debug_str:0000000000000a41 .LASF95
     /tmp/ccS15VAs.s:4999   .debug_str:000000000000086b .LASF96
     /tmp/ccS15VAs.s:5057   .debug_str:00000000000009fb .LASF101
     /tmp/ccS15VAs.s:5047   .debug_str:00000000000009ca .LASF97
     /tmp/ccS15VAs.s:5169   .debug_str:0000000000000d05 .LASF98
     /tmp/ccS15VAs.s:4943   .debug_str:00000000000006be .LASF99
     /tmp/ccS15VAs.s:4863   .debug_str:000000000000038b .LASF100
     /tmp/ccS15VAs.s:5093   .debug_str:0000000000000ae4 .LASF102
     /tmp/ccS15VAs.s:5037   .debug_str:000000000000097b .LASF103
     /tmp/ccS15VAs.s:5175   .debug_str:0000000000000d31 .LASF212
     /tmp/ccS15VAs.s:4871   .debug_str:00000000000003be .LASF105
     /tmp/ccS15VAs.s:5143   .debug_str:0000000000000c43 .LASF106
     /tmp/ccS15VAs.s:4915   .debug_str:00000000000005e4 .LASF107
     /tmp/ccS15VAs.s:4799   .debug_str:0000000000000198 .LASF108
     /tmp/ccS15VAs.s:4831   .debug_str:0000000000000290 .LASF109
     /tmp/ccS15VAs.s:5003   .debug_str:000000000000088d .LASF110
     /tmp/ccS15VAs.s:5131   .debug_str:0000000000000bee .LASF213
     /tmp/ccS15VAs.s:5077   .debug_str:0000000000000a91 .LASF111
     /tmp/ccS15VAs.s:4973   .debug_str:00000000000007bd .LASF112
     /tmp/ccS15VAs.s:4963   .debug_str:0000000000000785 .LASF113
     /tmp/ccS15VAs.s:5071   .debug_str:0000000000000a6a .LASF114
     /tmp/ccS15VAs.s:4851   .debug_str:0000000000000322 .LASF115
     /tmp/ccS15VAs.s:4825   .debug_str:0000000000000264 .LASF140
     /tmp/ccS15VAs.s:5031   .debug_str:000000000000094b .LASF141
     /tmp/ccS15VAs.s:4923   .debug_str:0000000000000641 .LASF116
     /tmp/ccS15VAs.s:4797   .debug_str:000000000000017b .LASF117
     /tmp/ccS15VAs.s:4937   .debug_str:0000000000000699 .LASF118
     /tmp/ccS15VAs.s:4841   .debug_str:00000000000002dc .LASF119
     /tmp/ccS15VAs.s:4997   .debug_str:000000000000085f .LASF120
     /tmp/ccS15VAs.s:5147   .debug_str:0000000000000c58 .LASF121
     /tmp/ccS15VAs.s:5189   .debug_str:0000000000000da3 .LASF122
     /tmp/ccS15VAs.s:4815   .debug_str:0000000000000211 .LASF123
     /tmp/ccS15VAs.s:5063   .debug_str:0000000000000a36 .LASF124
     /tmp/ccS15VAs.s:4955   .debug_str:0000000000000728 .LASF125
     /tmp/ccS15VAs.s:5011   .debug_str:00000000000008bf .LASF126
     /tmp/ccS15VAs.s:4765   .debug_str:0000000000000042 .LASF127
     /tmp/ccS15VAs.s:5073   .debug_str:0000000000000a7d .LASF128
     /tmp/ccS15VAs.s:4873   .debug_str:00000000000003d6 .LASF129
     /tmp/ccS15VAs.s:4793   .debug_str:000000000000015d .LASF214
     /tmp/ccS15VAs.s:5137   .debug_str:0000000000000c2c .LASF130
     /tmp/ccS15VAs.s:4977   .debug_str:00000000000007c9 .LASF131
     /tmp/ccS15VAs.s:4959   .debug_str:0000000000000769 .LASF132
     /tmp/ccS15VAs.s:4781   .debug_str:0000000000000108 .LASF133
     /tmp/ccS15VAs.s:4949   .debug_str:00000000000006e1 .LASF134
     /tmp/ccS15VAs.s:4835   .debug_str:00000000000002bb .LASF135
     /tmp/ccS15VAs.s:4755   .debug_str:0000000000000000 .LASF136
     /tmp/ccS15VAs.s:5087   .debug_str:0000000000000aca .LASF137
     /tmp/ccS15VAs.s:4953   .debug_str:000000000000070f .LASF138
     /tmp/ccS15VAs.s:5177   .debug_str:0000000000000d45 .LASF139
     /tmp/ccS15VAs.s:5179   .debug_str:0000000000000d5c .LASF142
GAS LISTING /tmp/ccS15VAs.s 			page 35


     /tmp/ccS15VAs.s:4861   .debug_str:0000000000000377 .LASF143
     /tmp/ccS15VAs.s:4789   .debug_str:000000000000014a .LASF144
     /tmp/ccS15VAs.s:4845   .debug_str:0000000000000301 .LASF145
     /tmp/ccS15VAs.s:4867   .debug_str:00000000000003a5 .LASF146
     /tmp/ccS15VAs.s:4879   .debug_str:000000000000042b .LASF215
     /tmp/ccS15VAs.s:5187   .debug_str:0000000000000d99 .LASF147
     /tmp/ccS15VAs.s:4859   .debug_str:000000000000036e .LASF148
     /tmp/ccS15VAs.s:4817   .debug_str:000000000000022c .LASF149
     /tmp/ccS15VAs.s:5017   .debug_str:00000000000008d6 .LASF150
     /tmp/ccS15VAs.s:5067   .debug_str:0000000000000a46 .LASF151
     /tmp/ccS15VAs.s:5021   .debug_str:0000000000000906 .LASF152
     /tmp/ccS15VAs.s:4827   .debug_str:000000000000026e .LASF153
     /tmp/ccS15VAs.s:4805   .debug_str:00000000000001c8 .LASF154
     /tmp/ccS15VAs.s:4811   .debug_str:00000000000001f7 .LASF155
     /tmp/ccS15VAs.s:4969   .debug_str:00000000000007ac .LASF156
     /tmp/ccS15VAs.s:5097   .debug_str:0000000000000b20 .LASF157
     /tmp/ccS15VAs.s:5173   .debug_str:0000000000000d26 .LASF158
     /tmp/ccS15VAs.s:4909   .debug_str:00000000000004f9 .LASF159
     /tmp/ccS15VAs.s:4961   .debug_str:0000000000000780 .LASF160
     /tmp/ccS15VAs.s:4995   .debug_str:000000000000084f .LASF161
     /tmp/ccS15VAs.s:5117   .debug_str:0000000000000b7f .LASF216
     /tmp/ccS15VAs.s:4847   .debug_str:0000000000000309 .LASF162
     /tmp/ccS15VAs.s:5151   .debug_str:0000000000000c7c .LASF163
     /tmp/ccS15VAs.s:5165   .debug_str:0000000000000cf0 .LASF164
     /tmp/ccS15VAs.s:4957   .debug_str:0000000000000745 .LASF165
     /tmp/ccS15VAs.s:5115   .debug_str:0000000000000b75 .LASF166
     /tmp/ccS15VAs.s:4779   .debug_str:00000000000000e7 .LASF167
     /tmp/ccS15VAs.s:4893   .debug_str:000000000000047d .LASF168
     /tmp/ccS15VAs.s:4853   .debug_str:0000000000000339 .LASF169
     /tmp/ccS15VAs.s:5061   .debug_str:0000000000000a23 .LASF170
     /tmp/ccS15VAs.s:5095   .debug_str:0000000000000af5 .LASF171
     /tmp/ccS15VAs.s:4921   .debug_str:0000000000000626 .LASF172
     /tmp/ccS15VAs.s:5157   .debug_str:0000000000000c98 .LASF173
     /tmp/ccS15VAs.s:4881   .debug_str:0000000000000437 .LASF174
     /tmp/ccS15VAs.s:4787   .debug_str:000000000000013a .LASF175
     /tmp/ccS15VAs.s:5059   .debug_str:0000000000000a0c .LASF177
     /tmp/ccS15VAs.s:4785   .debug_str:0000000000000121 .LASF178
     /tmp/ccS15VAs.s:4907   .debug_str:00000000000004dd .LASF179
     /tmp/ccS15VAs.s:5121   .debug_str:0000000000000b95 .LASF180
     /tmp/ccS15VAs.s:4981   .debug_str:00000000000007e5 .LASF182
     /tmp/ccS15VAs.s:4771   .debug_str:0000000000000090 .LASF184
     /tmp/ccS15VAs.s:49     .text:0000000000000020 .LFB44
     /tmp/ccS15VAs.s:861    .text:0000000000000390 .LFE44
     /tmp/ccS15VAs.s:4263   .debug_loc:0000000000000000 .LLST0
     /tmp/ccS15VAs.s:4274   .debug_loc:0000000000000036 .LLST1
     /tmp/ccS15VAs.s:4293   .debug_loc:0000000000000092 .LLST2
     /tmp/ccS15VAs.s:4364   .debug_loc:00000000000001e5 .LLST3
     /tmp/ccS15VAs.s:4819   .debug_str:000000000000023f .LASF185
     /tmp/ccS15VAs.s:4435   .debug_loc:0000000000000338 .LLST4
     /tmp/ccS15VAs.s:4725   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccS15VAs.s:5107   .debug_str:0000000000000b48 .LASF186
     /tmp/ccS15VAs.s:4883   .debug_str:0000000000000441 .LASF187
     /tmp/ccS15VAs.s:4540   .debug_loc:00000000000004bc .LLST8
     /tmp/ccS15VAs.s:5099   .debug_str:0000000000000b2b .LASF188
     /tmp/ccS15VAs.s:4593   .debug_loc:00000000000005a3 .LLST9
     /tmp/ccS15VAs.s:435    .text:0000000000000180 .LVL33
     /tmp/ccS15VAs.s:4604   .debug_loc:00000000000005d9 .LLST10
GAS LISTING /tmp/ccS15VAs.s 			page 36


     /tmp/ccS15VAs.s:476    .text:00000000000001c8 .LBB70
     /tmp/ccS15VAs.s:489    .text:00000000000001d8 .LBE70
     /tmp/ccS15VAs.s:4611   .debug_loc:00000000000005fc .LLST11
     /tmp/ccS15VAs.s:486    .text:00000000000001d8 .LVL39
     /tmp/ccS15VAs.s:456    .text:0000000000000198 .LVL35
     /tmp/ccS15VAs.s:468    .text:00000000000001c0 .LVL36
     /tmp/ccS15VAs.s:493    .text:00000000000001e4 .LVL40
     /tmp/ccS15VAs.s:4618   .debug_loc:000000000000061f .LLST12
     /tmp/ccS15VAs.s:531    .text:0000000000000208 .LVL45
     /tmp/ccS15VAs.s:550    .text:0000000000000224 .LVL47
     /tmp/ccS15VAs.s:555    .text:0000000000000230 .LVL48
     /tmp/ccS15VAs.s:560    .text:0000000000000240 .LVL49
     /tmp/ccS15VAs.s:565    .text:0000000000000250 .LVL50
     /tmp/ccS15VAs.s:570    .text:000000000000025c .LVL51
     /tmp/ccS15VAs.s:575    .text:000000000000026c .LVL52
     /tmp/ccS15VAs.s:590    .text:0000000000000278 .LBB76
     /tmp/ccS15VAs.s:603    .text:0000000000000290 .LBE76
     /tmp/ccS15VAs.s:4625   .debug_loc:0000000000000642 .LLST13
     /tmp/ccS15VAs.s:597    .text:0000000000000284 .LVL56
     /tmp/ccS15VAs.s:602    .text:0000000000000290 .LVL57
     /tmp/ccS15VAs.s:617    .text:0000000000000298 .LBB77
     /tmp/ccS15VAs.s:628    .text:00000000000002a8 .LBE77
     /tmp/ccS15VAs.s:4632   .debug_loc:0000000000000665 .LLST14
     /tmp/ccS15VAs.s:624    .text:00000000000002a4 .LVL60
     /tmp/ccS15VAs.s:635    .text:00000000000002ac .LBB78
     /tmp/ccS15VAs.s:643    .text:00000000000002b8 .LBE78
     /tmp/ccS15VAs.s:4639   .debug_loc:0000000000000688 .LLST15
     /tmp/ccS15VAs.s:642    .text:00000000000002b8 .LVL64
     /tmp/ccS15VAs.s:657    .text:00000000000002c0 .LBB79
     /tmp/ccS15VAs.s:666    .text:00000000000002cc .LBE79
     /tmp/ccS15VAs.s:5005   .debug_str:0000000000000897 .LASF189
     /tmp/ccS15VAs.s:4646   .debug_loc:00000000000006ab .LLST16
     /tmp/ccS15VAs.s:4993   .debug_str:000000000000083e .LASF190
     /tmp/ccS15VAs.s:4653   .debug_loc:00000000000006ce .LLST17
     /tmp/ccS15VAs.s:665    .text:00000000000002cc .LVL67
     /tmp/ccS15VAs.s:168    .text:000000000000009c .LBB62
     /tmp/ccS15VAs.s:184    .text:00000000000000a8 .LBE62
     /tmp/ccS15VAs.s:169    .text:000000000000009c .LBB63
     /tmp/ccS15VAs.s:183    .text:00000000000000a8 .LBE63
     /tmp/ccS15VAs.s:190    .text:00000000000000b0 .LBB64
     /tmp/ccS15VAs.s:205    .text:00000000000000bc .LBE64
     /tmp/ccS15VAs.s:191    .text:00000000000000b0 .LBB65
     /tmp/ccS15VAs.s:204    .text:00000000000000bc .LBE65
     /tmp/ccS15VAs.s:325    .text:0000000000000108 .LBB93
     /tmp/ccS15VAs.s:336    .text:000000000000010c .LBE93
     /tmp/ccS15VAs.s:4676   .debug_loc:000000000000071f .LLST18
     /tmp/ccS15VAs.s:341    .text:0000000000000110 .LBB95
     /tmp/ccS15VAs.s:353    .text:0000000000000114 .LBE95
     /tmp/ccS15VAs.s:4683   .debug_loc:0000000000000742 .LLST19
     /tmp/ccS15VAs.s:299    .text:00000000000000ec .LVL15
     /tmp/ccS15VAs.s:302    .text:00000000000000f8 .LVL16
     /tmp/ccS15VAs.s:381    .text:0000000000000134 .LVL23
     /tmp/ccS15VAs.s:384    .text:0000000000000140 .LVL24
     /tmp/ccS15VAs.s:396    .text:0000000000000150 .LVL27
     /tmp/ccS15VAs.s:398    .text:0000000000000158 .LVL28
     /tmp/ccS15VAs.s:414    .text:0000000000000168 .LVL30
     /tmp/ccS15VAs.s:416    .text:0000000000000170 .LVL31
GAS LISTING /tmp/ccS15VAs.s 			page 37


     /tmp/ccS15VAs.s:510    .text:00000000000001f4 .LVL42
     /tmp/ccS15VAs.s:682    .text:00000000000002dc .LVL69
     /tmp/ccS15VAs.s:696    .text:00000000000002f0 .LVL73
     /tmp/ccS15VAs.s:777    .text:000000000000034c .LBB52
     /tmp/ccS15VAs.s:855    .text:0000000000000390 .LBE52
     /tmp/ccS15VAs.s:779    .text:000000000000034c .LBB53
     /tmp/ccS15VAs.s:794    .text:0000000000000358 .LBE53
     /tmp/ccS15VAs.s:780    .text:000000000000034c .LBB54
     /tmp/ccS15VAs.s:793    .text:0000000000000358 .LBE54
     /tmp/ccS15VAs.s:798    .text:000000000000035c .LBB55
     /tmp/ccS15VAs.s:813    .text:0000000000000368 .LBE55
     /tmp/ccS15VAs.s:799    .text:000000000000035c .LBB56
     /tmp/ccS15VAs.s:812    .text:0000000000000368 .LBE56
     /tmp/ccS15VAs.s:827    .text:0000000000000380 .LBB57
     /tmp/ccS15VAs.s:838    .text:0000000000000384 .LBE57
     /tmp/ccS15VAs.s:4690   .debug_loc:0000000000000765 .LLST7
     /tmp/ccS15VAs.s:843    .text:0000000000000388 .LBB59
     /tmp/ccS15VAs.s:854    .text:0000000000000390 .LBE59
     /tmp/ccS15VAs.s:822    .text:000000000000037c .LVL83
     /tmp/ccS15VAs.s:116    .text:0000000000000058 .LBB42
     /tmp/ccS15VAs.s:133    .text:0000000000000064 .LBE42
     /tmp/ccS15VAs.s:117    .text:0000000000000058 .LBB43
     /tmp/ccS15VAs.s:132    .text:0000000000000064 .LBE43
     /tmp/ccS15VAs.s:735    .text:0000000000000310 .LBB47
     /tmp/ccS15VAs.s:747    .text:0000000000000318 .LBE47
     /tmp/ccS15VAs.s:4697   .debug_loc:0000000000000788 .LLST5
     /tmp/ccS15VAs.s:765    .text:0000000000000340 .LBB50
     /tmp/ccS15VAs.s:772    .text:0000000000000344 .LBE50
     /tmp/ccS15VAs.s:4705   .debug_loc:00000000000007ac .LLST6
     /tmp/ccS15VAs.s:158    .text:0000000000000098 .LVL10
     /tmp/ccS15VAs.s:758    .text:0000000000000334 .LVL80
     /tmp/ccS15VAs.s:13     .text:0000000000000000 .LFB43
     /tmp/ccS15VAs.s:43     .text:0000000000000020 .LFE43
     /tmp/ccS15VAs.s:4857   .debug_str:0000000000000369 .LASF191
     /tmp/ccS15VAs.s:4773   .debug_str:00000000000000cb .LASF192
     /tmp/ccS15VAs.s:4925   .debug_str:000000000000064a .LASF217
     /tmp/ccS15VAs.s:5139   .debug_str:0000000000000c37 .LASF193
     /tmp/ccS15VAs.s:4983   .debug_str:00000000000007f7 .LASF194
     /tmp/ccS15VAs.s:4849   .debug_str:000000000000030f .LASF196
     /tmp/ccS15VAs.s:4757   .debug_str:0000000000000017 .LASF198
     /tmp/ccS15VAs.s:5013   .debug_str:00000000000008c8 .LASF200
     /tmp/ccS15VAs.s:5141   .debug_str:0000000000000c3c .LASF195
     /tmp/ccS15VAs.s:4761   .debug_str:000000000000002a .LASF197
     /tmp/ccS15VAs.s:4783   .debug_str:000000000000010e .LASF199
     /tmp/ccS15VAs.s:5155   .debug_str:0000000000000c8c .LASF201
     /tmp/ccS15VAs.s:4947   .debug_str:00000000000006d0 .LASF202
     /tmp/ccS15VAs.s:4887   .debug_str:0000000000000454 .LASF203
     /tmp/ccS15VAs.s:4941   .debug_str:00000000000006b7 .LASF204
     /tmp/ccS15VAs.s:4821   .debug_str:0000000000000246 .LASF205
     /tmp/ccS15VAs.s:71     .text:000000000000003c .LVL0
     /tmp/ccS15VAs.s:146    .text:0000000000000074 .LVL9
     /tmp/ccS15VAs.s:163    .text:000000000000009c .LVL11
     /tmp/ccS15VAs.s:215    .text:00000000000000cc .LVL14
     /tmp/ccS15VAs.s:77     .text:0000000000000040 .LVL1
     /tmp/ccS15VAs.s:304    .text:00000000000000fc .LVL17
     /tmp/ccS15VAs.s:370    .text:000000000000012c .LVL22
     /tmp/ccS15VAs.s:472    .text:00000000000001c4 .LVL37
GAS LISTING /tmp/ccS15VAs.s 			page 38


     /tmp/ccS15VAs.s:503    .text:00000000000001ec .LVL41
     /tmp/ccS15VAs.s:721    .text:0000000000000308 .LVL76
     /tmp/ccS15VAs.s:729    .text:0000000000000310 .LVL77
     /tmp/ccS15VAs.s:751    .text:0000000000000320 .LVL79
     /tmp/ccS15VAs.s:83     .text:0000000000000044 .LVL2
     /tmp/ccS15VAs.s:390    .text:0000000000000148 .LVL26
     /tmp/ccS15VAs.s:408    .text:0000000000000160 .LVL29
     /tmp/ccS15VAs.s:426    .text:0000000000000178 .LVL32
     /tmp/ccS15VAs.s:446    .text:0000000000000190 .LVL34
     /tmp/ccS15VAs.s:520    .text:00000000000001fc .LVL43
     /tmp/ccS15VAs.s:529    .text:0000000000000200 .LVL44
     /tmp/ccS15VAs.s:585    .text:0000000000000278 .LVL54
     /tmp/ccS15VAs.s:595    .text:000000000000027c .LVL55
     /tmp/ccS15VAs.s:613    .text:0000000000000298 .LVL58
     /tmp/ccS15VAs.s:622    .text:000000000000029c .LVL59
     /tmp/ccS15VAs.s:631    .text:00000000000002ac .LVL62
     /tmp/ccS15VAs.s:640    .text:00000000000002b0 .LVL63
     /tmp/ccS15VAs.s:653    .text:00000000000002c0 .LVL65
     /tmp/ccS15VAs.s:663    .text:00000000000002c4 .LVL66
     /tmp/ccS15VAs.s:676    .text:00000000000002d4 .LVL68
     /tmp/ccS15VAs.s:688    .text:00000000000002e4 .LVL71
     /tmp/ccS15VAs.s:694    .text:00000000000002e8 .LVL72
     /tmp/ccS15VAs.s:706    .text:00000000000002f8 .LVL74
     /tmp/ccS15VAs.s:713    .text:0000000000000300 .LVL75
     /tmp/ccS15VAs.s:89     .text:0000000000000048 .LVL3
     /tmp/ccS15VAs.s:131    .text:0000000000000064 .LVL8
     /tmp/ccS15VAs.s:177    .text:00000000000000a0 .LVL12
     /tmp/ccS15VAs.s:209    .text:00000000000000c0 .LVL13
     /tmp/ccS15VAs.s:349    .text:0000000000000114 .LVL21
     /tmp/ccS15VAs.s:387    .text:0000000000000144 .LVL25
     /tmp/ccS15VAs.s:542    .text:0000000000000214 .LVL46
     /tmp/ccS15VAs.s:579    .text:0000000000000270 .LVL53
     /tmp/ccS15VAs.s:627    .text:00000000000002a8 .LVL61
     /tmp/ccS15VAs.s:685    .text:00000000000002e0 .LVL70
     /tmp/ccS15VAs.s:475    .text:00000000000001c8 .LVL38
     /tmp/ccS15VAs.s:324    .text:0000000000000108 .LVL18
     /tmp/ccS15VAs.s:333    .text:000000000000010c .LVL19
     /tmp/ccS15VAs.s:340    .text:0000000000000110 .LVL20
     /tmp/ccS15VAs.s:826    .text:0000000000000380 .LVL84
     /tmp/ccS15VAs.s:835    .text:0000000000000384 .LVL85
     /tmp/ccS15VAs.s:744    .text:0000000000000318 .LVL78
     /tmp/ccS15VAs.s:764    .text:0000000000000340 .LVL81
     /tmp/ccS15VAs.s:770    .text:0000000000000344 .LVL82
     /tmp/ccS15VAs.s:887    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccS15VAs.s:166    .text:000000000000009c .LBB61
     /tmp/ccS15VAs.s:354    .text:0000000000000114 .LBE61
     /tmp/ccS15VAs.s:374    .text:000000000000012c .LBB109
     /tmp/ccS15VAs.s:731    .text:0000000000000310 .LBE109
     /tmp/ccS15VAs.s:430    .text:0000000000000178 .LBB68
     /tmp/ccS15VAs.s:440    .text:0000000000000188 .LBE68
     /tmp/ccS15VAs.s:717    .text:0000000000000300 .LBB80
     /tmp/ccS15VAs.s:723    .text:0000000000000308 .LBE80
     /tmp/ccS15VAs.s:452    .text:0000000000000190 .LBB69
     /tmp/ccS15VAs.s:494    .text:00000000000001e4 .LBE69
     /tmp/ccS15VAs.s:501    .text:00000000000001e8 .LBB72
     /tmp/ccS15VAs.s:505    .text:00000000000001ec .LBE72
     /tmp/ccS15VAs.s:524    .text:00000000000001fc .LBB73
GAS LISTING /tmp/ccS15VAs.s 			page 39


     /tmp/ccS15VAs.s:536    .text:0000000000000210 .LBE73
     /tmp/ccS15VAs.s:545    .text:0000000000000214 .LBB74
     /tmp/ccS15VAs.s:576    .text:000000000000026c .LBE74
     /tmp/ccS15VAs.s:581    .text:0000000000000270 .LBB75
     /tmp/ccS15VAs.s:587    .text:0000000000000278 .LBE75

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator11getInstanceEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB4exitEv
_ZN3TCB7runningE
_Z6assertbPKc
_ZdaPv
_ZdlPv
_ZN3TCB8dispatchEv
_ZN10_semaphore4openEj
_Z11debug_printPKc
_Z11debug_printm
_ZN10_semaphore5closeEv
_ZN10_semaphore4waitEv
_ZN10_semaphore6signalEv
_ZN9Scheduler10putToSleepEm
__getc
__putc
_ZN3TCB16timeSliceCounterE
_ZN9Scheduler16maybeWakeThreadsEv
