GAS LISTING /tmp/ccRu9p8m.s 			page 1


   1              		.file	"main.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_Z15userMainWrapperPv
  12              	_Z15userMainWrapperPv:
  13              	.LFB73:
  14              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by marko on 20.4.22..
   3:src/main.cpp  **** //
   4:src/main.cpp  **** 
   5:src/main.cpp  **** #include "../h/tcb.hpp"
   6:src/main.cpp  **** #include "../h/workers.hpp"
   7:src/main.cpp  **** #include "../h/print.hpp"
   8:src/main.cpp  **** #include "../h/riscv.hpp"
   9:src/main.cpp  **** #include "../h/syscall_c.h"
  10:src/main.cpp  **** #include "../h/syscall_cpp.hpp"
  11:src/main.cpp  **** 
  12:src/main.cpp  **** void userMain();
  13:src/main.cpp  **** 
  14:src/main.cpp  **** void userMainWrapper(void* arg)
  15:src/main.cpp  **** {
  15              		.loc 1 15 1
  16              		.cfi_startproc
  17              	.LVL0:
  18 0000 130101FF 		addi	sp,sp,-16
  19              		.cfi_def_cfa_offset 16
  20 0004 23341100 		sd	ra,8(sp)
  21 0008 23308100 		sd	s0,0(sp)
  22              		.cfi_offset 1, -8
  23              		.cfi_offset 8, -16
  24 000c 13040101 		addi	s0,sp,16
  25              		.cfi_def_cfa 8, 0
  16:src/main.cpp  ****     debug_print("Starting userMain\n");
  26              		.loc 1 16 5
  27              		.loc 1 16 16 is_stmt 0
  28 0010 17050000 		lla	a0,.LC0
  28      13050500 
  29              	.LVL1:
  30 0018 97000000 		call	_Z11debug_printPKc
  30      E7800000 
  31              	.LVL2:
  17:src/main.cpp  ****     userMain();
  32              		.loc 1 17 5 is_stmt 1
  33              		.loc 1 17 13 is_stmt 0
  34 0020 97000000 		call	_Z8userMainv
  34      E7800000 
  35              	.LVL3:
  18:src/main.cpp  **** }
  36              		.loc 1 18 1
  37 0028 83308100 		ld	ra,8(sp)
GAS LISTING /tmp/ccRu9p8m.s 			page 2


  38              		.cfi_restore 1
  39 002c 03340100 		ld	s0,0(sp)
  40              		.cfi_restore 8
  41              		.cfi_def_cfa 2, 16
  42 0030 13010101 		addi	sp,sp,16
  43              		.cfi_def_cfa_offset 0
  44 0034 67800000 		jr	ra
  45              		.cfi_endproc
  46              	.LFE73:
  48              		.align	2
  49              		.globl	main
  51              	main:
  52              	.LFB74:
  19:src/main.cpp  **** 
  20:src/main.cpp  **** // void randomWrapper(void* arg) {
  21:src/main.cpp  **** //     debug_print("Starting random\n");
  22:src/main.cpp  **** // }
  23:src/main.cpp  **** 
  24:src/main.cpp  **** int main()
  25:src/main.cpp  **** {
  53              		.loc 1 25 1 is_stmt 1
  54              		.cfi_startproc
  55 0038 130101FE 		addi	sp,sp,-32
  56              		.cfi_def_cfa_offset 32
  57 003c 233C1100 		sd	ra,24(sp)
  58 0040 23388100 		sd	s0,16(sp)
  59 0044 23349100 		sd	s1,8(sp)
  60 0048 23302101 		sd	s2,0(sp)
  61              		.cfi_offset 1, -8
  62              		.cfi_offset 8, -16
  63              		.cfi_offset 9, -24
  64              		.cfi_offset 18, -32
  65 004c 13040102 		addi	s0,sp,32
  66              		.cfi_def_cfa 8, 0
  26:src/main.cpp  ****     thread_t main_handle;
  67              		.loc 1 26 5
  27:src/main.cpp  ****     thread_t userMain_handle;
  68              		.loc 1 27 5
  28:src/main.cpp  **** 
  29:src/main.cpp  ****     // We create threads directly through TCB because we do not yet have
  30:src/main.cpp  ****     // interrupts enabled.
  31:src/main.cpp  ****     debug_print("Creating main thread\n");
  69              		.loc 1 31 5
  70              		.loc 1 31 16 is_stmt 0
  71 0050 17050000 		lla	a0,.LC1
  71      13050500 
  72 0058 97000000 		call	_Z11debug_printPKc
  72      E7800000 
  73              	.LVL4:
  32:src/main.cpp  ****     main_handle = TCB::createThread(nullptr, nullptr);
  74              		.loc 1 32 5 is_stmt 1
  75              		.loc 1 32 36 is_stmt 0
  76 0060 93050000 		li	a1,0
  77 0064 13050000 		li	a0,0
  78 0068 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_
  78      E7800000 
  79              	.LVL5:
GAS LISTING /tmp/ccRu9p8m.s 			page 3


  80 0070 13090500 		mv	s2,a0
  81              	.LVL6:
  33:src/main.cpp  ****     debug_print("Main thread handle: \n");
  82              		.loc 1 33 5 is_stmt 1
  83              		.loc 1 33 16 is_stmt 0
  84 0074 17050000 		lla	a0,.LC2
  84      13050500 
  85              	.LVL7:
  86 007c 97000000 		call	_Z11debug_printPKc
  86      E7800000 
  87              	.LVL8:
  34:src/main.cpp  ****     debug_print((uint64)main_handle);
  88              		.loc 1 34 5 is_stmt 1
  89              		.loc 1 34 16 is_stmt 0
  90 0084 13050900 		mv	a0,s2
  91 0088 97000000 		call	_Z11debug_printm
  91      E7800000 
  92              	.LVL9:
  35:src/main.cpp  ****     debug_print("\n");
  93              		.loc 1 35 5 is_stmt 1
  94              		.loc 1 35 16 is_stmt 0
  95 0090 17050000 		lla	a0,.LC3
  95      13050500 
  96 0098 97000000 		call	_Z11debug_printPKc
  96      E7800000 
  97              	.LVL10:
  36:src/main.cpp  **** 
  37:src/main.cpp  ****     debug_print("Creating userMain thread\n");
  98              		.loc 1 37 5 is_stmt 1
  99              		.loc 1 37 16 is_stmt 0
 100 00a0 17050000 		lla	a0,.LC4
 100      13050500 
 101 00a8 97000000 		call	_Z11debug_printPKc
 101      E7800000 
 102              	.LVL11:
  38:src/main.cpp  ****     userMain_handle = TCB::createThread(userMainWrapper, nullptr);
 103              		.loc 1 38 5 is_stmt 1
 104              		.loc 1 38 40 is_stmt 0
 105 00b0 93050000 		li	a1,0
 106 00b4 17050000 		lla	a0,_Z15userMainWrapperPv
 106      13050500 
 107 00bc 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_
 107      E7800000 
 108              	.LVL12:
 109 00c4 93040500 		mv	s1,a0
 110              	.LVL13:
  39:src/main.cpp  ****     debug_print("UserMain thread handle: \n");
 111              		.loc 1 39 5 is_stmt 1
 112              		.loc 1 39 16 is_stmt 0
 113 00c8 17050000 		lla	a0,.LC5
 113      13050500 
 114 00d0 97000000 		call	_Z11debug_printPKc
 114      E7800000 
 115              	.LVL14:
  40:src/main.cpp  ****     debug_print((uint64)userMain_handle);
 116              		.loc 1 40 5 is_stmt 1
 117              		.loc 1 40 16 is_stmt 0
GAS LISTING /tmp/ccRu9p8m.s 			page 4


 118 00d8 13850400 		mv	a0,s1
 119 00dc 97000000 		call	_Z11debug_printm
 119      E7800000 
 120              	.LVL15:
  41:src/main.cpp  ****     debug_print("\n");
 121              		.loc 1 41 5 is_stmt 1
 122              		.loc 1 41 16 is_stmt 0
 123 00e4 17050000 		lla	a0,.LC3
 123      13050500 
 124 00ec 97000000 		call	_Z11debug_printPKc
 124      E7800000 
 125              	.LVL16:
  42:src/main.cpp  **** 
  43:src/main.cpp  ****     debug_print("Setting running to main thread\n");
 126              		.loc 1 43 5 is_stmt 1
 127              		.loc 1 43 16 is_stmt 0
 128 00f4 17050000 		lla	a0,.LC6
 128      13050500 
 129 00fc 97000000 		call	_Z11debug_printPKc
 129      E7800000 
 130              	.LVL17:
  44:src/main.cpp  ****     TCB::running = main_handle;
 131              		.loc 1 44 5 is_stmt 1
 132              		.loc 1 44 18 is_stmt 0
 133 0104 97070000 		sd	s2,_ZN3TCB7runningE,a5
 133      23B02701 
  45:src/main.cpp  **** 
  46:src/main.cpp  ****     debug_print("Setting supervisor trap and enabling interrupts\n");
 134              		.loc 1 46 5 is_stmt 1
 135              		.loc 1 46 16 is_stmt 0
 136 010c 17050000 		lla	a0,.LC7
 136      13050500 
 137 0114 97000000 		call	_Z11debug_printPKc
 137      E7800000 
 138              	.LVL18:
  47:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
 139              		.loc 1 47 5 is_stmt 1
 140              		.loc 1 47 19 is_stmt 0
 141 011c 97070000 		lla	a5,_ZN5Riscv14supervisorTrapEv
 141      93870700 
 142              	.LVL19:
 143              	.LBB8:
 144              	.LBB9:
 145              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** extern const size_t DEFAULT_STACK_SIZE;
  11:src/../h/riscv.hpp **** extern const time_t DEFAULT_TIME_SLICE;
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
GAS LISTING /tmp/ccRu9p8m.s 			page 5


  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register scause
  21:src/../h/riscv.hpp ****     static uint64 r_scause();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register scause
  24:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register sepc
  27:src/../h/riscv.hpp ****     static uint64 r_sepc();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register sepc
  30:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stvec
  33:src/../h/riscv.hpp ****     static uint64 r_stvec();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stvec
  36:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // read register stval
  39:src/../h/riscv.hpp ****     static uint64 r_stval();
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // write register stval
  42:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     enum BitMaskSip
  45:src/../h/riscv.hpp ****     {
  46:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  47:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  48:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  49:src/../h/riscv.hpp ****     };
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask set register sip
  52:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // mask clear register sip
  55:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // read register sip
  58:src/../h/riscv.hpp ****     static uint64 r_sip();
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // write register sip
  61:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     enum BitMaskSstatus
  64:src/../h/riscv.hpp ****     {
  65:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  66:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  67:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  68:src/../h/riscv.hpp ****     };
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask set register sstatus
GAS LISTING /tmp/ccRu9p8m.s 			page 6


  71:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // mask clear register sstatus
  74:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // read register sstatus
  77:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // write register sstatus
  80:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // supervisor trap
  83:src/../h/riscv.hpp ****     static void supervisorTrap();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** private:
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     // supervisor trap handler
  88:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp **** };
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/riscv.hpp **** {
  94:src/../h/riscv.hpp ****     uint64 volatile scause;
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  96:src/../h/riscv.hpp ****     return scause;
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile sepc;
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 108:src/../h/riscv.hpp ****     return sepc;
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/riscv.hpp ****     return stvec;
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 146              		.loc 2 125 5 is_stmt 1
 147              		.loc 2 125 69 is_stmt 0
GAS LISTING /tmp/ccRu9p8m.s 			page 7


 148              	 #APP
 149              	# 125 "src/../h/riscv.hpp" 1
 126              	}
 150              		csrw stvec, a5
 151              	# 0 "" 2
 152              	.LVL20:
 153              	 #NO_APP
 154              	.LBE9:
 155              	.LBE8:
  48:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
 156              		.loc 1 48 5 is_stmt 1
 157              	.LBB10:
 158              	.LBB11:
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stval;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/riscv.hpp ****     return stval;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/riscv.hpp **** }
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     uint64 volatile sip;
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/riscv.hpp ****     return sip;
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 159              		.loc 2 164 5
 160              		.loc 2 164 68 is_stmt 0
 161 0128 93072000 		li	a5,2
 162              	 #APP
 163              	# 164 "src/../h/riscv.hpp" 1
 165              	}
GAS LISTING /tmp/ccRu9p8m.s 			page 8


 164              		csrs sstatus, a5
 165              	# 0 "" 2
 166              	 #NO_APP
 167              	.L4:
 168              	.LBE11:
 169              	.LBE10:
  49:src/main.cpp  **** 
  50:src/main.cpp  ****     // Thread randomThread(randomWrapper, nullptr);
  51:src/main.cpp  ****     // randomThread.start();
  52:src/main.cpp  **** 
  53:src/main.cpp  ****     while (!userMain_handle->isFinished()) {
 170              		.loc 1 53 5 is_stmt 1
 171              	.LVL21:
 172              	.LBB12:
 173              	.LBB13:
 174              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished_; }
 175              		.loc 3 17 31
 176              		.loc 3 17 38 is_stmt 0
 177 0130 83C70403 		lbu	a5,48(s1)
 178              	.LVL22:
 179              	.LBE13:
 180              	.LBE12:
 181              		.loc 1 53 12
 182 0134 E38E07FE 		beq	a5,zero,.L4
  54:src/main.cpp  ****         // TCB::yield(); // This causes a lock???
  55:src/main.cpp  ****     }
  56:src/main.cpp  **** 
  57:src/main.cpp  ****     debug_print("Finished\n");
 183              		.loc 1 57 5 is_stmt 1
 184              		.loc 1 57 16 is_stmt 0
 185 0138 17050000 		lla	a0,.LC8
 185      13050500 
 186 0140 97000000 		call	_Z11debug_printPKc
 186      E7800000 
 187              	.LVL23:
  58:src/main.cpp  **** 
  59:src/main.cpp  ****     return 0;
 188              		.loc 1 59 5 is_stmt 1
  60:src/main.cpp  **** }
 189              		.loc 1 60 1 is_stmt 0
GAS LISTING /tmp/ccRu9p8m.s 			page 9


 190 0148 13050000 		li	a0,0
 191 014c 83308101 		ld	ra,24(sp)
 192              		.cfi_restore 1
 193 0150 03340101 		ld	s0,16(sp)
 194              		.cfi_restore 8
 195              		.cfi_def_cfa 2, 32
 196 0154 83348100 		ld	s1,8(sp)
 197              		.cfi_restore 9
 198              	.LVL24:
 199 0158 03390100 		ld	s2,0(sp)
 200              		.cfi_restore 18
 201              	.LVL25:
 202 015c 13010102 		addi	sp,sp,32
 203              		.cfi_def_cfa_offset 0
 204 0160 67800000 		jr	ra
 205              		.cfi_endproc
 206              	.LFE74:
 208              		.section	.rodata.str1.8,"aMS",@progbits,1
 209              		.align	3
 210              	.LC0:
 211 0000 53746172 		.string	"Starting userMain\n"
 211      74696E67 
 211      20757365 
 211      724D6169 
 211      6E0A00
 212 0013 00000000 		.zero	5
 212      00
 213              	.LC1:
 214 0018 43726561 		.string	"Creating main thread\n"
 214      74696E67 
 214      206D6169 
 214      6E207468 
 214      72656164 
 215 002e 0000     		.zero	2
 216              	.LC2:
 217 0030 4D61696E 		.string	"Main thread handle: \n"
 217      20746872 
 217      65616420 
 217      68616E64 
 217      6C653A20 
 218 0046 0000     		.zero	2
 219              	.LC3:
 220 0048 0A00     		.string	"\n"
 221 004a 00000000 		.zero	6
 221      0000
 222              	.LC4:
 223 0050 43726561 		.string	"Creating userMain thread\n"
 223      74696E67 
 223      20757365 
 223      724D6169 
 223      6E207468 
 224 006a 00000000 		.zero	6
 224      0000
 225              	.LC5:
 226 0070 55736572 		.string	"UserMain thread handle: \n"
 226      4D61696E 
 226      20746872 
GAS LISTING /tmp/ccRu9p8m.s 			page 10


 226      65616420 
 226      68616E64 
 227 008a 00000000 		.zero	6
 227      0000
 228              	.LC6:
 229 0090 53657474 		.string	"Setting running to main thread\n"
 229      696E6720 
 229      72756E6E 
 229      696E6720 
 229      746F206D 
 230              	.LC7:
 231 00b0 53657474 		.string	"Setting supervisor trap and enabling interrupts\n"
 231      696E6720 
 231      73757065 
 231      72766973 
 231      6F722074 
 232 00e1 00000000 		.zero	7
 232      000000
 233              	.LC8:
 234 00e8 46696E69 		.string	"Finished\n"
 234      73686564 
 234      0A00
 235              		.text
 236              	.Letext0:
 237              		.file 4 "src/../h/../lib/hw.h"
 238              		.file 5 "src/../h/scheduler.hpp"
 239              		.file 6 "src/../h/print.hpp"
 240              		.file 7 "src/../h/syscall_c.h"
GAS LISTING /tmp/ccRu9p8m.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccRu9p8m.s:12     .text:0000000000000000 _Z15userMainWrapperPv
     /tmp/ccRu9p8m.s:16     .text:0000000000000000 .L0 
     /tmp/ccRu9p8m.s:18     .text:0000000000000000 .L0 
     /tmp/ccRu9p8m.s:19     .text:0000000000000004 .L0 
     /tmp/ccRu9p8m.s:22     .text:000000000000000c .L0 
     /tmp/ccRu9p8m.s:23     .text:000000000000000c .L0 
     /tmp/ccRu9p8m.s:25     .text:0000000000000010 .L0 
     /tmp/ccRu9p8m.s:27     .text:0000000000000010 .L0 
     /tmp/ccRu9p8m.s:28     .text:0000000000000010 .L0 
     /tmp/ccRu9p8m.s:33     .text:0000000000000020 .L0 
     /tmp/ccRu9p8m.s:34     .text:0000000000000020 .L0 
     /tmp/ccRu9p8m.s:37     .text:0000000000000028 .L0 
     /tmp/ccRu9p8m.s:38     .text:000000000000002c .L0 
     /tmp/ccRu9p8m.s:40     .text:0000000000000030 .L0 
     /tmp/ccRu9p8m.s:41     .text:0000000000000030 .L0 
     /tmp/ccRu9p8m.s:43     .text:0000000000000034 .L0 
     /tmp/ccRu9p8m.s:45     .text:0000000000000038 .L0 
     /tmp/ccRu9p8m.s:51     .text:0000000000000038 main
     /tmp/ccRu9p8m.s:54     .text:0000000000000038 .L0 
     /tmp/ccRu9p8m.s:55     .text:0000000000000038 .L0 
     /tmp/ccRu9p8m.s:56     .text:000000000000003c .L0 
     /tmp/ccRu9p8m.s:61     .text:000000000000004c .L0 
     /tmp/ccRu9p8m.s:62     .text:000000000000004c .L0 
     /tmp/ccRu9p8m.s:63     .text:000000000000004c .L0 
     /tmp/ccRu9p8m.s:64     .text:000000000000004c .L0 
     /tmp/ccRu9p8m.s:66     .text:0000000000000050 .L0 
     /tmp/ccRu9p8m.s:68     .text:0000000000000050 .L0 
     /tmp/ccRu9p8m.s:69     .text:0000000000000050 .L0 
     /tmp/ccRu9p8m.s:70     .text:0000000000000050 .L0 
     /tmp/ccRu9p8m.s:71     .text:0000000000000050 .L0 
     /tmp/ccRu9p8m.s:75     .text:0000000000000060 .L0 
     /tmp/ccRu9p8m.s:76     .text:0000000000000060 .L0 
     /tmp/ccRu9p8m.s:83     .text:0000000000000074 .L0 
     /tmp/ccRu9p8m.s:84     .text:0000000000000074 .L0 
     /tmp/ccRu9p8m.s:89     .text:0000000000000084 .L0 
     /tmp/ccRu9p8m.s:90     .text:0000000000000084 .L0 
     /tmp/ccRu9p8m.s:94     .text:0000000000000090 .L0 
     /tmp/ccRu9p8m.s:95     .text:0000000000000090 .L0 
     /tmp/ccRu9p8m.s:99     .text:00000000000000a0 .L0 
     /tmp/ccRu9p8m.s:100    .text:00000000000000a0 .L0 
     /tmp/ccRu9p8m.s:104    .text:00000000000000b0 .L0 
     /tmp/ccRu9p8m.s:105    .text:00000000000000b0 .L0 
     /tmp/ccRu9p8m.s:112    .text:00000000000000c8 .L0 
     /tmp/ccRu9p8m.s:113    .text:00000000000000c8 .L0 
     /tmp/ccRu9p8m.s:117    .text:00000000000000d8 .L0 
     /tmp/ccRu9p8m.s:118    .text:00000000000000d8 .L0 
     /tmp/ccRu9p8m.s:122    .text:00000000000000e4 .L0 
     /tmp/ccRu9p8m.s:123    .text:00000000000000e4 .L0 
     /tmp/ccRu9p8m.s:127    .text:00000000000000f4 .L0 
     /tmp/ccRu9p8m.s:128    .text:00000000000000f4 .L0 
     /tmp/ccRu9p8m.s:132    .text:0000000000000104 .L0 
     /tmp/ccRu9p8m.s:133    .text:0000000000000104 .L0 
     /tmp/ccRu9p8m.s:135    .text:000000000000010c .L0 
     /tmp/ccRu9p8m.s:136    .text:000000000000010c .L0 
     /tmp/ccRu9p8m.s:140    .text:000000000000011c .L0 
GAS LISTING /tmp/ccRu9p8m.s 			page 12


     /tmp/ccRu9p8m.s:141    .text:000000000000011c .L0 
     /tmp/ccRu9p8m.s:147    .text:0000000000000124 .L0 
  src/../h/riscv.hpp:125    .text:0000000000000124 .L0 
     /tmp/ccRu9p8m.s:159    .text:0000000000000128 .L0 
     /tmp/ccRu9p8m.s:160    .text:0000000000000128 .L0 
     /tmp/ccRu9p8m.s:161    .text:0000000000000128 .L0 
     /tmp/ccRu9p8m.s:175    .text:0000000000000130 .L0 
     /tmp/ccRu9p8m.s:176    .text:0000000000000130 .L0 
     /tmp/ccRu9p8m.s:177    .text:0000000000000130 .L0 
     /tmp/ccRu9p8m.s:182    .text:0000000000000134 .L0 
     /tmp/ccRu9p8m.s:184    .text:0000000000000138 .L0 
     /tmp/ccRu9p8m.s:185    .text:0000000000000138 .L0 
     /tmp/ccRu9p8m.s:189    .text:0000000000000148 .L0 
     /tmp/ccRu9p8m.s:190    .text:0000000000000148 .L0 
     /tmp/ccRu9p8m.s:192    .text:0000000000000150 .L0 
     /tmp/ccRu9p8m.s:194    .text:0000000000000154 .L0 
     /tmp/ccRu9p8m.s:195    .text:0000000000000154 .L0 
     /tmp/ccRu9p8m.s:197    .text:0000000000000158 .L0 
     /tmp/ccRu9p8m.s:200    .text:000000000000015c .L0 
     /tmp/ccRu9p8m.s:203    .text:0000000000000160 .L0 
     /tmp/ccRu9p8m.s:205    .text:0000000000000164 .L0 
     /tmp/ccRu9p8m.s:241    .text:0000000000000164 .L0 
     /tmp/ccRu9p8m.s:210    .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccRu9p8m.s:28     .text:0000000000000010 .L0 
     /tmp/ccRu9p8m.s:213    .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccRu9p8m.s:71     .text:0000000000000050 .L0 
     /tmp/ccRu9p8m.s:216    .rodata.str1.8:0000000000000030 .LC2
     /tmp/ccRu9p8m.s:84     .text:0000000000000074 .L0 
     /tmp/ccRu9p8m.s:219    .rodata.str1.8:0000000000000048 .LC3
     /tmp/ccRu9p8m.s:95     .text:0000000000000090 .L0 
     /tmp/ccRu9p8m.s:222    .rodata.str1.8:0000000000000050 .LC4
     /tmp/ccRu9p8m.s:100    .text:00000000000000a0 .L0 
     /tmp/ccRu9p8m.s:106    .text:00000000000000b4 .L0 
     /tmp/ccRu9p8m.s:225    .rodata.str1.8:0000000000000070 .LC5
     /tmp/ccRu9p8m.s:113    .text:00000000000000c8 .L0 
     /tmp/ccRu9p8m.s:123    .text:00000000000000e4 .L0 
     /tmp/ccRu9p8m.s:228    .rodata.str1.8:0000000000000090 .LC6
     /tmp/ccRu9p8m.s:128    .text:00000000000000f4 .L0 
     /tmp/ccRu9p8m.s:133    .text:0000000000000104 .L0 
     /tmp/ccRu9p8m.s:230    .rodata.str1.8:00000000000000b0 .LC7
     /tmp/ccRu9p8m.s:136    .text:000000000000010c .L0 
     /tmp/ccRu9p8m.s:141    .text:000000000000011c .L0 
     /tmp/ccRu9p8m.s:233    .rodata.str1.8:00000000000000e8 .LC8
     /tmp/ccRu9p8m.s:185    .text:0000000000000138 .L0 
     /tmp/ccRu9p8m.s:167    .text:0000000000000130 .L4
     /tmp/ccRu9p8m.s:1228   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccRu9p8m.s:2224   .debug_str:0000000000000261 .LASF112
     /tmp/ccRu9p8m.s:2192   .debug_str:000000000000017a .LASF113
     /tmp/ccRu9p8m.s:2200   .debug_str:00000000000001a1 .LASF114
     /tmp/ccRu9p8m.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccRu9p8m.s:236    .text:0000000000000164 .Letext0
     /tmp/ccRu9p8m.s:2140   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccRu9p8m.s:2214   .debug_str:0000000000000219 .LASF0
     /tmp/ccRu9p8m.s:2230   .debug_str:000000000000034b .LASF1
     /tmp/ccRu9p8m.s:2292   .debug_str:0000000000000515 .LASF2
     /tmp/ccRu9p8m.s:2300   .debug_str:0000000000000550 .LASF4
     /tmp/ccRu9p8m.s:2220   .debug_str:0000000000000240 .LASF3
GAS LISTING /tmp/ccRu9p8m.s 			page 13


     /tmp/ccRu9p8m.s:2152   .debug_str:000000000000004c .LASF5
     /tmp/ccRu9p8m.s:2272   .debug_str:000000000000047f .LASF6
     /tmp/ccRu9p8m.s:2226   .debug_str:0000000000000325 .LASF7
     /tmp/ccRu9p8m.s:2198   .debug_str:0000000000000191 .LASF8
     /tmp/ccRu9p8m.s:2204   .debug_str:00000000000001d0 .LASF9
     /tmp/ccRu9p8m.s:2166   .debug_str:00000000000000a7 .LASF10
     /tmp/ccRu9p8m.s:2190   .debug_str:000000000000016b .LASF11
     /tmp/ccRu9p8m.s:2172   .debug_str:00000000000000dc .LASF12
     /tmp/ccRu9p8m.s:2164   .debug_str:0000000000000097 .LASF13
     /tmp/ccRu9p8m.s:2322   .debug_str:00000000000005d4 .LASF14
     /tmp/ccRu9p8m.s:2184   .debug_str:0000000000000127 .LASF15
     /tmp/ccRu9p8m.s:2312   .debug_str:000000000000058c .LASF16
     /tmp/ccRu9p8m.s:2336   .debug_str:0000000000000621 .LASF17
     /tmp/ccRu9p8m.s:2326   .debug_str:00000000000005f4 .LASF115
     /tmp/ccRu9p8m.s:2302   .debug_str:0000000000000557 .LASF18
     /tmp/ccRu9p8m.s:2150   .debug_str:0000000000000040 .LASF20
     /tmp/ccRu9p8m.s:2328   .debug_str:00000000000005fc .LASF26
     /tmp/ccRu9p8m.s:2256   .debug_str:0000000000000402 .LASF28
     /tmp/ccRu9p8m.s:2158   .debug_str:0000000000000076 .LASF19
     /tmp/ccRu9p8m.s:2352   .debug_str:000000000000068d .LASF21
     /tmp/ccRu9p8m.s:2212   .debug_str:0000000000000213 .LASF22
     /tmp/ccRu9p8m.s:2154   .debug_str:0000000000000053 .LASF23
     /tmp/ccRu9p8m.s:2146   .debug_str:0000000000000010 .LASF24
     /tmp/ccRu9p8m.s:2268   .debug_str:0000000000000468 .LASF25
     /tmp/ccRu9p8m.s:2294   .debug_str:0000000000000523 .LASF27
     /tmp/ccRu9p8m.s:2324   .debug_str:00000000000005e0 .LASF29
     /tmp/ccRu9p8m.s:2346   .debug_str:0000000000000664 .LASF30
     /tmp/ccRu9p8m.s:2262   .debug_str:0000000000000428 .LASF31
     /tmp/ccRu9p8m.s:2254   .debug_str:00000000000003f7 .LASF32
     /tmp/ccRu9p8m.s:2242   .debug_str:0000000000000398 .LASF33
     /tmp/ccRu9p8m.s:2234   .debug_str:0000000000000364 .LASF34
     /tmp/ccRu9p8m.s:2356   .debug_str:00000000000006ad .LASF35
     /tmp/ccRu9p8m.s:2320   .debug_str:00000000000005c7 .LASF36
     /tmp/ccRu9p8m.s:2358   .debug_str:00000000000006c6 .LASF37
     /tmp/ccRu9p8m.s:2270   .debug_str:000000000000047a .LASF116
     /tmp/ccRu9p8m.s:2232   .debug_str:000000000000035e .LASF59
     /tmp/ccRu9p8m.s:2338   .debug_str:000000000000062a .LASF61
     /tmp/ccRu9p8m.s:2332   .debug_str:000000000000060c .LASF117
     /tmp/ccRu9p8m.s:2280   .debug_str:00000000000004be .LASF118
     /tmp/ccRu9p8m.s:2144   .debug_str:000000000000000b .LASF38
     /tmp/ccRu9p8m.s:2378   .debug_str:0000000000000747 .LASF39
     /tmp/ccRu9p8m.s:2384   .debug_str:000000000000076d .LASF40
     /tmp/ccRu9p8m.s:2348   .debug_str:0000000000000670 .LASF41
     /tmp/ccRu9p8m.s:2342   .debug_str:0000000000000644 .LASF42
     /tmp/ccRu9p8m.s:2314   .debug_str:00000000000005a2 .LASF43
     /tmp/ccRu9p8m.s:2160   .debug_str:0000000000000082 .LASF44
     /tmp/ccRu9p8m.s:2340   .debug_str:000000000000063a .LASF45
     /tmp/ccRu9p8m.s:2278   .debug_str:00000000000004b0 .LASF46
     /tmp/ccRu9p8m.s:2236   .debug_str:0000000000000371 .LASF48
     /tmp/ccRu9p8m.s:2174   .debug_str:00000000000000ec .LASF119
     /tmp/ccRu9p8m.s:2148   .debug_str:0000000000000018 .LASF120
     /tmp/ccRu9p8m.s:2180   .debug_str:0000000000000118 .LASF47
     /tmp/ccRu9p8m.s:2170   .debug_str:00000000000000c9 .LASF49
     /tmp/ccRu9p8m.s:2310   .debug_str:0000000000000587 .LASF50
     /tmp/ccRu9p8m.s:2222   .debug_str:0000000000000252 .LASF51
     /tmp/ccRu9p8m.s:2308   .debug_str:0000000000000576 .LASF121
     /tmp/ccRu9p8m.s:2298   .debug_str:0000000000000545 .LASF52
GAS LISTING /tmp/ccRu9p8m.s 			page 14


     /tmp/ccRu9p8m.s:2380   .debug_str:000000000000074c .LASF53
     /tmp/ccRu9p8m.s:2244   .debug_str:00000000000003ae .LASF54
     /tmp/ccRu9p8m.s:2368   .debug_str:0000000000000714 .LASF55
     /tmp/ccRu9p8m.s:2360   .debug_str:00000000000006e6 .LASF122
     /tmp/ccRu9p8m.s:2188   .debug_str:000000000000015f .LASF56
     /tmp/ccRu9p8m.s:2334   .debug_str:0000000000000614 .LASF57
     /tmp/ccRu9p8m.s:2176   .debug_str:00000000000000fa .LASF58
     /tmp/ccRu9p8m.s:2206   .debug_str:00000000000001de .LASF60
     /tmp/ccRu9p8m.s:2210   .debug_str:00000000000001fb .LASF62
     /tmp/ccRu9p8m.s:2354   .debug_str:00000000000006a4 .LASF64
     /tmp/ccRu9p8m.s:2350   .debug_str:0000000000000678 .LASF66
     /tmp/ccRu9p8m.s:2288   .debug_str:0000000000000501 .LASF63
     /tmp/ccRu9p8m.s:2266   .debug_str:0000000000000453 .LASF69
     /tmp/ccRu9p8m.s:2282   .debug_str:00000000000004d3 .LASF65
     /tmp/ccRu9p8m.s:2284   .debug_str:00000000000004da .LASF67
     /tmp/ccRu9p8m.s:2260   .debug_str:0000000000000421 .LASF68
     /tmp/ccRu9p8m.s:2228   .debug_str:0000000000000338 .LASF70
     /tmp/ccRu9p8m.s:2376   .debug_str:000000000000073f .LASF71
     /tmp/ccRu9p8m.s:2318   .debug_str:00000000000005b3 .LASF72
     /tmp/ccRu9p8m.s:2258   .debug_str:0000000000000419 .LASF73
     /tmp/ccRu9p8m.s:2264   .debug_str:000000000000043f .LASF74
     /tmp/ccRu9p8m.s:2238   .debug_str:000000000000038a .LASF75
     /tmp/ccRu9p8m.s:2286   .debug_str:00000000000004ed .LASF76
     /tmp/ccRu9p8m.s:2388   .debug_str:000000000000078b .LASF77
     /tmp/ccRu9p8m.s:2218   .debug_str:000000000000022c .LASF78
     /tmp/ccRu9p8m.s:2316   .debug_str:00000000000005ac .LASF79
     /tmp/ccRu9p8m.s:2304   .debug_str:000000000000055c .LASF80
     /tmp/ccRu9p8m.s:2306   .debug_str:000000000000056f .LASF81
     /tmp/ccRu9p8m.s:2168   .debug_str:00000000000000b6 .LASF82
     /tmp/ccRu9p8m.s:2182   .debug_str:0000000000000121 .LASF83
     /tmp/ccRu9p8m.s:2208   .debug_str:00000000000001e9 .LASF84
     /tmp/ccRu9p8m.s:2216   .debug_str:0000000000000226 .LASF85
     /tmp/ccRu9p8m.s:2178   .debug_str:0000000000000106 .LASF86
     /tmp/ccRu9p8m.s:2142   .debug_str:0000000000000000 .LASF87
     /tmp/ccRu9p8m.s:2296   .debug_str:000000000000052d .LASF88
     /tmp/ccRu9p8m.s:2290   .debug_str:000000000000050a .LASF89
     /tmp/ccRu9p8m.s:2386   .debug_str:0000000000000773 .LASF90
     /tmp/ccRu9p8m.s:2370   .debug_str:000000000000071a .LASF91
     /tmp/ccRu9p8m.s:2382   .debug_str:0000000000000757 .LASF92
     /tmp/ccRu9p8m.s:2366   .debug_str:000000000000070a .LASF93
     /tmp/ccRu9p8m.s:2250   .debug_str:00000000000003d4 .LASF94
     /tmp/ccRu9p8m.s:2374   .debug_str:0000000000000730 .LASF95
     /tmp/ccRu9p8m.s:2202   .debug_str:00000000000001b4 .LASF96
     /tmp/ccRu9p8m.s:2274   .debug_str:0000000000000492 .LASF97
     /tmp/ccRu9p8m.s:2186   .debug_str:000000000000013d .LASF98
     /tmp/ccRu9p8m.s:2330   .debug_str:0000000000000607 .LASF99
     /tmp/ccRu9p8m.s:2196   .debug_str:000000000000018c .LASF100
     /tmp/ccRu9p8m.s:52     .text:0000000000000038 .LFB74
     /tmp/ccRu9p8m.s:206    .text:0000000000000164 .LFE74
     /tmp/ccRu9p8m.s:2162   .debug_str:000000000000008b .LASF101
     /tmp/ccRu9p8m.s:2088   .debug_loc:0000000000000000 .LLST1
     /tmp/ccRu9p8m.s:2364   .debug_str:00000000000006fa .LASF102
     /tmp/ccRu9p8m.s:2099   .debug_loc:0000000000000036 .LLST2
     /tmp/ccRu9p8m.s:143    .text:0000000000000124 .LBB8
     /tmp/ccRu9p8m.s:155    .text:0000000000000128 .LBE8
     /tmp/ccRu9p8m.s:157    .text:0000000000000128 .LBB10
     /tmp/ccRu9p8m.s:169    .text:0000000000000130 .LBE10
GAS LISTING /tmp/ccRu9p8m.s 			page 15


     /tmp/ccRu9p8m.s:172    .text:0000000000000130 .LBB12
     /tmp/ccRu9p8m.s:180    .text:0000000000000134 .LBE12
     /tmp/ccRu9p8m.s:2106   .debug_loc:0000000000000059 .LLST3
     /tmp/ccRu9p8m.s:73     .text:0000000000000060 .LVL4
     /tmp/ccRu9p8m.s:79     .text:0000000000000070 .LVL5
     /tmp/ccRu9p8m.s:87     .text:0000000000000084 .LVL8
     /tmp/ccRu9p8m.s:92     .text:0000000000000090 .LVL9
     /tmp/ccRu9p8m.s:97     .text:00000000000000a0 .LVL10
     /tmp/ccRu9p8m.s:102    .text:00000000000000b0 .LVL11
     /tmp/ccRu9p8m.s:108    .text:00000000000000c4 .LVL12
     /tmp/ccRu9p8m.s:115    .text:00000000000000d8 .LVL14
     /tmp/ccRu9p8m.s:120    .text:00000000000000e4 .LVL15
     /tmp/ccRu9p8m.s:125    .text:00000000000000f4 .LVL16
     /tmp/ccRu9p8m.s:130    .text:0000000000000104 .LVL17
     /tmp/ccRu9p8m.s:138    .text:000000000000011c .LVL18
     /tmp/ccRu9p8m.s:187    .text:0000000000000148 .LVL23
     /tmp/ccRu9p8m.s:2246   .debug_str:00000000000003b3 .LASF103
     /tmp/ccRu9p8m.s:2344   .debug_str:000000000000064e .LASF104
     /tmp/ccRu9p8m.s:13     .text:0000000000000000 .LFB73
     /tmp/ccRu9p8m.s:46     .text:0000000000000038 .LFE73
     /tmp/ccRu9p8m.s:2113   .debug_loc:000000000000007c .LLST0
     /tmp/ccRu9p8m.s:31     .text:0000000000000020 .LVL2
     /tmp/ccRu9p8m.s:35     .text:0000000000000028 .LVL3
     /tmp/ccRu9p8m.s:2362   .debug_str:00000000000006f5 .LASF105
     /tmp/ccRu9p8m.s:2240   .debug_str:0000000000000392 .LASF106
     /tmp/ccRu9p8m.s:2194   .debug_str:0000000000000187 .LASF123
     /tmp/ccRu9p8m.s:2156   .debug_str:0000000000000063 .LASF107
     /tmp/ccRu9p8m.s:2372   .debug_str:0000000000000724 .LASF109
     /tmp/ccRu9p8m.s:2248   .debug_str:00000000000003c3 .LASF108
     /tmp/ccRu9p8m.s:2252   .debug_str:00000000000003ea .LASF110
     /tmp/ccRu9p8m.s:2276   .debug_str:00000000000004a7 .LASF111
     /tmp/ccRu9p8m.s:81     .text:0000000000000074 .LVL6
     /tmp/ccRu9p8m.s:85     .text:000000000000007c .LVL7
     /tmp/ccRu9p8m.s:201    .text:000000000000015c .LVL25
     /tmp/ccRu9p8m.s:110    .text:00000000000000c8 .LVL13
     /tmp/ccRu9p8m.s:198    .text:0000000000000158 .LVL24
     /tmp/ccRu9p8m.s:171    .text:0000000000000130 .LVL21
     /tmp/ccRu9p8m.s:178    .text:0000000000000134 .LVL22
     /tmp/ccRu9p8m.s:17     .text:0000000000000000 .LVL0
     /tmp/ccRu9p8m.s:29     .text:0000000000000018 .LVL1
     /tmp/ccRu9p8m.s:242    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z11debug_printPKc
_Z8userMainv
_ZN3TCB12createThreadEPFvPvES0_
_Z11debug_printm
_ZN3TCB7runningE
_ZN5Riscv14supervisorTrapEv
